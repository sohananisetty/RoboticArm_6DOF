/// autogenerated analytical inverse kinematics code from ikfast program part of OpenRAVE
/// \author Rosen Diankov
///
/// Licensed under the Apache License, Version 2.0 (the "License");
/// you may not use this file except in compliance with the License.
/// You may obtain a copy of the License at
///     http://www.apache.org/licenses/LICENSE-2.0
/// 
/// Unless required by applicable law or agreed to in writing, software
/// distributed under the License is distributed on an "AS IS" BASIS,
/// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
/// See the License for the specific language governing permissions and
/// limitations under the License.
///
/// ikfast version 0x10000049 generated on 2019-08-05 15:37:59.208809
/// To compile with gcc:
///     gcc -lstdc++ ik.cpp
/// To compile without any main function as a shared object (might need -llapack):
///     gcc -fPIC -lstdc++ -DIKFAST_NO_MAIN -DIKFAST_CLIBRARY -shared -Wl,-soname,libik.so -o libik.so ik.cpp
#define IKFAST_HAS_LIBRARY
#include "ikfast.h" // found inside share/openrave-X.Y/python/ikfast.h
using namespace ikfast;

// check if the included ikfast version matches what this file was compiled with
#define IKFAST_COMPILE_ASSERT(x) extern int __dummy[(int)x]
IKFAST_COMPILE_ASSERT(IKFAST_VERSION==0x10000049);

#include <cmath>
#include <vector>
#include <limits>
#include <algorithm>
#include <complex>

#ifndef IKFAST_ASSERT
#include <stdexcept>
#include <sstream>
#include <iostream>

#ifdef _MSC_VER
#ifndef __PRETTY_FUNCTION__
#define __PRETTY_FUNCTION__ __FUNCDNAME__
#endif
#endif

#ifndef __PRETTY_FUNCTION__
#define __PRETTY_FUNCTION__ __func__
#endif

#define IKFAST_ASSERT(b) { if( !(b) ) { std::stringstream ss; ss << "ikfast exception: " << __FILE__ << ":" << __LINE__ << ": " <<__PRETTY_FUNCTION__ << ": Assertion '" << #b << "' failed"; throw std::runtime_error(ss.str()); } }

#endif

#if defined(_MSC_VER)
#define IKFAST_ALIGNED16(x) __declspec(align(16)) x
#else
#define IKFAST_ALIGNED16(x) x __attribute((aligned(16)))
#endif

#define IK2PI  ((IkReal)6.28318530717959)
#define IKPI  ((IkReal)3.14159265358979)
#define IKPI_2  ((IkReal)1.57079632679490)

#ifdef _MSC_VER
#ifndef isnan
#define isnan _isnan
#endif
#ifndef isinf
#define isinf _isinf
#endif
//#ifndef isfinite
//#define isfinite _isfinite
//#endif
#endif // _MSC_VER

// lapack routines
extern "C" {
  void dgetrf_ (const int* m, const int* n, double* a, const int* lda, int* ipiv, int* info);
  void zgetrf_ (const int* m, const int* n, std::complex<double>* a, const int* lda, int* ipiv, int* info);
  void dgetri_(const int* n, const double* a, const int* lda, int* ipiv, double* work, const int* lwork, int* info);
  void dgesv_ (const int* n, const int* nrhs, double* a, const int* lda, int* ipiv, double* b, const int* ldb, int* info);
  void dgetrs_(const char *trans, const int *n, const int *nrhs, double *a, const int *lda, int *ipiv, double *b, const int *ldb, int *info);
  void dgeev_(const char *jobvl, const char *jobvr, const int *n, double *a, const int *lda, double *wr, double *wi,double *vl, const int *ldvl, double *vr, const int *ldvr, double *work, const int *lwork, int *info);
}

using namespace std; // necessary to get std math routines

#ifdef IKFAST_NAMESPACE
namespace IKFAST_NAMESPACE {
#endif

inline float IKabs(float f) { return fabsf(f); }
inline double IKabs(double f) { return fabs(f); }

inline float IKsqr(float f) { return f*f; }
inline double IKsqr(double f) { return f*f; }

inline float IKlog(float f) { return logf(f); }
inline double IKlog(double f) { return log(f); }

// allows asin and acos to exceed 1. has to be smaller than thresholds used for branch conds and evaluation
#ifndef IKFAST_SINCOS_THRESH
#define IKFAST_SINCOS_THRESH ((IkReal)1e-7)
#endif

// used to check input to atan2 for degenerate cases. has to be smaller than thresholds used for branch conds and evaluation
#ifndef IKFAST_ATAN2_MAGTHRESH
#define IKFAST_ATAN2_MAGTHRESH ((IkReal)1e-7)
#endif

// minimum distance of separate solutions
#ifndef IKFAST_SOLUTION_THRESH
#define IKFAST_SOLUTION_THRESH ((IkReal)1e-6)
#endif

// there are checkpoints in ikfast that are evaluated to make sure they are 0. This threshold speicfies by how much they can deviate
#ifndef IKFAST_EVALCOND_THRESH
#define IKFAST_EVALCOND_THRESH ((IkReal)0.00001)
#endif


inline float IKasin(float f)
{
IKFAST_ASSERT( f > -1-IKFAST_SINCOS_THRESH && f < 1+IKFAST_SINCOS_THRESH ); // any more error implies something is wrong with the solver
if( f <= -1 ) return float(-IKPI_2);
else if( f >= 1 ) return float(IKPI_2);
return asinf(f);
}
inline double IKasin(double f)
{
IKFAST_ASSERT( f > -1-IKFAST_SINCOS_THRESH && f < 1+IKFAST_SINCOS_THRESH ); // any more error implies something is wrong with the solver
if( f <= -1 ) return -IKPI_2;
else if( f >= 1 ) return IKPI_2;
return asin(f);
}

// return positive value in [0,y)
inline float IKfmod(float x, float y)
{
    while(x < 0) {
        x += y;
    }
    return fmodf(x,y);
}

// return positive value in [0,y)
inline double IKfmod(double x, double y)
{
    while(x < 0) {
        x += y;
    }
    return fmod(x,y);
}

inline float IKacos(float f)
{
IKFAST_ASSERT( f > -1-IKFAST_SINCOS_THRESH && f < 1+IKFAST_SINCOS_THRESH ); // any more error implies something is wrong with the solver
if( f <= -1 ) return float(IKPI);
else if( f >= 1 ) return float(0);
return acosf(f);
}
inline double IKacos(double f)
{
IKFAST_ASSERT( f > -1-IKFAST_SINCOS_THRESH && f < 1+IKFAST_SINCOS_THRESH ); // any more error implies something is wrong with the solver
if( f <= -1 ) return IKPI;
else if( f >= 1 ) return 0;
return acos(f);
}
inline float IKsin(float f) { return sinf(f); }
inline double IKsin(double f) { return sin(f); }
inline float IKcos(float f) { return cosf(f); }
inline double IKcos(double f) { return cos(f); }
inline float IKtan(float f) { return tanf(f); }
inline double IKtan(double f) { return tan(f); }
inline float IKsqrt(float f) { if( f <= 0.0f ) return 0.0f; return sqrtf(f); }
inline double IKsqrt(double f) { if( f <= 0.0 ) return 0.0; return sqrt(f); }
inline float IKatan2Simple(float fy, float fx) {
    return atan2f(fy,fx);
}
inline float IKatan2(float fy, float fx) {
    if( isnan(fy) ) {
        IKFAST_ASSERT(!isnan(fx)); // if both are nan, probably wrong value will be returned
        return float(IKPI_2);
    }
    else if( isnan(fx) ) {
        return 0;
    }
    return atan2f(fy,fx);
}
inline double IKatan2Simple(double fy, double fx) {
    return atan2(fy,fx);
}
inline double IKatan2(double fy, double fx) {
    if( isnan(fy) ) {
        IKFAST_ASSERT(!isnan(fx)); // if both are nan, probably wrong value will be returned
        return IKPI_2;
    }
    else if( isnan(fx) ) {
        return 0;
    }
    return atan2(fy,fx);
}

template <typename T>
struct CheckValue
{
    T value;
    bool valid;
};

template <typename T>
inline CheckValue<T> IKatan2WithCheck(T fy, T fx, T epsilon)
{
    CheckValue<T> ret;
    ret.valid = false;
    ret.value = 0;
    if( !isnan(fy) && !isnan(fx) ) {
        if( IKabs(fy) >= IKFAST_ATAN2_MAGTHRESH || IKabs(fx) > IKFAST_ATAN2_MAGTHRESH ) {
            ret.value = IKatan2Simple(fy,fx);
            ret.valid = true;
        }
    }
    return ret;
}

inline float IKsign(float f) {
    if( f > 0 ) {
        return float(1);
    }
    else if( f < 0 ) {
        return float(-1);
    }
    return 0;
}

inline double IKsign(double f) {
    if( f > 0 ) {
        return 1.0;
    }
    else if( f < 0 ) {
        return -1.0;
    }
    return 0;
}

template <typename T>
inline CheckValue<T> IKPowWithIntegerCheck(T f, int n)
{
    CheckValue<T> ret;
    ret.valid = true;
    if( n == 0 ) {
        ret.value = 1.0;
        return ret;
    }
    else if( n == 1 )
    {
        ret.value = f;
        return ret;
    }
    else if( n < 0 )
    {
        if( f == 0 )
        {
            ret.valid = false;
            ret.value = (T)1.0e30;
            return ret;
        }
        if( n == -1 ) {
            ret.value = T(1.0)/f;
            return ret;
        }
    }

    int num = n > 0 ? n : -n;
    if( num == 2 ) {
        ret.value = f*f;
    }
    else if( num == 3 ) {
        ret.value = f*f*f;
    }
    else {
        ret.value = 1.0;
        while(num>0) {
            if( num & 1 ) {
                ret.value *= f;
            }
            num >>= 1;
            f *= f;
        }
    }
    
    if( n < 0 ) {
        ret.value = T(1.0)/ret.value;
    }
    return ret;
}

/// solves the forward kinematics equations.
/// \param pfree is an array specifying the free joints of the chain.
IKFAST_API void ComputeFk(const IkReal* j, IkReal* eetrans, IkReal* eerot) {
IkReal x0,x1,x2,x3,x4,x5,x6,x7,x8,x9,x10,x11,x12,x13,x14,x15,x16,x17,x18,x19,x20,x21,x22,x23,x24,x25,x26,x27,x28,x29,x30,x31,x32,x33,x34,x35,x36,x37,x38,x39,x40,x41,x42,x43,x44,x45,x46,x47,x48,x49,x50,x51;
x0=IKcos(j[0]);
x1=IKcos(j[1]);
x2=IKsin(j[2]);
x3=IKcos(j[2]);
x4=IKsin(j[1]);
x5=IKsin(j[3]);
x6=IKcos(j[3]);
x7=IKsin(j[0]);
x8=IKcos(j[5]);
x9=IKsin(j[5]);
x10=IKsin(j[4]);
x11=IKcos(j[4]);
x12=((0.01)*x1);
x13=((1.0)*x11);
x14=((0.01)*x7);
x15=((1.0)*x10);
x16=((1.0)*x7);
x17=((0.085)*x0);
x18=((0.095)*x4);
x19=((0.055)*x0);
x20=((0.055)*x6);
x21=((1.0)*x0);
x22=(x10*x6);
x23=(x2*x7);
x24=(x3*x4);
x25=(x11*x6);
x26=(x1*x3);
x27=(x2*x4);
x28=(x1*x2);
x29=(x0*x5);
x30=((1.0)*x26);
x31=(x21*x27);
x32=(x16*x27);
x33=((((-1.0)*x30))+x27);
x34=((((1.0)*x24))+(((1.0)*x28)));
x35=((-1.0)*x34);
x36=((((-1.0)*x31))+((x0*x26)));
x37=((((-1.0)*x32))+((x26*x7)));
x38=(x34*x5);
x39=(x21*(((((-1.0)*x24))+(((-1.0)*x28)))));
x40=(x21*((x24+x28)));
x41=(x16*(((((-1.0)*x24))+(((-1.0)*x28)))));
x42=(x16*((x24+x28)));
x43=(x36*x6);
x44=(x37*x6);
x45=(x10*x39);
x46=(x10*x41);
x47=((((-1.0)*x16*x5))+x43);
x48=(x44+x29);
x49=((((-1.0)*x16*x6))+((x5*(((((-1.0)*x21*x26))+x31)))));
x50=(((x0*x6))+((x5*(((((-1.0)*x16*x26))+x32)))));
x51=(x11*x47);
eerot[0]=(((x49*x9))+((x8*((x45+x51)))));
eerot[1]=(((x9*(((((-1.0)*x13*x47))+(((-1.0)*x15*x39))))))+((x49*x8)));
eerot[2]=(((x10*x47))+((x11*x40)));
eetrans[0]=(((x0*x18))+((x10*(((((-0.055)*x5*x7))+((x20*x36))))))+((x11*((((x19*x28))+((x19*x24))))))+((x10*((((x0*x12*x2))+(((0.01)*x0*x24))))))+((x17*x28))+((x17*x24))+((x11*((((x14*x5))+(((-0.01)*x43)))))));
eerot[3]=(((x50*x9))+((x8*((((x11*x48))+x46)))));
eerot[4]=(((x9*(((((-1.0)*x15*x41))+(((-1.0)*x13*x48))))))+((x50*x8)));
eerot[5]=(((x10*x48))+((x11*x42)));
IkReal x52=(x24*x7);
IkReal x53=(x1*x23);
eetrans[1]=(((x18*x7))+(((0.085)*x53))+(((0.085)*x52))+((x11*(((((0.055)*x52))+(((0.055)*x53))))))+((x10*((((x20*x37))+((x19*x5))))))+((x10*((((x14*x24))+((x12*x23))))))+((x11*(((((-0.01)*x29))+(((-0.01)*x44)))))));
eerot[6]=(((x8*((((x10*x33))+((x25*x35))))))+((x38*x9)));
eerot[7]=(((x9*(((((-1.0)*x13*x35*x6))+(((-1.0)*x15*x33))))))+((x38*x8)));
eerot[8]=(((x22*x35))+((x11*(((((-1.0)*x27))+x30)))));
eetrans[2]=((0.083)+(((0.095)*x1))+(((0.085)*x26))+((x11*(((((-0.055)*x27))+(((0.055)*x26))))))+((x10*(((((-0.01)*x27))+((x12*x3))))))+((x25*(((((0.01)*x24))+((x12*x2))))))+(((-0.085)*x27))+((x22*(((((-0.055)*x28))+(((-0.055)*x24)))))));
}

IKFAST_API int GetNumFreeParameters() { return 0; }
IKFAST_API int* GetFreeParameters() { return NULL; }
IKFAST_API int GetNumJoints() { return 6; }

IKFAST_API int GetIkRealSize() { return sizeof(IkReal); }

IKFAST_API int GetIkType() { return 0x67000001; }

class IKSolver {
public:
IkReal j0,cj0,sj0,htj0,j0mul,j1,cj1,sj1,htj1,j1mul,j2,cj2,sj2,htj2,j2mul,j3,cj3,sj3,htj3,j3mul,j4,cj4,sj4,htj4,j4mul,j5,cj5,sj5,htj5,j5mul,new_r00,r00,rxp0_0,new_r01,r01,rxp0_1,new_r02,r02,rxp0_2,new_r10,r10,rxp1_0,new_r11,r11,rxp1_1,new_r12,r12,rxp1_2,new_r20,r20,rxp2_0,new_r21,r21,rxp2_1,new_r22,r22,rxp2_2,new_px,px,npx,new_py,py,npy,new_pz,pz,npz,pp;
unsigned char _ij0[2], _nj0,_ij1[2], _nj1,_ij2[2], _nj2,_ij3[2], _nj3,_ij4[2], _nj4,_ij5[2], _nj5;

IkReal j100, cj100, sj100;
unsigned char _ij100[2], _nj100;
bool ComputeIk(const IkReal* eetrans, const IkReal* eerot, const IkReal* pfree, IkSolutionListBase<IkReal>& solutions) {
j0=numeric_limits<IkReal>::quiet_NaN(); _ij0[0] = -1; _ij0[1] = -1; _nj0 = -1; j1=numeric_limits<IkReal>::quiet_NaN(); _ij1[0] = -1; _ij1[1] = -1; _nj1 = -1; j2=numeric_limits<IkReal>::quiet_NaN(); _ij2[0] = -1; _ij2[1] = -1; _nj2 = -1; j3=numeric_limits<IkReal>::quiet_NaN(); _ij3[0] = -1; _ij3[1] = -1; _nj3 = -1; j4=numeric_limits<IkReal>::quiet_NaN(); _ij4[0] = -1; _ij4[1] = -1; _nj4 = -1; j5=numeric_limits<IkReal>::quiet_NaN(); _ij5[0] = -1; _ij5[1] = -1; _nj5 = -1; 
for(int dummyiter = 0; dummyiter < 1; ++dummyiter) {
    solutions.Clear();
r00 = eerot[0*3+0];
r01 = eerot[0*3+1];
r02 = eerot[0*3+2];
r10 = eerot[1*3+0];
r11 = eerot[1*3+1];
r12 = eerot[1*3+2];
r20 = eerot[2*3+0];
r21 = eerot[2*3+1];
r22 = eerot[2*3+2];
px = eetrans[0]; py = eetrans[1]; pz = eetrans[2];

new_r00=r00;
new_r01=r01;
new_r02=r02;
new_px=((((-0.055)*r02))+px);
new_r10=r10;
new_r11=r11;
new_r12=r12;
new_py=((((-0.055)*r12))+py);
new_r20=r20;
new_r21=r21;
new_r22=r22;
new_pz=((-0.083)+(((-0.055)*r22))+pz);
r00 = new_r00; r01 = new_r01; r02 = new_r02; r10 = new_r10; r11 = new_r11; r12 = new_r12; r20 = new_r20; r21 = new_r21; r22 = new_r22; px = new_px; py = new_py; pz = new_pz;
IkReal x54=((1.0)*px);
IkReal x55=((1.0)*pz);
IkReal x56=((1.0)*py);
pp=((px*px)+(py*py)+(pz*pz));
npx=(((px*r00))+((py*r10))+((pz*r20)));
npy=(((px*r01))+((py*r11))+((pz*r21)));
npz=(((px*r02))+((py*r12))+((pz*r22)));
rxp0_0=((((-1.0)*r20*x56))+((pz*r10)));
rxp0_1=(((px*r20))+(((-1.0)*r00*x55)));
rxp0_2=((((-1.0)*r10*x54))+((py*r00)));
rxp1_0=((((-1.0)*r21*x56))+((pz*r11)));
rxp1_1=(((px*r21))+(((-1.0)*r01*x55)));
rxp1_2=((((-1.0)*r11*x54))+((py*r01)));
rxp2_0=(((pz*r12))+(((-1.0)*r22*x56)));
rxp2_1=(((px*r22))+(((-1.0)*r02*x55)));
rxp2_2=((((-1.0)*r12*x54))+((py*r02)));
IkReal op[8+1], zeror[8];
int numroots;
IkReal x57=((100.0)*pp);
IkReal x58=((2.0)*npx);
IkReal x59=((17.0)*npz);
IkReal x60=((0.01)*r21);
IkReal x61=((1.0)*rxp2_2);
IkReal x62=(x60+(((-1.0)*x61)));
IkReal x63=((-0.17)+x57);
IkReal x64=((((-1.0)*x61))+(((-1.0)*x60)));
IkReal x65=(x59+x58);
IkReal x66=(x58+x63+(((-1.0)*x59)));
IkReal x67=(x63+(((-1.0)*x65)));
IkReal x68=(x59+x63+(((-1.0)*x58)));
IkReal x69=(x63+x65);
IkReal gconst0=x66;
IkReal gconst1=x67;
IkReal gconst2=x66;
IkReal gconst3=x67;
IkReal gconst4=x64;
IkReal gconst5=x62;
IkReal gconst6=x69;
IkReal gconst7=x68;
IkReal gconst8=x64;
IkReal gconst9=x62;
IkReal gconst10=x69;
IkReal gconst11=x68;
IkReal x70=npy*npy;
IkReal x71=r20*r20;
IkReal x72=rxp2_2*rxp2_2;
IkReal x73=r21*r21;
IkReal x74=(gconst1*rxp0_2);
IkReal x75=(npy*r20);
IkReal x76=(gconst0*rxp0_2);
IkReal x77=(gconst2*r21);
IkReal x78=(gconst1*npx);
IkReal x79=(gconst1*r21);
IkReal x80=((0.0068)*rxp2_2);
IkReal x81=((68.0)*npx);
IkReal x82=((0.02)*rxp2_2);
IkReal x83=(gconst11*gconst8);
IkReal x84=((0.34)*gconst4);
IkReal x85=(gconst10*rxp0_2);
IkReal x86=((0.0001)*gconst2);
IkReal x87=((2.72)*npx);
IkReal x88=(gconst7*gconst8);
IkReal x89=(gconst0*r21);
IkReal x90=((2.0)*gconst7);
IkReal x91=((0.08)*rxp2_2);
IkReal x92=(gconst10*npx);
IkReal x93=(gconst2*rxp2_2);
IkReal x94=(gconst10*gconst5);
IkReal x95=((0.16)*rxp1_2);
IkReal x96=((0.34)*gconst9);
IkReal x97=(gconst1*rxp2_2);
IkReal x98=((0.16)*rxp0_2);
IkReal x99=((2.0)*gconst6);
IkReal x100=(gconst10*gconst9);
IkReal x101=(gconst5*gconst6);
IkReal x102=((0.0001)*gconst3);
IkReal x103=(gconst6*gconst9);
IkReal x104=(gconst4*gconst7);
IkReal x105=(gconst3*r21);
IkReal x106=(gconst1*gconst2);
IkReal x107=((34.0)*gconst9);
IkReal x108=(gconst10*gconst7);
IkReal x109=(gconst11*rxp0_2);
IkReal x110=(gconst0*x72);
IkReal x111=((0.000136)*x71);
IkReal x112=((0.04)*x105);
IkReal x113=((0.0136)*x71);
IkReal x114=(gconst1*x73);
IkReal x115=((16.0)*npy*rxp1_2);
IkReal x116=((34.0)*gconst5*npx);
IkReal x117=(gconst0*x73);
IkReal x118=((0.68)*npx*rxp2_2);
IkReal x119=(gconst2*x72);
IkReal x120=(gconst3*x72);
IkReal x121=((6.8e-5)*x73);
IkReal x122=((34.0)*gconst4*npx);
IkReal x123=((0.0004)*x71);
IkReal x124=(x70*x73);
IkReal x125=((32.0)*rxp0_2*x70);
IkReal x126=(gconst5*gconst8*x70);
IkReal x127=(x70*x72);
op[0]=((((-16.0)*x126))+(((-1.0)*x103*x94))+((x101*x83))+(((0.08)*x75*x88))+(((0.08)*x75*x94))+(((-1.0)*x104*x83))+(((-1.0)*x108*x123))+((x100*x104)));
op[1]=(((x113*x92))+(((0.34)*gconst8*x101))+(((0.0272)*gconst8*x75))+(((-1.0)*gconst5*x85*x99))+(((-1.0)*x115*x88))+(((-1.0)*x115*x94))+(((-1.0)*x94*x96))+((x100*x84))+(((-1.0)*x83*x84))+(((0.34)*gconst5*x83))+(((-1.0)*gconst7*x111))+(((-1.0)*gconst4*x107*x92))+(((0.0272)*gconst5*x75))+((gconst5*x125))+(((-1.0)*gconst10*x111))+(((-544.0)*x126))+(((-1.0)*gconst5*x109*x99))+(((-34.0)*gconst8*npx*x101))+(((-1.0)*gconst5*x107*x92))+((rxp0_2*x83*x90))+((rxp0_2*x83*x99))+(((-1.0)*gconst7*x75*x98))+((gconst7*gconst9*x84))+(((-1.0)*gconst8*x75*x87))+(((-1.0)*x84*x88))+(((-1.0)*gconst7*npx*x113))+(((-1.0)*x101*x96))+((gconst5*x75*x87))+(((0.16)*x75*x85))+((r20*x108*x95))+((x122*x83))+((x122*x88))+((x116*x83))+(((-1.0)*gconst8*x125))+((npx*x104*x107))+((gconst4*x85*x90))+((gconst4*x109*x90))+(((1.36)*x75*x88))+(((-1.0)*npx*x101*x107))+(((1.36)*x75*x94))+(((-1.0)*gconst9*x85*x99))+(((-1.0)*gconst9*x85*x90)));
op[2]=((((-68.0)*gconst10*gconst4*npx*rxp0_2))+(((-1.0)*gconst10*gconst5*gconst6*rxp2_2))+(((-0.1156)*gconst5*gconst9))+(((0.68)*gconst10*gconst4*rxp0_2))+(((-16.0)*gconst5*rxp2_2*(npy*npy)))+(((-16.0)*gconst8*rxp2_2*(npy*npy)))+(((-0.01)*gconst10*gconst4*gconst7*r21))+(((-68.0)*gconst11*gconst4*npx*rxp0_2))+(((-23.12)*gconst5*gconst9*npx))+(((5.44)*gconst7*npx*r20*rxp1_2))+(((-46.24)*gconst8*npx*npy*r20))+(((-68.0)*gconst6*gconst9*npx*rxp0_2))+(((-0.68)*gconst6*gconst9*rxp0_2))+(((0.68)*gconst7*gconst8*rxp0_2))+(((-4.0)*gconst10*gconst7*(rxp0_2*rxp0_2)))+(((-5.44)*gconst8*npy*rxp1_2))+(((-4.0)*gconst11*gconst7*(rxp0_2*rxp0_2)))+(((-0.68)*gconst7*gconst9*rxp0_2))+(((0.08)*gconst10*npy*r20*rxp2_2))+(((-1.0)*gconst2*gconst5*gconst6*gconst9))+(((0.08)*gconst2*gconst5*npy*r20))+(((0.08)*gconst1*gconst8*npy*r20))+(((46.24)*gconst5*npx*npy*r20))+(((-68.0)*gconst11*gconst5*npx*rxp0_2))+(((32.0)*gconst7*npy*rxp0_2*rxp1_2))+(((-0.16)*gconst5*r21*(npy*npy)))+(((-1.0)*gconst11*gconst4*gconst7*rxp2_2))+(((0.4624)*(npx*npx)*(r20*r20)))+(((0.01)*gconst10*gconst5*gconst6*r21))+(((23.12)*gconst4*gconst8*npx))+((gconst11*gconst6*gconst8*rxp2_2))+(((-1088.0)*gconst8*rxp0_2*(npy*npy)))+(((-1.0)*gconst0*gconst10*gconst5*gconst9))+(((-4.0)*gconst11*gconst6*(rxp0_2*rxp0_2)))+(((2.72)*gconst10*npy*r20*rxp0_2))+((gconst10*gconst7*gconst9*rxp2_2))+(((0.0008)*gconst7*npy*r20*r21))+(((-4656.0)*gconst5*gconst8*(npy*npy)))+(((-272.0)*gconst10*gconst5*npy*rxp1_2))+(((-16.0)*gconst10*gconst7*(rxp1_2*rxp1_2)))+(((0.4624)*gconst8*npy*r20))+(((-0.0004)*gconst1*gconst10*(r20*r20)))+(((-68.0)*gconst7*gconst8*npx*rxp0_2))+(((-1.0)*gconst11*gconst7*gconst8*rxp2_2))+(((-5.44)*gconst10*npx*r20*rxp1_2))+(((-0.0004)*gconst2*gconst7*(r20*r20)))+(((-68.0)*gconst7*gconst9*npx*rxp0_2))+(((-1.36)*gconst5*gconst6*rxp0_2))+(((64.0)*(npy*npy)*(rxp0_2*rxp0_2)))+(((0.68)*gconst11*gconst4*rxp0_2))+(((-2.72)*gconst7*npy*r20*rxp0_2))+(((-4.0)*gconst10*gconst6*(rxp0_2*rxp0_2)))+(((-32.0)*gconst10*npy*rxp0_2*rxp1_2))+((gconst3*gconst5*gconst6*gconst8))+(((-1.36)*gconst10*gconst9*rxp0_2))+((gconst10*gconst4*gconst7*rxp2_2))+(((-4.624e-5)*(r20*r20)))+(((-1156.0)*gconst4*gconst8*(npx*npx)))+(((-5.44)*gconst5*npy*rxp1_2))+(((-0.0008)*gconst10*npy*r20*r21))+(((0.16)*gconst8*r21*(npy*npy)))+(((-68.0)*gconst6*gconst8*npx*rxp0_2))+(((-1.0)*gconst10*gconst6*gconst9*rxp2_2))+(((0.68)*gconst6*gconst8*rxp0_2))+(((-0.01)*gconst11*gconst7*gconst8*r21))+(((0.0544)*gconst10*r20*rxp1_2))+(((-1156.0)*gconst4*gconst9*(npx*npx)))+(((-1156.0)*gconst5*gconst9*(npx*npx)))+(((0.1156)*gconst4*gconst9))+(((0.01)*gconst10*gconst7*gconst9*r21))+((gconst1*gconst10*gconst4*gconst9))+((gconst2*gconst4*gconst7*gconst9))+(((-0.01)*gconst11*gconst4*gconst7*r21))+(((10.88)*npx*npy*r20*rxp0_2))+(((0.08)*gconst7*npy*r20*rxp2_2))+(((-272.0)*gconst7*gconst8*npy*rxp1_2))+(((1.36)*gconst11*gconst8*rxp0_2))+(((-1156.0)*gconst5*gconst8*(npx*npx)))+(((-68.0)*gconst10*gconst5*npx*rxp0_2))+((gconst0*gconst11*gconst5*gconst8))+(((0.0544)*gconst7*r20*rxp1_2))+(((0.1156)*gconst5*gconst8))+(((0.4624)*gconst5*npy*r20))+(((1.36)*gconst4*gconst7*rxp0_2))+(((1088.0)*gconst5*rxp0_2*(npy*npy)))+(((-0.68)*gconst10*gconst5*rxp0_2))+(((0.01)*gconst10*gconst6*gconst9*r21))+((gconst11*gconst5*gconst6*rxp2_2))+(((-1.0)*gconst1*gconst11*gconst4*gconst8))+(((-544.0)*gconst5*npx*npy*rxp1_2))+(((-0.01)*gconst11*gconst6*gconst8*r21))+(((-0.1156)*gconst4*gconst8))+(((0.01)*gconst11*gconst5*gconst6*r21))+(((-0.68)*gconst11*gconst5*rxp0_2))+(((-1.0)*gconst3*gconst4*gconst7*gconst8))+(((0.0008)*gconst10*gconst7*(r20*r20)))+(((544.0)*gconst8*npx*npy*rxp1_2)));
op[3]=((((0.34)*gconst10*gconst4*rxp2_2))+(((0.34)*gconst7*gconst9*rxp2_2))+(((-34.0)*gconst10*gconst5*npx*rxp2_2))+(((-0.34)*gconst7*gconst8*rxp2_2))+(((-2.0)*gconst2*gconst5*gconst6*rxp0_2))+(((-16.0)*gconst2*gconst5*npy*rxp1_2))+(((34.0)*gconst7*gconst8*npx*rxp2_2))+(((-2.0)*gconst2*gconst6*gconst9*rxp0_2))+(((0.34)*gconst1*gconst4*gconst9))+(((-5.44)*gconst7*(rxp1_2*rxp1_2)))+(((0.0034)*gconst6*gconst9*r21))+(((0.0544)*npy*r20*rxp2_2))+(((0.34)*gconst6*gconst8*npx*r21))+(((34.0)*gconst11*gconst5*npx*rxp2_2))+(((0.34)*gconst0*gconst5*gconst8))+(((-0.0034)*gconst6*gconst8*r21))+(((2176.0)*(npy*npy)*(rxp0_2*rxp0_2)))+(((-0.0034)*gconst11*gconst4*r21))+(((-0.16)*gconst10*gconst7*r20*rxp1_2))+(((68.0)*gconst11*gconst8*npx*rxp2_2))+(((0.0136)*gconst7*npy*r20*r21))+(((-184.96)*r20*rxp1_2*(npx*npx)))+(((2.0)*gconst0*gconst11*gconst8*rxp0_2))+(((-0.34)*gconst6*gconst9*rxp2_2))+(((-9248.0)*gconst5*npx*npy*rxp1_2))+(((0.000272)*gconst7*(r20*r20)))+(((0.34)*gconst6*gconst9*npx*r21))+(((2.0)*gconst3*gconst4*gconst7*rxp0_2))+(((-46.24)*gconst5*npx*rxp0_2))+(((-0.16)*gconst1*npy*r20*rxp0_2))+(((-2.0)*gconst0*gconst10*gconst5*rxp0_2))+(((1.36)*gconst2*gconst5*npy*r20))+(((68.0)*gconst4*gconst7*npx*rxp2_2))+(((34.0)*gconst3*gconst4*gconst8*npx))+(((-9312.0)*gconst8*rxp0_2*(npy*npy)))+(((0.0068)*gconst5*gconst6*r21))+(((-46.24)*gconst9*npx*rxp0_2))+(((-5.44)*gconst10*(rxp1_2*rxp1_2)))+(((0.16)*gconst1*gconst10*r20*rxp1_2))+(((9312.0)*gconst5*rxp0_2*(npy*npy)))+(((-34.0)*gconst2*gconst4*gconst9*npx))+(((0.04)*gconst11*gconst6*r21*rxp0_2))+(((0.000272)*gconst10*(r20*r20)))+(((0.34)*gconst3*gconst5*gconst8))+(((-2176.0)*npx*npy*rxp0_2*rxp1_2))+(((-0.000136)*gconst2*(r20*r20)))+(((4.0)*gconst11*gconst7*rxp0_2*rxp2_2))+(((2.0)*gconst3*gconst7*gconst8*rxp0_2))+(((0.34)*gconst11*gconst5*npx*r21))+(((0.34)*gconst7*gconst8*npx*r21))+(((-544.0)*gconst8*rxp2_2*(npy*npy)))+(((2.0)*gconst3*gconst6*gconst8*rxp0_2))+(((-34.0)*gconst0*gconst5*gconst8*npx))+(((0.0272)*gconst7*npx*(r20*r20)))+(((-16.0)*gconst7*npy*rxp1_2*rxp2_2))+(((0.0034)*gconst11*gconst5*r21))+(((0.16)*gconst2*npy*r20*rxp0_2))+(((-0.0136)*gconst1*npx*(r20*r20)))+(((-0.34)*gconst11*gconst4*rxp2_2))+(((0.34)*gconst7*gconst9*npx*r21))+(((-1.36)*gconst7*gconst8*npy*r20))+(((544.0)*gconst10*npx*(rxp1_2*rxp1_2)))+(((-16.0)*gconst7*gconst8*npy*rxp1_2))+(((-544.0)*gconst5*gconst8*(npy*npy)))+(((-544.0)*gconst10*npy*rxp0_2*rxp1_2))+(((-46.24)*gconst8*npx*rxp0_2))+(((-0.4624)*gconst9*rxp0_2))+(((-34.0)*gconst10*gconst4*npx*rxp2_2))+(((-0.34)*gconst2*gconst5*gconst9))+(((34.0)*gconst3*gconst5*gconst8*npx))+(((-0.34)*gconst0*gconst5*gconst9))+(((-34.0)*gconst6*gconst9*npx*rxp2_2))+(((0.34)*gconst6*gconst8*rxp2_2))+(((-92.48)*gconst5*npy*rxp1_2))+(((0.16)*gconst10*npy*r21*rxp1_2))+(((-544.0)*gconst7*npx*(rxp1_2*rxp1_2)))+(((-2.0)*gconst1*gconst10*gconst9*rxp0_2))+(((184.96)*npx*npy*r20*rxp0_2))+(((-16.0)*gconst10*gconst5*npy*rxp1_2))+(((34.0)*gconst1*gconst4*gconst9*npx))+(((-0.64)*r21*rxp0_2*(npy*npy)))+(((-0.4624)*gconst5*rxp0_2))+(((1.36)*gconst10*npy*r20*rxp2_2))+(((-0.000136)*gconst1*(r20*r20)))+(((-34.0)*gconst2*gconst5*gconst9*npx))+(((34.0)*gconst1*gconst4*gconst8*npx))+(((0.0136)*gconst2*npx*(r20*r20)))+(((2.0)*gconst1*gconst10*gconst4*rxp0_2))+(((-0.0544)*npx*npy*r20*r21))+(((1.36)*gconst7*npy*r20*rxp2_2))+(((0.0034)*gconst10*gconst5*r21))+(((-16.0)*gconst1*gconst8*npy*rxp1_2))+(((2.0)*gconst1*gconst11*gconst4*rxp0_2))+(((-544.0)*gconst5*rxp2_2*(npy*npy)))+(((-34.0)*gconst6*gconst8*npx*rxp2_2))+(((0.0034)*gconst7*gconst9*r21))+(((-0.0034)*gconst10*gconst4*r21))+(((-1.36)*gconst10*gconst5*npy*r20))+(((-0.0272)*gconst10*npx*(r20*r20)))+(((0.0068)*gconst10*gconst9*r21))+(((-2.72)*gconst11*(rxp0_2*rxp0_2)))+(((-0.0068)*gconst11*gconst8*r21))+(((-2.72)*gconst6*(rxp0_2*rxp0_2)))+(((-5.44)*gconst5*r21*(npy*npy)))+(((5.44)*gconst8*r21*(npy*npy)))+(((34.0)*gconst11*gconst4*npx*rxp2_2))+(((-0.34)*gconst3*gconst4*gconst8))+(((-2.0)*gconst0*gconst10*gconst9*rxp0_2))+(((-0.34)*gconst10*gconst5*rxp2_2))+(((-2.72)*gconst7*(rxp0_2*rxp0_2)))+(((-2.0)*gconst0*gconst11*gconst5*rxp0_2))+(((-0.34)*gconst1*gconst4*gconst8))+(((0.34)*gconst10*gconst4*npx*r21))+(((-2.0)*gconst2*gconst7*gconst9*rxp0_2))+(((-0.0068)*gconst4*gconst7*r21))+(((0.018496)*r20*rxp1_2))+(((-34.0)*gconst0*gconst5*gconst9*npx))+(((0.34)*gconst11*gconst4*npx*r21))+(((-68.0)*gconst10*gconst9*npx*rxp2_2))+(((0.4624)*gconst4*rxp0_2))+(((544.0)*gconst7*npy*rxp0_2*rxp1_2))+(((-68.0)*gconst5*gconst6*npx*rxp2_2))+(((9248.0)*gconst8*npx*npy*rxp1_2))+(((-0.0136)*gconst10*npy*r20*r21))+(((0.34)*gconst10*gconst5*npx*r21))+(((0.34)*gconst2*gconst4*gconst9))+(((-0.0034)*gconst7*gconst8*r21))+(((-46.24)*gconst4*npx*rxp0_2))+(((-2.0)*gconst3*gconst5*gconst6*rxp0_2))+(((0.04)*gconst11*gconst7*r21*rxp0_2))+(((34.0)*gconst7*gconst9*npx*rxp2_2))+(((-4.0)*gconst10*gconst6*rxp0_2*rxp2_2))+(((-0.16)*gconst7*npy*r21*rxp1_2))+(((2.0)*gconst1*gconst11*gconst8*rxp0_2))+(((0.04)*gconst10*gconst6*r21*rxp0_2))+(((0.4624)*gconst8*rxp0_2))+(((0.34)*gconst11*gconst5*rxp2_2))+(((0.04)*gconst10*gconst7*r21*rxp0_2))+(((0.16)*gconst2*gconst7*r20*rxp1_2))+(((2.0)*gconst2*gconst4*gconst7*rxp0_2))+(((-92.48)*gconst8*npy*rxp1_2))+(((-2.72)*gconst10*(rxp0_2*rxp0_2)))+(((1.36)*gconst1*gconst8*npy*r20))+(((-16.0)*gconst10*npy*rxp1_2*rxp2_2)));
op[4]=((((-16.0)*gconst5*gconst8*(npy*npy)))+(((-4.0)*gconst0*gconst10*(rxp0_2*rxp0_2)))+(((0.01)*gconst1*gconst10*gconst9*r21))+((gconst1*gconst2*gconst4*gconst9))+(((18496.0)*(npx*npx)*(rxp1_2*rxp1_2)))+((gconst0*gconst11*gconst5*rxp2_2))+(((0.0008)*gconst1*npy*r20*r21))+(((0.68)*gconst1*gconst8*rxp0_2))+(((2.72)*gconst2*npy*r20*rxp0_2))+(((-0.0004)*gconst10*gconst7*(r20*r20)))+(((-4656.0)*gconst8*rxp2_2*(npy*npy)))+(((32.0)*gconst1*npy*rxp0_2*rxp1_2))+(((0.0016)*(npy*npy)*(r21*r21)))+(((-0.0001)*gconst10*gconst7*(r21*r21)))+(((-2312.0)*gconst9*rxp2_2*(npx*npx)))+(((0.002312)*gconst9*r21))+(((10.88)*npx*npy*r21*rxp1_2))+((gconst2*gconst4*gconst7*rxp2_2))+(((-0.01)*gconst3*gconst7*gconst8*r21))+(((0.002312)*gconst5*r21))+(((-0.08)*gconst10*gconst5*npy*r20))+(((-0.01)*gconst3*gconst6*gconst8*r21))+(((-4.0)*gconst3*gconst6*(rxp0_2*rxp0_2)))+(((-16.0)*gconst2*gconst7*(rxp1_2*rxp1_2)))+(((5.44)*gconst1*npx*r20*rxp1_2))+(((-16.0)*gconst1*gconst10*(rxp1_2*rxp1_2)))+(((-1.36)*gconst0*gconst5*rxp0_2))+(((-0.01)*gconst0*gconst11*gconst8*r21))+(((0.0272)*gconst7*r21*rxp0_2))+(((1.36)*gconst3*gconst8*rxp0_2))+(((-5.44)*gconst8*npy*rxp1_2))+(((-0.9248)*npx*npy*r20*r21))+((gconst0*gconst11*gconst8*rxp2_2))+((gconst0*gconst3*gconst5*gconst8))+(((-68.0)*gconst1*gconst8*npx*rxp0_2))+(((0.68)*gconst3*gconst4*rxp0_2))+(((0.0008)*gconst1*gconst10*(r20*r20)))+(((-0.002312)*gconst8*r21))+(((-1.0)*gconst1*gconst11*gconst4*rxp2_2))+(((-4.0)*gconst2*gconst6*(rxp0_2*rxp0_2)))+(((0.01)*gconst0*gconst10*gconst5*r21))+(((-0.0001)*gconst11*gconst7*(r21*r21)))+(((32.0)*gconst7*npy*rxp0_2*rxp1_2))+((gconst2*gconst7*gconst9*rxp2_2))+(((-68.0)*gconst0*gconst8*npx*rxp0_2))+(((-0.002312)*gconst4*r21))+(((-4.0)*gconst0*gconst11*(rxp0_2*rxp0_2)))+(((-1.0)*gconst1*gconst3*gconst4*gconst8))+(((0.68)*gconst0*gconst8*rxp0_2))+(((0.01)*gconst2*gconst7*gconst9*r21))+(((-46.24)*gconst5*npx*npy*r20))+(((-136.0)*gconst10*npx*rxp0_2*rxp2_2))+(((-4.0)*gconst1*gconst10*(rxp0_2*rxp0_2)))+(((-68.0)*gconst2*gconst5*npx*rxp0_2))+(((-2312.0)*gconst5*rxp2_2*(npx*npx)))+(((-1088.0)*gconst8*rxp0_2*(npy*npy)))+(((0.0544)*gconst1*r20*rxp1_2))+(((0.2312)*gconst4*npx*r21))+(((0.01)*gconst2*gconst6*gconst9*r21))+(((-272.0)*gconst1*gconst8*npy*rxp1_2))+((gconst3*gconst6*gconst8*rxp2_2))+(((-68.0)*gconst0*gconst9*npx*rxp0_2))+(((-36992.0)*npx*npy*rxp0_2*rxp1_2))+(((0.08)*gconst2*npy*r20*rxp2_2))+(((-0.01)*gconst1*gconst10*gconst4*r21))+(((-4.0)*gconst2*gconst7*(rxp0_2*rxp0_2)))+(((18624.0)*(npy*npy)*(rxp0_2*rxp0_2)))+(((-1.36)*gconst6*rxp0_2*rxp2_2))+((gconst10*gconst7*(rxp2_2*rxp2_2)))+(((0.68)*gconst2*gconst4*rxp0_2))+(((-16.0)*(npy*npy)*(rxp2_2*rxp2_2)))+(((-0.9248)*(npx*npx)*(r20*r20)))+(((-23.12)*gconst9*npx*rxp2_2))+(((0.01)*gconst0*gconst11*gconst5*r21))+(((-0.0001)*gconst10*gconst6*(r21*r21)))+(((46.24)*gconst8*npx*npy*r20))+(((0.9248)*npy*r20*rxp2_2))+(((-0.08)*gconst7*gconst8*npy*r20))+(((-272.0)*gconst10*npy*rxp1_2*rxp2_2))+(((-0.0004)*gconst1*gconst2*(r20*r20)))+(((1.36)*gconst1*gconst4*rxp0_2))+(((-0.01)*gconst2*gconst4*gconst7*r21))+(((-136.0)*gconst11*npx*rxp0_2*rxp2_2))+(((-0.01)*gconst1*gconst11*gconst8*r21))+(((-5.44)*gconst7*npx*r20*rxp1_2))+(((-68.0)*gconst3*gconst5*npx*rxp0_2))+(((23.12)*gconst8*npx*rxp2_2))+(((-2.72)*gconst10*npy*r20*rxp0_2))+(((-1.8496)*(rxp0_2*rxp0_2)))+(((1.36)*gconst11*rxp0_2*rxp2_2))+(((-32.0)*gconst10*npy*rxp0_2*rxp1_2))+(((-0.01)*gconst1*gconst11*gconst4*r21))+(((0.0544)*gconst2*r20*rxp1_2))+(((-0.4624)*gconst5*npy*r20))+(((-10.88)*npy*rxp1_2*rxp2_2))+((gconst11*gconst6*(rxp2_2*rxp2_2)))+(((9.248e-5)*(r20*r20)))+(((-5.44)*gconst5*npy*rxp1_2))+(((-2.72)*gconst7*npy*r21*rxp1_2))+(((2.72)*gconst10*npy*r21*rxp1_2))+(((-1.36)*gconst10*rxp0_2*rxp2_2))+(((0.08)*gconst1*npy*r20*rxp2_2))+(((-0.01)*gconst3*gconst4*gconst7*r21))+(((-136.0)*gconst7*npx*rxp0_2*rxp2_2))+(((-0.0544)*gconst10*r20*rxp1_2))+(((-1.0)*gconst0*gconst10*gconst9*rxp2_2))+(((-68.0)*gconst2*gconst4*npx*rxp0_2))+(((-1.0)*gconst0*gconst10*gconst5*rxp2_2))+(((0.01)*gconst3*gconst5*gconst6*r21))+(((-21.76)*r21*rxp0_2*(npy*npy)))+(((-1.0)*gconst3*gconst7*gconst8*rxp2_2))+(((-1.0)*gconst2*gconst5*gconst6*rxp2_2))+(((0.0272)*gconst6*r21*rxp0_2))+(((-1.0)*gconst0*gconst2*gconst5*gconst9))+(((2.72)*gconst7*npy*r20*rxp0_2))+(((-1.0)*gconst1*gconst11*gconst8*rxp2_2))+(((-2312.0)*gconst8*rxp2_2*(npx*npx)))+(((-0.0544)*gconst7*r20*rxp1_2))+(((-272.0)*gconst7*npy*rxp1_2*rxp2_2))+(((-4.0)*gconst3*gconst7*(rxp0_2*rxp0_2)))+(((-0.68)*gconst2*gconst5*rxp0_2))+(((-4656.0)*gconst5*rxp2_2*(npy*npy)))+(((-68.0)*gconst1*gconst9*npx*rxp0_2))+((gconst3*gconst5*gconst6*rxp2_2))+(((-46.56)*gconst5*r21*(npy*npy)))+(((-0.68)*gconst3*gconst5*rxp0_2))+(((-0.68)*gconst0*gconst9*rxp0_2))+(((0.01)*gconst0*gconst10*gconst9*r21))+(((-0.02)*gconst11*gconst7*r21*rxp2_2))+((gconst1*gconst10*gconst9*rxp2_2))+(((-32.0)*gconst2*npy*rxp0_2*rxp1_2))+(((-0.4624)*gconst8*npy*r20))+(((-0.0001)*gconst11*gconst6*(r21*r21)))+(((0.0272)*gconst11*r21*rxp0_2))+(((-1.0)*gconst2*gconst6*gconst9*rxp2_2))+(((-1.0)*gconst11*gconst7*(rxp2_2*rxp2_2)))+(((1.36)*gconst7*rxp0_2*rxp2_2))+((gconst1*gconst10*gconst4*rxp2_2))+(((23.12)*gconst4*npx*rxp2_2))+(((-68.0)*gconst3*gconst4*npx*rxp0_2))+(((0.2312)*gconst5*npx*r21))+(((5.44)*gconst10*npx*r20*rxp1_2))+(((-4.0)*gconst1*gconst11*(rxp0_2*rxp0_2)))+(((-1.8496)*(rxp1_2*rxp1_2)))+(((0.01)*gconst2*gconst5*gconst6*r21))+(((-5.44)*gconst2*npx*r20*rxp1_2))+(((1088.0)*gconst5*rxp0_2*(npy*npy)))+(((-1.0)*gconst10*gconst6*(rxp2_2*rxp2_2)))+(((-272.0)*gconst2*gconst5*npy*rxp1_2))+(((-1.36)*gconst2*gconst9*rxp0_2))+(((0.02)*gconst10*gconst6*r21*rxp2_2))+(((-544.0)*gconst5*npx*npy*rxp1_2))+(((-136.0)*gconst6*npx*rxp0_2*rxp2_2))+(((-23.12)*gconst5*npx*rxp2_2))+(((0.0272)*gconst10*r21*rxp0_2))+(((-2.72)*gconst1*npy*r20*rxp0_2))+(((46.56)*gconst8*r21*(npy*npy)))+(((0.0008)*gconst2*gconst7*(r20*r20)))+(((-2312.0)*gconst4*rxp2_2*(npx*npx)))+(((544.0)*gconst8*npx*npy*rxp1_2))+(((-1.0)*gconst3*gconst4*gconst7*rxp2_2))+(((0.2312)*gconst8*npx*r21))+(((-0.0008)*gconst2*npy*r20*r21))+(((-0.68)*gconst1*gconst9*rxp0_2))+(((0.2312)*gconst9*npx*r21)));
op[5]=((((-2.72)*gconst5*npx*npy*r20))+(((2.72)*gconst8*npx*npy*r20))+(((-2.72)*gconst3*(rxp0_2*rxp0_2)))+(((34.0)*gconst3*gconst5*npx*rxp2_2))+(((0.34)*gconst1*gconst8*npx*r21))+(((4.0)*gconst1*gconst11*rxp0_2*rxp2_2))+(((0.0034)*gconst3*gconst5*r21))+(((-184.96)*npx*npy*r20*rxp0_2))+(((-16.0)*gconst2*gconst5*npy*rxp1_2))+(((0.34)*gconst1*gconst9*npx*r21))+(((2.0)*gconst1*gconst2*gconst4*rxp0_2))+(((184.96)*r20*rxp1_2*(npx*npx)))+(((-0.0272)*gconst2*npx*(r20*r20)))+(((-0.34)*gconst1*gconst8*rxp2_2))+(((-0.0068)*gconst11*r21*rxp2_2))+(((2176.0)*(npy*npy)*(rxp0_2*rxp0_2)))+(((-544.0)*gconst1*npx*(rxp1_2*rxp1_2)))+(((32.0)*gconst5*rxp0_2*(npy*npy)))+(((-6.8e-5)*gconst10*(r21*r21)))+(((-0.0136)*gconst2*npy*r20*r21))+(((184.96)*npx*npy*r21*rxp1_2))+(((-0.000136)*gconst10*(r20*r20)))+(((34.0)*gconst1*gconst9*npx*rxp2_2))+(((0.0136)*gconst10*npy*r20*r21))+(((-34.0)*gconst2*gconst4*npx*rxp2_2))+(((0.000272)*gconst2*(r20*r20)))+(((-544.0)*gconst2*npy*rxp0_2*rxp1_2))+(((0.34)*gconst3*gconst4*npx*r21))+(((0.0034)*gconst1*gconst9*r21))+(((0.34)*gconst0*gconst9*npx*r21))+(((-4.0)*gconst0*gconst10*rxp0_2*rxp2_2))+(((0.018496)*r21*rxp0_2))+(((0.0068)*gconst0*gconst5*r21))+(((0.0068)*gconst6*r21*rxp2_2))+(((0.34)*gconst2*gconst5*npx*r21))+(((1.36)*gconst1*npy*r20*rxp2_2))+(((-2176.0)*npx*npy*rxp0_2*rxp1_2))+(((0.34)*gconst2*gconst4*npx*r21))+(((0.34)*gconst2*gconst4*rxp2_2))+(((0.34)*gconst0*gconst8*rxp2_2))+(((-1.36)*gconst2*gconst5*npy*r20))+(((-1.36)*gconst1*gconst8*npy*r20))+(((68.0)*gconst7*npx*(rxp2_2*rxp2_2)))+(((2.0)*gconst1*gconst3*gconst4*rxp0_2))+(((-0.16)*gconst1*npy*r21*rxp1_2))+(((-544.0)*gconst8*rxp2_2*(npy*npy)))+(((0.68)*gconst11*npx*r21*rxp2_2))+(((0.16)*gconst2*npy*r21*rxp1_2))+(((0.04)*gconst3*gconst7*r21*rxp0_2))+(((0.34)*gconst3*gconst5*npx*r21))+(((-2.72)*gconst2*(rxp0_2*rxp0_2)))+(((-16.0)*gconst7*npy*rxp1_2*rxp2_2))+(((0.0034)*gconst2*gconst5*r21))+(((2.0)*gconst0*gconst3*gconst8*rxp0_2))+(((-32.0)*gconst8*rxp0_2*(npy*npy)))+(((-6.8e-5)*gconst7*(r21*r21)))+(((-0.0034)*gconst2*gconst4*r21))+(((-0.0034)*gconst0*gconst8*r21))+(((-186.24)*r21*rxp0_2*(npy*npy)))+(((0.04)*gconst2*gconst7*r21*rxp0_2))+(((34.0)*gconst3*gconst4*npx*rxp2_2))+(((-2.0)*gconst0*gconst2*gconst9*rxp0_2))+(((-68.0)*gconst10*npx*(rxp2_2*rxp2_2)))+(((-0.34)*gconst2*gconst5*rxp2_2))+(((-0.16)*gconst10*npy*r20*rxp0_2))+(((0.68)*gconst10*npx*r21*rxp2_2))+(((0.000272)*gconst1*(r20*r20)))+(((-2.72)*gconst0*(rxp0_2*rxp0_2)))+(((0.16)*gconst7*npy*r20*rxp0_2))+(((-184.96)*npx*rxp0_2*rxp2_2))+(((-34.0)*gconst0*gconst9*npx*rxp2_2))+(((0.0034)*gconst0*gconst9*r21))+(((0.0136)*gconst1*npy*r20*r21))+(((0.16)*gconst10*npy*r21*rxp1_2))+(((-2.0)*gconst0*gconst2*gconst5*rxp0_2))+(((-0.0034)*gconst1*gconst8*r21))+(((544.0)*gconst1*npy*rxp0_2*rxp1_2))+(((68.0)*gconst11*npx*(rxp2_2*rxp2_2)))+(((0.0068)*gconst10*r21*rxp2_2))+(((544.0)*gconst2*npx*(rxp1_2*rxp1_2)))+(((-0.0068)*gconst1*gconst4*r21))+(((-68.0)*gconst2*gconst9*npx*rxp2_2))+(((0.34)*gconst3*gconst5*rxp2_2))+(((-68.0)*gconst6*npx*(rxp2_2*rxp2_2)))+(((68.0)*gconst3*gconst8*npx*rxp2_2))+(((0.04)*gconst0*gconst10*r21*rxp0_2))+(((0.0068)*gconst2*gconst9*r21))+(((-0.0272)*gconst8*npy*r20))+(((-0.018496)*r20*rxp1_2))+(((1.36)*gconst2*npy*r20*rxp2_2))+(((-0.16)*gconst2*gconst7*r20*rxp1_2))+(((-544.0)*(npy*npy)*(rxp2_2*rxp2_2)))+(((0.04)*gconst3*gconst6*r21*rxp0_2))+(((-16.0)*gconst1*gconst8*npy*rxp1_2))+(((-0.0068)*gconst3*gconst8*r21))+(((-544.0)*gconst5*rxp2_2*(npy*npy)))+(((-4.0)*gconst2*gconst6*rxp0_2*rxp2_2))+(((0.0544)*(npy*npy)*(r21*r21)))+(((-0.16)*gconst1*gconst10*r20*rxp1_2))+(((-0.000136)*gconst7*(r20*r20)))+(((-184.96)*npy*rxp1_2*rxp2_2))+(((-5.44)*gconst5*r21*(npy*npy)))+(((-0.0136)*gconst7*npy*r20*r21))+(((-5.44)*gconst1*(rxp1_2*rxp1_2)))+(((5.44)*gconst8*r21*(npy*npy)))+(((-1.36)*gconst7*npy*r20*rxp2_2))+(((-68.0)*gconst0*gconst5*npx*rxp2_2))+(((0.16)*gconst1*gconst2*r20*rxp1_2))+(((-16.0)*gconst1*npy*rxp1_2*rxp2_2))+(((4.0)*gconst3*gconst7*rxp0_2*rxp2_2))+(((0.04)*gconst2*gconst6*r21*rxp0_2))+(((-2.72)*gconst1*(rxp0_2*rxp0_2)))+(((-2.0)*gconst0*gconst3*gconst5*rxp0_2))+(((0.68)*gconst6*npx*r21*rxp2_2))+(((-34.0)*gconst0*gconst8*npx*rxp2_2))+(((-6.8e-5)*gconst6*(r21*r21)))+(((-34.0)*gconst2*gconst5*npx*rxp2_2))+(((-16.0)*gconst2*npy*rxp1_2*rxp2_2))+(((34.0)*gconst1*gconst8*npx*rxp2_2))+(((0.0136)*gconst10*npx*(r20*r20)))+(((-1.36)*gconst10*npy*r20*rxp2_2))+(((-0.0272)*gconst5*npy*r20))+(((-0.0034)*gconst3*gconst4*r21))+(((-6.8e-5)*gconst11*(r21*r21)))+(((2.0)*gconst1*gconst3*gconst8*rxp0_2))+(((0.04)*gconst1*gconst11*r21*rxp0_2))+(((0.0272)*gconst1*npx*(r20*r20)))+(((-0.34)*gconst3*gconst4*rxp2_2))+(((-0.0136)*gconst7*npx*(r20*r20)))+(((0.34)*gconst1*gconst9*rxp2_2))+(((68.0)*gconst1*gconst4*npx*rxp2_2))+(((0.68)*gconst7*npx*r21*rxp2_2))+(((0.04)*gconst0*gconst11*r21*rxp0_2))+(((-5.44)*gconst2*(rxp1_2*rxp1_2)))+(((-0.16)*gconst7*npy*r21*rxp1_2))+(((-0.0068)*gconst7*r21*rxp2_2))+(((-0.34)*gconst0*gconst9*rxp2_2))+(((0.34)*gconst0*gconst8*npx*r21))+(((0.04)*gconst1*gconst10*r21*rxp0_2))+(((-2.0)*gconst1*gconst2*gconst9*rxp0_2))+(((-16.0)*gconst10*npy*rxp1_2*rxp2_2)));
op[6]=((((-0.0001)*gconst3*gconst7*(r21*r21)))+(((-16.0)*gconst5*rxp2_2*(npy*npy)))+(((-1.0)*gconst3*gconst7*(rxp2_2*rxp2_2)))+(((-0.02)*gconst1*gconst11*r21*rxp2_2))+(((-0.08)*gconst7*npy*r20*rxp2_2))+(((-16.0)*gconst8*rxp2_2*(npy*npy)))+(((-0.0001)*gconst0*gconst11*(r21*r21)))+(((2.72)*gconst1*npy*r20*rxp0_2))+(((32.0)*gconst1*npy*rxp0_2*rxp1_2))+(((0.02)*gconst2*gconst6*r21*rxp2_2))+(((10.88)*npx*npy*r21*rxp1_2))+(((-136.0)*gconst2*npx*rxp0_2*rxp2_2))+(((-0.9248)*npy*r20*rxp2_2))+(((-1.0)*gconst0*gconst10*(rxp2_2*rxp2_2)))+(((-0.01)*gconst1*gconst3*gconst8*r21))+(((-1.0)*gconst1*gconst11*(rxp2_2*rxp2_2)))+(((2.72)*gconst2*npy*r21*rxp1_2))+(((-0.01)*gconst0*gconst3*gconst8*r21))+(((-4.0)*gconst1*gconst2*(rxp0_2*rxp0_2)))+(((0.4656)*(npy*npy)*(r21*r21)))+(((-0.08)*gconst2*gconst5*npy*r20))+(((0.0272)*gconst1*r21*rxp0_2))+(((-0.0001)*gconst1*gconst11*(r21*r21)))+(((-136.0)*gconst3*npx*rxp0_2*rxp2_2))+((gconst0*gconst11*(rxp2_2*rxp2_2)))+((gconst1*gconst2*gconst9*rxp2_2))+((gconst1*gconst2*gconst4*rxp2_2))+(((-0.16)*gconst5*r21*(npy*npy)))+((gconst1*gconst10*(rxp2_2*rxp2_2)))+(((0.0272)*gconst0*r21*rxp0_2))+(((-0.0001)*gconst1*gconst10*(r21*r21)))+(((0.4624)*(npx*npx)*(r20*r20)))+(((1.36)*gconst1*rxp0_2*rxp2_2))+((gconst0*gconst3*gconst5*rxp2_2))+(((-4.0)*gconst0*gconst2*(rxp0_2*rxp0_2)))+(((-272.0)*gconst2*npy*rxp1_2*rxp2_2))+(((-2.72)*gconst2*npy*r20*rxp0_2))+(((-0.0001)*gconst0*gconst10*(r21*r21)))+(((-0.0544)*gconst1*r20*rxp1_2))+(((0.9248)*npx*npy*r20*r21))+(((0.02)*gconst0*gconst10*r21*rxp2_2))+((gconst0*gconst3*gconst8*rxp2_2))+(((-136.0)*gconst0*npx*rxp0_2*rxp2_2))+(((0.0008)*gconst10*npy*r20*r21))+(((-0.0004)*gconst1*gconst10*(r20*r20)))+(((-0.0001)*gconst2*gconst6*(r21*r21)))+(((-4656.0)*(npy*npy)*(rxp2_2*rxp2_2)))+(((-16.0)*gconst1*gconst2*(rxp1_2*rxp1_2)))+(((-0.0004)*gconst2*gconst7*(r20*r20)))+(((-5.44)*gconst1*npx*r20*rxp1_2))+(((-1.0)*gconst0*gconst2*gconst5*rxp2_2))+(((64.0)*(npy*npy)*(rxp0_2*rxp0_2)))+(((-1.0)*gconst1*gconst3*gconst8*rxp2_2))+(((-0.0001)*gconst3*gconst6*(r21*r21)))+(((0.01)*gconst0*gconst2*gconst5*r21))+(((-10.88)*npy*rxp1_2*rxp2_2))+(((-0.01)*gconst1*gconst3*gconst4*r21))+(((-4.624e-5)*(r20*r20)))+(((-0.02)*gconst3*gconst7*r21*rxp2_2))+(((-4.0)*gconst0*gconst3*(rxp0_2*rxp0_2)))+(((0.16)*gconst8*r21*(npy*npy)))+(((-272.0)*gconst1*npy*rxp1_2*rxp2_2))+(((0.0272)*gconst2*r21*rxp0_2))+((gconst2*gconst7*(rxp2_2*rxp2_2)))+(((-21.76)*r21*rxp0_2*(npy*npy)))+(((-136.0)*gconst1*npx*rxp0_2*rxp2_2))+(((-0.0544)*gconst2*r20*rxp1_2))+(((-1.36)*gconst0*rxp0_2*rxp2_2))+(((0.01)*gconst0*gconst3*gconst5*r21))+(((0.0008)*gconst1*gconst2*(r20*r20)))+(((-0.0001)*gconst2*gconst7*(r21*r21)))+(((-1.0)*gconst0*gconst2*gconst9*rxp2_2))+(((-1.0)*gconst1*gconst3*gconst4*rxp2_2))+(((-4.624e-5)*(r21*r21)))+(((-0.08)*gconst10*npy*r20*rxp2_2))+(((-0.01)*gconst1*gconst2*gconst4*r21))+(((0.0272)*gconst3*r21*rxp0_2))+(((-0.0008)*gconst7*npy*r20*r21))+(((-4624.0)*(npx*npx)*(rxp2_2*rxp2_2)))+(((1.36)*gconst3*rxp0_2*rxp2_2))+((gconst3*gconst6*(rxp2_2*rxp2_2)))+(((-2.72)*gconst1*npy*r21*rxp1_2))+(((-1.36)*gconst2*rxp0_2*rxp2_2))+(((-10.88)*npx*npy*r20*rxp0_2))+(((-32.0)*gconst2*npy*rxp0_2*rxp1_2))+(((-1.0)*gconst2*gconst6*(rxp2_2*rxp2_2)))+(((5.44)*gconst2*npx*r20*rxp1_2))+(((-4.0)*gconst1*gconst3*(rxp0_2*rxp0_2)))+(((0.01)*gconst1*gconst2*gconst9*r21))+(((0.01)*gconst0*gconst2*gconst9*r21))+(((-0.08)*gconst1*gconst8*npy*r20))+(((0.9248)*npx*r21*rxp2_2)));
op[7]=((((0.0136)*x75*x77))+((x77*x80))+((x112*x76))+((x112*x74))+(((-0.0544)*rxp2_2*x75))+(((-1.0)*x113*x78))+(((-1.0)*x115*x97))+(((-1.0)*x115*x93))+(((-1.0)*gconst3*x121))+(((-6.8e-5)*x114))+(((-6.8e-5)*x117))+(((-1.0)*gconst2*x111))+((npy*x77*x95))+(((-1.0)*x119*x81))+(((0.0544)*x124))+(((68.0)*x72*x78))+(((-4.0)*x76*x93))+(((-544.0)*x127))+(((0.04)*x76*x77))+(((-1.0)*x105*x80))+(((0.0544)*npx*r21*x75))+(((-1.0)*gconst2*x75*x98))+(((-1.0)*gconst1*x111))+(((-1.36)*x75*x93))+(((-1.36)*x75*x97))+(((0.04)*x74*x77))+(((-1.0)*x79*x80))+(((-1.0)*r20*x106*x95))+(((-0.0136)*x75*x79))+((x118*x77))+(((-1.0)*x110*x81))+(((0.68)*r21*rxp2_2*x78))+((x118*x89))+((x80*x89))+(((0.16)*x74*x75))+(((-1.0)*npy*x79*x95))+(((-0.64)*r21*rxp0_2*x70))+((x105*x118))+(((4.0)*gconst3*rxp2_2*x74))+((gconst2*npx*x113))+((x120*x81))+(((-1.0)*gconst2*x121)));
op[8]=((((-16.0)*x127))+(((-1.0)*gconst1*x120))+(((-1.0)*gconst2*x110))+((x106*x72))+(((-1.0)*x106*x123))+((gconst0*x77*x82))+(((-1.0)*gconst2*x75*x91))+(((-1.0)*gconst3*x79*x82))+(((-1.0)*gconst1*x75*x91))+(((-1.0)*x117*x86))+(((0.0016)*x124))+(((-0.0008)*x75*x79))+(((-1.0)*x102*x117))+(((-1.0)*x102*x114))+(((0.0008)*x75*x77))+((gconst3*x110))+(((-1.0)*x114*x86)));
polyroots8(op,zeror,numroots);
IkReal j4array[8], cj4array[8], sj4array[8], tempj4array[1];
int numsolutions = 0;
for(int ij4 = 0; ij4 < numroots; ++ij4)
{
IkReal htj4 = zeror[ij4];
tempj4array[0]=((2.0)*(atan(htj4)));
for(int kj4 = 0; kj4 < 1; ++kj4)
{
j4array[numsolutions] = tempj4array[kj4];
if( j4array[numsolutions] > IKPI )
{
    j4array[numsolutions]-=IK2PI;
}
else if( j4array[numsolutions] < -IKPI )
{
    j4array[numsolutions]+=IK2PI;
}
sj4array[numsolutions] = IKsin(j4array[numsolutions]);
cj4array[numsolutions] = IKcos(j4array[numsolutions]);
numsolutions++;
}
}
bool j4valid[8]={true,true,true,true,true,true,true,true};
_nj4 = 8;
for(int ij4 = 0; ij4 < numsolutions; ++ij4)
    {
if( !j4valid[ij4] )
{
    continue;
}
    j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
htj4 = IKtan(j4/2);

_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < numsolutions; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
{
IkReal j5eval[2];
IkReal x128=cj4*cj4;
IkReal x129=((2.0)*sj4);
IkReal x130=(npy*rxp0_2);
IkReal x131=(cj4*pz);
IkReal x132=((8.5)*sj4);
IkReal x133=(npx*rxp1_2);
IkReal x134=((100.0)*sj4);
IkReal x135=((0.17)*sj4);
IkReal x136=(cj4*npz*r22);
IkReal x137=((17.0)*x128);
IkReal x138=((850.0)*x128);
j5eval[0]=((((-1.0)*x133*x134))+x136+((x130*x134))+((x133*x138))+(((850.0)*x130))+(((-1.0)*x131))+((x132*x136))+(((-1.0)*x131*x132))+(((-850.0)*x133))+(((-1.0)*x130*x138)));
j5eval[1]=IKsign(((((-17.0)*x133))+((x129*x130))+((x135*x136))+(((0.02)*x136))+((x133*x137))+(((17.0)*x130))+(((-1.0)*x129*x133))+(((-1.0)*x131*x135))+(((-0.02)*x131))+(((-1.0)*x130*x137))));
if( IKabs(j5eval[0]) < 0.0000010000000000  || IKabs(j5eval[1]) < 0.0000010000000000  )
{
continue; // no branches [j5]

} else
{
{
IkReal j5array[1], cj5array[1], sj5array[1];
bool j5valid[1]={false};
_nj5 = 1;
IkReal x139=cj4*cj4;
IkReal x140=((2.0)*sj4);
IkReal x141=((17.0)*sj4);
IkReal x142=((0.0017)*cj4);
IkReal x143=((0.17)*rxp1_2);
IkReal x144=((0.17)*sj4);
IkReal x145=(cj4*npz);
IkReal x146=(cj4*pp);
IkReal x147=((17.0)*x139);
IkReal x148=(cj4*npy*rxp2_2);
IkReal x149=((0.17)*x139);
IkReal x150=(cj4*npx*rxp2_2);
IkReal x151=((100.0)*pp*sj4);
IkReal x152=((((0.02)*cj4))+((cj4*x144)));
CheckValue<IkReal> x153=IKPowWithIntegerCheck(IKsign(((((-1.0)*pz*x152))+((npx*rxp1_2*(((-17.0)+(((-1.0)*x140))+x147))))+((npy*rxp0_2*(((17.0)+(((-1.0)*x147))+x140))))+((npz*r22*x152)))),-1);
if(!x153.valid){
continue;
}
CheckValue<IkReal> x154 = IKatan2WithCheck(IkReal((((rxp0_2*x151))+((npz*r21*x149))+(((-1.0)*rxp0_2*x141*x145))+((x141*x150))+((r21*x142))+(((-1.0)*r21*x146))+(((2.0)*x150))+(((-1.0)*r21*sj4*x142))+(((0.17)*rxp0_2))+(((-1.0)*rxp0_2*x149))+(((-1.0)*rxp0_2*x144)))),IkReal((((r20*x146))+((r20*sj4*x142))+((rxp1_2*x151))+(((-1.0)*x139*x143))+x143+(((-1.0)*sj4*x143))+((x141*x148))+(((-1.0)*rxp1_2*x141*x145))+(((-1.0)*npz*r20*x149))+(((2.0)*x148))+(((-1.0)*r20*x142)))),IKFAST_ATAN2_MAGTHRESH);
if(!x154.valid){
continue;
}
j5array[0]=((-1.5707963267949)+(((1.5707963267949)*(x153.value)))+(x154.value));
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
for(int ij5 = 0; ij5 < 1; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 1; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[2];
IkReal x155=IKsin(j5);
IkReal x156=IKcos(j5);
IkReal x157=((0.01)*cj4);
IkReal x158=((17.0)*sj4);
IkReal x159=(npy*x155);
IkReal x160=(npx*x156);
evalcond[0]=((((-1.0)*rxp0_2*sj4*x156))+((r21*x156*x157))+((cj4*rxp2_2))+((r20*x155*x157))+((rxp1_2*sj4*x155)));
evalcond[1]=((-0.17)+(((100.0)*pp))+(((0.17)*sj4))+(((-1.0)*x158*x159))+(((2.0)*x160))+(((-2.0)*x159))+(((-17.0)*cj4*npz))+((x158*x160)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j3eval[1];
j3eval[0]=((((-1.0)*cj5*r21))+(((-1.0)*r20*sj5)));
if( IKabs(j3eval[0]) < 0.0000010000000000  )
{
{
IkReal j3eval[1];
j3eval[0]=((((-1.0)*cj5*npy))+(((-1.0)*npx*sj5)));
if( IKabs(j3eval[0]) < 0.0000010000000000  )
{
{
IkReal j3eval[1];
IkReal x161=((1.0)*sj4);
IkReal x162=((100.0)*cj4);
j3eval[0]=((((-1.0)*r20*sj5*x161))+((rxp1_2*sj5*x162))+(((-1.0)*cj5*rxp0_2*x162))+(((-1.0)*cj5*r21*x161))+(((-100.0)*rxp2_2*sj4)));
if( IKabs(j3eval[0]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(r21))+(IKabs(r20)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j3eval[1];
IkReal x163=((-1.0)*pz);
r20=0;
r21=0;
r02=0;
r12=0;
npx=(((px*r00))+((py*r10)));
npy=(((px*r01))+((py*r11)));
npz=(pz*r22);
rxp0_0=(pz*r10);
rxp0_1=(r00*x163);
rxp1_0=(pz*r11);
rxp1_1=(r01*x163);
rxp2_0=((-1.0)*py*r22);
rxp2_1=(px*r22);
rxp2_2=0;
j3eval[0]=((((-1.0)*cj4*cj5*rxp0_2))+((cj4*rxp1_2*sj5)));
if( IKabs(j3eval[0]) < 0.0000010000000000  )
{
{
IkReal j3eval[1];
IkReal x164=((-1.0)*pz);
r20=0;
r21=0;
r02=0;
r12=0;
npx=(((px*r00))+((py*r10)));
npy=(((px*r01))+((py*r11)));
npz=(pz*r22);
rxp0_0=(pz*r10);
rxp0_1=(r00*x164);
rxp1_0=(pz*r11);
rxp1_1=(r01*x164);
rxp2_0=((-1.0)*py*r22);
rxp2_1=(px*r22);
rxp2_2=0;
IkReal x165=((1.0)*cj5);
IkReal x166=((1.0)*sj5);
j3eval[0]=((((-1.0)*py*r10*x166))+(((-1.0)*py*r11*x165))+(((-1.0)*px*r01*x165))+(((-1.0)*px*r00*x166)));
if( IKabs(j3eval[0]) < 0.0000010000000000  )
{
{
IkReal j3eval[1];
IkReal x167=((-1.0)*pz);
r20=0;
r21=0;
r02=0;
r12=0;
npx=(((px*r00))+((py*r10)));
npy=(((px*r01))+((py*r11)));
npz=(pz*r22);
rxp0_0=(pz*r10);
rxp0_1=(r00*x167);
rxp1_0=(pz*r11);
rxp1_1=(r01*x167);
rxp2_0=((-1.0)*py*r22);
rxp2_1=(px*r22);
rxp2_2=0;
IkReal x168=(cj5*pz);
IkReal x169=(pz*sj5);
j3eval[0]=(((py*r11*x168))+((px*r01*x168))+((px*r00*x169))+((py*r10*x169)));
if( IKabs(j3eval[0]) < 0.0000010000000000  )
{
continue; // 1 cases reached

} else
{
{
IkReal j3array[2], cj3array[2], sj3array[2];
bool j3valid[2]={false};
_nj3 = 2;
CheckValue<IkReal> x170=IKPowWithIntegerCheck(((((2.0)*py*pz*r10*sj5))+(((2.0)*cj5*py*pz*r11))+(((2.0)*cj5*px*pz*r01))+(((2.0)*px*pz*r00*sj5))),-1);
if(!x170.valid){
continue;
}
CheckValue<IkReal> x171=IKPowWithIntegerCheck(((((2.0)*py*pz*r10*sj5))+(((2.0)*cj5*py*pz*r11))+(((2.0)*cj5*px*pz*r01))+(((2.0)*px*pz*r00*sj5))),-1);
if(!x171.valid){
continue;
}
CheckValue<IkReal> x172=IKPowWithIntegerCheck(((((2.0)*py*pz*r10*sj5))+(((2.0)*cj5*py*pz*r11))+(((2.0)*cj5*px*pz*r01))+(((2.0)*px*pz*r00*sj5))),-1);
if(!x172.valid){
continue;
}
CheckValue<IkReal> x173=IKPowWithIntegerCheck(((((2.0)*py*pz*r10*sj5))+(((2.0)*cj5*py*pz*r11))+(((2.0)*cj5*px*pz*r01))+(((2.0)*px*pz*r00*sj5))),-1);
if(!x173.valid){
continue;
}
CheckValue<IkReal> x174=IKPowWithIntegerCheck(((((2.0)*py*pz*r10*sj5))+(((2.0)*cj5*py*pz*r11))+(((2.0)*cj5*px*pz*r01))+(((2.0)*px*pz*r00*sj5))),-1);
if(!x174.valid){
continue;
}
CheckValue<IkReal> x175=IKPowWithIntegerCheck(((((2.0)*py*pz*r10*sj5))+(((2.0)*cj5*py*pz*r11))+(((2.0)*cj5*px*pz*r01))+(((2.0)*px*pz*r00*sj5))),-1);
if(!x175.valid){
continue;
}
if((((((-32.0)*cj5*px*py*r00*r11*sj5*(cj4*cj4)*(pz*pz)))+(((-0.32)*px*r01*sj5*(cj4*cj4)*(pz*pz)))+(((32.0)*cj5*px*py*r01*r10*sj5*(pz*pz)))+(((32.0)*cj5*r10*r11*sj5*(py*py)*(pz*pz)))+(((0.0016)*(cj4*cj4)*(pz*pz)))+(((-0.32)*py*r11*sj5*(cj4*cj4)*(pz*pz)))+(((-32.0)*cj5*r00*r01*sj5*(cj4*cj4)*(px*px)*(pz*pz)))+(((-32.0)*cj5*r10*r11*sj5*(cj4*cj4)*(py*py)*(pz*pz)))+(((16.0)*(px*px)*(pz*pz)*(r00*r00)))+(((-16.0)*(cj5*cj5)*(px*px)*(pz*pz)*(r00*r00)))+(((-32.0)*cj5*px*py*r01*r10*sj5*(cj4*cj4)*(pz*pz)))+(((32.0)*px*py*r01*r11*(cj5*cj5)*(pz*pz)))+(((16.0)*(cj5*cj5)*(py*py)*(pz*pz)*(r11*r11)))+(((-16.0)*(cj4*cj4)*(cj5*cj5)*(px*px)*(pz*pz)*(r01*r01)))+(((-32.0)*px*py*r01*r11*(cj4*cj4)*(cj5*cj5)*(pz*pz)))+(((16.0)*(cj4*cj4)*(cj5*cj5)*(px*px)*(pz*pz)*(r00*r00)))+(((32.0)*px*py*r00*r10*(cj4*cj4)*(cj5*cj5)*(pz*pz)))+(((32.0)*cj5*r00*r01*sj5*(px*px)*(pz*pz)))+(((0.32)*cj5*px*r00*(cj4*cj4)*(pz*pz)))+(((-16.0)*(cj4*cj4)*(cj5*cj5)*(py*py)*(pz*pz)*(r11*r11)))+(((16.0)*(cj4*cj4)*(py*py)*(pz*pz)*(r11*r11)))+(((32.0)*px*py*r00*r10*(pz*pz)))+(((32.0)*px*py*r01*r11*(cj4*cj4)*(pz*pz)))+(((-32.0)*px*py*r00*r10*(cj5*cj5)*(pz*pz)))+(((16.0)*(cj5*cj5)*(px*px)*(pz*pz)*(r01*r01)))+(((16.0)*(cj4*cj4)*(px*px)*(pz*pz)*(r01*r01)))+(((32.0)*cj5*px*py*r00*r11*sj5*(pz*pz)))+(((-16.0)*(cj5*cj5)*(py*py)*(pz*pz)*(r10*r10)))+(((16.0)*(cj4*cj4)*(cj5*cj5)*(py*py)*(pz*pz)*(r10*r10)))+(((0.32)*cj5*py*r10*(cj4*cj4)*(pz*pz)))+(((16.0)*(py*py)*(pz*pz)*(r10*r10))))) < -0.00001)
continue;
j3array[0]=((2.0)*(atan(((((2.0)*cj4*cj5*py*pz*r10*(x170.value)))+(((0.02)*cj4*pz*(x171.value)))+(((-2.0)*cj4*px*pz*r01*sj5*(x172.value)))+(((2.0)*cj4*cj5*px*pz*r00*(x173.value)))+(((-2.0)*cj4*py*pz*r11*sj5*(x174.value)))+(((0.5)*(x175.value)*(IKsqrt(((((-32.0)*cj5*px*py*r00*r11*sj5*(cj4*cj4)*(pz*pz)))+(((-0.32)*px*r01*sj5*(cj4*cj4)*(pz*pz)))+(((32.0)*cj5*px*py*r01*r10*sj5*(pz*pz)))+(((32.0)*cj5*r10*r11*sj5*(py*py)*(pz*pz)))+(((0.0016)*(cj4*cj4)*(pz*pz)))+(((-0.32)*py*r11*sj5*(cj4*cj4)*(pz*pz)))+(((-32.0)*cj5*r00*r01*sj5*(cj4*cj4)*(px*px)*(pz*pz)))+(((-32.0)*cj5*r10*r11*sj5*(cj4*cj4)*(py*py)*(pz*pz)))+(((16.0)*(px*px)*(pz*pz)*(r00*r00)))+(((-16.0)*(cj5*cj5)*(px*px)*(pz*pz)*(r00*r00)))+(((-32.0)*cj5*px*py*r01*r10*sj5*(cj4*cj4)*(pz*pz)))+(((32.0)*px*py*r01*r11*(cj5*cj5)*(pz*pz)))+(((16.0)*(cj5*cj5)*(py*py)*(pz*pz)*(r11*r11)))+(((-16.0)*(cj4*cj4)*(cj5*cj5)*(px*px)*(pz*pz)*(r01*r01)))+(((-32.0)*px*py*r01*r11*(cj4*cj4)*(cj5*cj5)*(pz*pz)))+(((16.0)*(cj4*cj4)*(cj5*cj5)*(px*px)*(pz*pz)*(r00*r00)))+(((32.0)*px*py*r00*r10*(cj4*cj4)*(cj5*cj5)*(pz*pz)))+(((32.0)*cj5*r00*r01*sj5*(px*px)*(pz*pz)))+(((0.32)*cj5*px*r00*(cj4*cj4)*(pz*pz)))+(((-16.0)*(cj4*cj4)*(cj5*cj5)*(py*py)*(pz*pz)*(r11*r11)))+(((16.0)*(cj4*cj4)*(py*py)*(pz*pz)*(r11*r11)))+(((32.0)*px*py*r00*r10*(pz*pz)))+(((32.0)*px*py*r01*r11*(cj4*cj4)*(pz*pz)))+(((-32.0)*px*py*r00*r10*(cj5*cj5)*(pz*pz)))+(((16.0)*(cj5*cj5)*(px*px)*(pz*pz)*(r01*r01)))+(((16.0)*(cj4*cj4)*(px*px)*(pz*pz)*(r01*r01)))+(((32.0)*cj5*px*py*r00*r11*sj5*(pz*pz)))+(((-16.0)*(cj5*cj5)*(py*py)*(pz*pz)*(r10*r10)))+(((16.0)*(cj4*cj4)*(cj5*cj5)*(py*py)*(pz*pz)*(r10*r10)))+(((0.32)*cj5*py*r10*(cj4*cj4)*(pz*pz)))+(((16.0)*(py*py)*(pz*pz)*(r10*r10))))))))))));
sj3array[0]=IKsin(j3array[0]);
cj3array[0]=IKcos(j3array[0]);
CheckValue<IkReal> x176=IKPowWithIntegerCheck(((((2.0)*py*pz*r10*sj5))+(((2.0)*cj5*py*pz*r11))+(((2.0)*cj5*px*pz*r01))+(((2.0)*px*pz*r00*sj5))),-1);
if(!x176.valid){
continue;
}
CheckValue<IkReal> x177=IKPowWithIntegerCheck(((((2.0)*py*pz*r10*sj5))+(((2.0)*cj5*py*pz*r11))+(((2.0)*cj5*px*pz*r01))+(((2.0)*px*pz*r00*sj5))),-1);
if(!x177.valid){
continue;
}
CheckValue<IkReal> x178=IKPowWithIntegerCheck(((((2.0)*py*pz*r10*sj5))+(((2.0)*cj5*py*pz*r11))+(((2.0)*cj5*px*pz*r01))+(((2.0)*px*pz*r00*sj5))),-1);
if(!x178.valid){
continue;
}
CheckValue<IkReal> x179=IKPowWithIntegerCheck(((((2.0)*py*pz*r10*sj5))+(((2.0)*cj5*py*pz*r11))+(((2.0)*cj5*px*pz*r01))+(((2.0)*px*pz*r00*sj5))),-1);
if(!x179.valid){
continue;
}
if((((((-32.0)*cj5*px*py*r00*r11*sj5*(cj4*cj4)*(pz*pz)))+(((-0.32)*px*r01*sj5*(cj4*cj4)*(pz*pz)))+(((32.0)*cj5*px*py*r01*r10*sj5*(pz*pz)))+(((32.0)*cj5*r10*r11*sj5*(py*py)*(pz*pz)))+(((0.0016)*(cj4*cj4)*(pz*pz)))+(((-0.32)*py*r11*sj5*(cj4*cj4)*(pz*pz)))+(((-32.0)*cj5*r00*r01*sj5*(cj4*cj4)*(px*px)*(pz*pz)))+(((-32.0)*cj5*r10*r11*sj5*(cj4*cj4)*(py*py)*(pz*pz)))+(((16.0)*(px*px)*(pz*pz)*(r00*r00)))+(((-16.0)*(cj5*cj5)*(px*px)*(pz*pz)*(r00*r00)))+(((-32.0)*cj5*px*py*r01*r10*sj5*(cj4*cj4)*(pz*pz)))+(((32.0)*px*py*r01*r11*(cj5*cj5)*(pz*pz)))+(((16.0)*(cj5*cj5)*(py*py)*(pz*pz)*(r11*r11)))+(((-16.0)*(cj4*cj4)*(cj5*cj5)*(px*px)*(pz*pz)*(r01*r01)))+(((-32.0)*px*py*r01*r11*(cj4*cj4)*(cj5*cj5)*(pz*pz)))+(((16.0)*(cj4*cj4)*(cj5*cj5)*(px*px)*(pz*pz)*(r00*r00)))+(((32.0)*px*py*r00*r10*(cj4*cj4)*(cj5*cj5)*(pz*pz)))+(((32.0)*cj5*r00*r01*sj5*(px*px)*(pz*pz)))+(((0.32)*cj5*px*r00*(cj4*cj4)*(pz*pz)))+(((-16.0)*(cj4*cj4)*(cj5*cj5)*(py*py)*(pz*pz)*(r11*r11)))+(((16.0)*(cj4*cj4)*(py*py)*(pz*pz)*(r11*r11)))+(((32.0)*px*py*r00*r10*(pz*pz)))+(((32.0)*px*py*r01*r11*(cj4*cj4)*(pz*pz)))+(((-32.0)*px*py*r00*r10*(cj5*cj5)*(pz*pz)))+(((16.0)*(cj5*cj5)*(px*px)*(pz*pz)*(r01*r01)))+(((16.0)*(cj4*cj4)*(px*px)*(pz*pz)*(r01*r01)))+(((32.0)*cj5*px*py*r00*r11*sj5*(pz*pz)))+(((-16.0)*(cj5*cj5)*(py*py)*(pz*pz)*(r10*r10)))+(((16.0)*(cj4*cj4)*(cj5*cj5)*(py*py)*(pz*pz)*(r10*r10)))+(((0.32)*cj5*py*r10*(cj4*cj4)*(pz*pz)))+(((16.0)*(py*py)*(pz*pz)*(r10*r10))))) < -0.00001)
continue;
CheckValue<IkReal> x180=IKPowWithIntegerCheck(((((2.0)*py*pz*r10*sj5))+(((2.0)*cj5*py*pz*r11))+(((2.0)*cj5*px*pz*r01))+(((2.0)*px*pz*r00*sj5))),-1);
if(!x180.valid){
continue;
}
CheckValue<IkReal> x181=IKPowWithIntegerCheck(((((2.0)*py*pz*r10*sj5))+(((2.0)*cj5*py*pz*r11))+(((2.0)*cj5*px*pz*r01))+(((2.0)*px*pz*r00*sj5))),-1);
if(!x181.valid){
continue;
}
j3array[1]=((2.0)*(atan(((((2.0)*cj4*cj5*py*pz*r10*(x176.value)))+(((0.02)*cj4*pz*(x177.value)))+(((-2.0)*cj4*px*pz*r01*sj5*(x178.value)))+(((-0.5)*(x179.value)*(IKsqrt(((((-32.0)*cj5*px*py*r00*r11*sj5*(cj4*cj4)*(pz*pz)))+(((-0.32)*px*r01*sj5*(cj4*cj4)*(pz*pz)))+(((32.0)*cj5*px*py*r01*r10*sj5*(pz*pz)))+(((32.0)*cj5*r10*r11*sj5*(py*py)*(pz*pz)))+(((0.0016)*(cj4*cj4)*(pz*pz)))+(((-0.32)*py*r11*sj5*(cj4*cj4)*(pz*pz)))+(((-32.0)*cj5*r00*r01*sj5*(cj4*cj4)*(px*px)*(pz*pz)))+(((-32.0)*cj5*r10*r11*sj5*(cj4*cj4)*(py*py)*(pz*pz)))+(((16.0)*(px*px)*(pz*pz)*(r00*r00)))+(((-16.0)*(cj5*cj5)*(px*px)*(pz*pz)*(r00*r00)))+(((-32.0)*cj5*px*py*r01*r10*sj5*(cj4*cj4)*(pz*pz)))+(((32.0)*px*py*r01*r11*(cj5*cj5)*(pz*pz)))+(((16.0)*(cj5*cj5)*(py*py)*(pz*pz)*(r11*r11)))+(((-16.0)*(cj4*cj4)*(cj5*cj5)*(px*px)*(pz*pz)*(r01*r01)))+(((-32.0)*px*py*r01*r11*(cj4*cj4)*(cj5*cj5)*(pz*pz)))+(((16.0)*(cj4*cj4)*(cj5*cj5)*(px*px)*(pz*pz)*(r00*r00)))+(((32.0)*px*py*r00*r10*(cj4*cj4)*(cj5*cj5)*(pz*pz)))+(((32.0)*cj5*r00*r01*sj5*(px*px)*(pz*pz)))+(((0.32)*cj5*px*r00*(cj4*cj4)*(pz*pz)))+(((-16.0)*(cj4*cj4)*(cj5*cj5)*(py*py)*(pz*pz)*(r11*r11)))+(((16.0)*(cj4*cj4)*(py*py)*(pz*pz)*(r11*r11)))+(((32.0)*px*py*r00*r10*(pz*pz)))+(((32.0)*px*py*r01*r11*(cj4*cj4)*(pz*pz)))+(((-32.0)*px*py*r00*r10*(cj5*cj5)*(pz*pz)))+(((16.0)*(cj5*cj5)*(px*px)*(pz*pz)*(r01*r01)))+(((16.0)*(cj4*cj4)*(px*px)*(pz*pz)*(r01*r01)))+(((32.0)*cj5*px*py*r00*r11*sj5*(pz*pz)))+(((-16.0)*(cj5*cj5)*(py*py)*(pz*pz)*(r10*r10)))+(((16.0)*(cj4*cj4)*(cj5*cj5)*(py*py)*(pz*pz)*(r10*r10)))+(((0.32)*cj5*py*r10*(cj4*cj4)*(pz*pz)))+(((16.0)*(py*py)*(pz*pz)*(r10*r10))))))))+(((2.0)*cj4*cj5*px*pz*r00*(x180.value)))+(((-2.0)*cj4*py*pz*r11*sj5*(x181.value)))))));
sj3array[1]=IKsin(j3array[1]);
cj3array[1]=IKcos(j3array[1]);
if( j3array[0] > IKPI )
{
    j3array[0]-=IK2PI;
}
else if( j3array[0] < -IKPI )
{    j3array[0]+=IK2PI;
}
j3valid[0] = true;
if( j3array[1] > IKPI )
{
    j3array[1]-=IK2PI;
}
else if( j3array[1] < -IKPI )
{    j3array[1]+=IK2PI;
}
j3valid[1] = true;
for(int ij3 = 0; ij3 < 2; ++ij3)
{
if( !j3valid[ij3] )
{
    continue;
}
_ij3[0] = ij3; _ij3[1] = -1;
for(int iij3 = ij3+1; iij3 < 2; ++iij3)
{
if( j3valid[iij3] && IKabs(cj3array[ij3]-cj3array[iij3]) < IKFAST_SOLUTION_THRESH && IKabs(sj3array[ij3]-sj3array[iij3]) < IKFAST_SOLUTION_THRESH )
{
    j3valid[iij3]=false; _ij3[1] = iij3; break; 
}
}
j3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];

innerfn(solutions);
}
}

}

}

} else
{
{
IkReal j3array[2], cj3array[2], sj3array[2];
bool j3valid[2]={false};
_nj3 = 2;
CheckValue<IkReal> x2166=IKPowWithIntegerCheck(((((-1.0)*py*r10*sj5))+(((-1.0)*cj5*py*r11))+(((-1.0)*px*r00*sj5))+(((-1.0)*cj5*px*r01))),-1);
if(!x2166.valid){
continue;
}
if((((((4.0)*(cj4*cj4)*(py*py)*(r11*r11)))+(((-8.0)*cj5*r00*r01*sj5*(cj4*cj4)*(px*px)))+(((4.0)*(py*py)*(r10*r10)))+(((8.0)*cj5*px*py*r01*r10*sj5))+(((8.0)*cj5*r00*r01*sj5*(px*px)))+(((-8.0)*px*py*r00*r10*(cj5*cj5)))+(((4.0)*(px*px)*(r00*r00)))+(((8.0)*px*py*r00*r10))+(((8.0)*px*py*r01*r11*(cj4*cj4)))+(((8.0)*cj5*r10*r11*sj5*(py*py)))+(((0.08)*cj5*px*r00*(cj4*cj4)))+(((-8.0)*cj5*px*py*r00*r11*sj5*(cj4*cj4)))+(((-8.0)*cj5*r10*r11*sj5*(cj4*cj4)*(py*py)))+(((0.08)*cj5*py*r10*(cj4*cj4)))+(((-0.08)*py*r11*sj5*(cj4*cj4)))+(((8.0)*cj5*px*py*r00*r11*sj5))+(((8.0)*px*py*r01*r11*(cj5*cj5)))+(((4.0)*(cj4*cj4)*(cj5*cj5)*(py*py)*(r10*r10)))+(((-8.0)*cj5*px*py*r01*r10*sj5*(cj4*cj4)))+(((-0.08)*px*r01*sj5*(cj4*cj4)))+(((0.0004)*(cj4*cj4)))+(((4.0)*(cj5*cj5)*(py*py)*(r11*r11)))+(((8.0)*px*py*r00*r10*(cj4*cj4)*(cj5*cj5)))+(((4.0)*(cj4*cj4)*(px*px)*(r01*r01)))+(((4.0)*(cj5*cj5)*(px*px)*(r01*r01)))+(((-4.0)*(cj4*cj4)*(cj5*cj5)*(px*px)*(r01*r01)))+(((-4.0)*(cj5*cj5)*(px*px)*(r00*r00)))+(((-8.0)*px*py*r01*r11*(cj4*cj4)*(cj5*cj5)))+(((4.0)*(cj4*cj4)*(cj5*cj5)*(px*px)*(r00*r00)))+(((-4.0)*(cj5*cj5)*(py*py)*(r10*r10)))+(((-4.0)*(cj4*cj4)*(cj5*cj5)*(py*py)*(r11*r11))))) < -0.00001)
continue;
CheckValue<IkReal> x2167=IKPowWithIntegerCheck(((((-1.0)*py*r10*sj5))+(((-1.0)*cj5*py*r11))+(((-1.0)*px*r00*sj5))+(((-1.0)*cj5*px*r01))),-1);
if(!x2167.valid){
continue;
}
CheckValue<IkReal> x2168=IKPowWithIntegerCheck(((((-1.0)*py*r10*sj5))+(((-1.0)*cj5*py*r11))+(((-1.0)*px*r00*sj5))+(((-1.0)*cj5*px*r01))),-1);
if(!x2168.valid){
continue;
}
CheckValue<IkReal> x2169=IKPowWithIntegerCheck(((((-1.0)*py*r10*sj5))+(((-1.0)*cj5*py*r11))+(((-1.0)*px*r00*sj5))+(((-1.0)*cj5*px*r01))),-1);
if(!x2169.valid){
continue;
}
CheckValue<IkReal> x2170=IKPowWithIntegerCheck(((((-1.0)*py*r10*sj5))+(((-1.0)*cj5*py*r11))+(((-1.0)*px*r00*sj5))+(((-1.0)*cj5*px*r01))),-1);
if(!x2170.valid){
continue;
}
CheckValue<IkReal> x2171=IKPowWithIntegerCheck(((((-1.0)*py*r10*sj5))+(((-1.0)*cj5*py*r11))+(((-1.0)*px*r00*sj5))+(((-1.0)*cj5*px*r01))),-1);
if(!x2171.valid){
continue;
}
j3array[0]=((2.0)*(atan(((((0.5)*(x2166.value)*(IKsqrt(((((4.0)*(cj4*cj4)*(py*py)*(r11*r11)))+(((-8.0)*cj5*r00*r01*sj5*(cj4*cj4)*(px*px)))+(((4.0)*(py*py)*(r10*r10)))+(((8.0)*cj5*px*py*r01*r10*sj5))+(((8.0)*cj5*r00*r01*sj5*(px*px)))+(((-8.0)*px*py*r00*r10*(cj5*cj5)))+(((4.0)*(px*px)*(r00*r00)))+(((8.0)*px*py*r00*r10))+(((8.0)*px*py*r01*r11*(cj4*cj4)))+(((8.0)*cj5*r10*r11*sj5*(py*py)))+(((0.08)*cj5*px*r00*(cj4*cj4)))+(((-8.0)*cj5*px*py*r00*r11*sj5*(cj4*cj4)))+(((-8.0)*cj5*r10*r11*sj5*(cj4*cj4)*(py*py)))+(((0.08)*cj5*py*r10*(cj4*cj4)))+(((-0.08)*py*r11*sj5*(cj4*cj4)))+(((8.0)*cj5*px*py*r00*r11*sj5))+(((8.0)*px*py*r01*r11*(cj5*cj5)))+(((4.0)*(cj4*cj4)*(cj5*cj5)*(py*py)*(r10*r10)))+(((-8.0)*cj5*px*py*r01*r10*sj5*(cj4*cj4)))+(((-0.08)*px*r01*sj5*(cj4*cj4)))+(((0.0004)*(cj4*cj4)))+(((4.0)*(cj5*cj5)*(py*py)*(r11*r11)))+(((8.0)*px*py*r00*r10*(cj4*cj4)*(cj5*cj5)))+(((4.0)*(cj4*cj4)*(px*px)*(r01*r01)))+(((4.0)*(cj5*cj5)*(px*px)*(r01*r01)))+(((-4.0)*(cj4*cj4)*(cj5*cj5)*(px*px)*(r01*r01)))+(((-4.0)*(cj5*cj5)*(px*px)*(r00*r00)))+(((-8.0)*px*py*r01*r11*(cj4*cj4)*(cj5*cj5)))+(((4.0)*(cj4*cj4)*(cj5*cj5)*(px*px)*(r00*r00)))+(((-4.0)*(cj5*cj5)*(py*py)*(r10*r10)))+(((-4.0)*(cj4*cj4)*(cj5*cj5)*(py*py)*(r11*r11))))))))+(((1.0)*cj4*py*r11*sj5*(x2167.value)))+(((-1.0)*cj4*cj5*py*r10*(x2168.value)))+(((-0.01)*cj4*(x2169.value)))+(((1.0)*cj4*px*r01*sj5*(x2170.value)))+(((-1.0)*cj4*cj5*px*r00*(x2171.value)))))));
sj3array[0]=IKsin(j3array[0]);
cj3array[0]=IKcos(j3array[0]);
CheckValue<IkReal> x2172=IKPowWithIntegerCheck(((((-1.0)*py*r10*sj5))+(((-1.0)*cj5*py*r11))+(((-1.0)*px*r00*sj5))+(((-1.0)*cj5*px*r01))),-1);
if(!x2172.valid){
continue;
}
if((((((4.0)*(cj4*cj4)*(py*py)*(r11*r11)))+(((-8.0)*cj5*r00*r01*sj5*(cj4*cj4)*(px*px)))+(((4.0)*(py*py)*(r10*r10)))+(((8.0)*cj5*px*py*r01*r10*sj5))+(((8.0)*cj5*r00*r01*sj5*(px*px)))+(((-8.0)*px*py*r00*r10*(cj5*cj5)))+(((4.0)*(px*px)*(r00*r00)))+(((8.0)*px*py*r00*r10))+(((8.0)*px*py*r01*r11*(cj4*cj4)))+(((8.0)*cj5*r10*r11*sj5*(py*py)))+(((0.08)*cj5*px*r00*(cj4*cj4)))+(((-8.0)*cj5*px*py*r00*r11*sj5*(cj4*cj4)))+(((-8.0)*cj5*r10*r11*sj5*(cj4*cj4)*(py*py)))+(((0.08)*cj5*py*r10*(cj4*cj4)))+(((-0.08)*py*r11*sj5*(cj4*cj4)))+(((8.0)*cj5*px*py*r00*r11*sj5))+(((8.0)*px*py*r01*r11*(cj5*cj5)))+(((4.0)*(cj4*cj4)*(cj5*cj5)*(py*py)*(r10*r10)))+(((-8.0)*cj5*px*py*r01*r10*sj5*(cj4*cj4)))+(((-0.08)*px*r01*sj5*(cj4*cj4)))+(((0.0004)*(cj4*cj4)))+(((4.0)*(cj5*cj5)*(py*py)*(r11*r11)))+(((8.0)*px*py*r00*r10*(cj4*cj4)*(cj5*cj5)))+(((4.0)*(cj4*cj4)*(px*px)*(r01*r01)))+(((4.0)*(cj5*cj5)*(px*px)*(r01*r01)))+(((-4.0)*(cj4*cj4)*(cj5*cj5)*(px*px)*(r01*r01)))+(((-4.0)*(cj5*cj5)*(px*px)*(r00*r00)))+(((-8.0)*px*py*r01*r11*(cj4*cj4)*(cj5*cj5)))+(((4.0)*(cj4*cj4)*(cj5*cj5)*(px*px)*(r00*r00)))+(((-4.0)*(cj5*cj5)*(py*py)*(r10*r10)))+(((-4.0)*(cj4*cj4)*(cj5*cj5)*(py*py)*(r11*r11))))) < -0.00001)
continue;
CheckValue<IkReal> x2173=IKPowWithIntegerCheck(((((-1.0)*py*r10*sj5))+(((-1.0)*cj5*py*r11))+(((-1.0)*px*r00*sj5))+(((-1.0)*cj5*px*r01))),-1);
if(!x2173.valid){
continue;
}
CheckValue<IkReal> x2174=IKPowWithIntegerCheck(((((-1.0)*py*r10*sj5))+(((-1.0)*cj5*py*r11))+(((-1.0)*px*r00*sj5))+(((-1.0)*cj5*px*r01))),-1);
if(!x2174.valid){
continue;
}
CheckValue<IkReal> x2175=IKPowWithIntegerCheck(((((-1.0)*py*r10*sj5))+(((-1.0)*cj5*py*r11))+(((-1.0)*px*r00*sj5))+(((-1.0)*cj5*px*r01))),-1);
if(!x2175.valid){
continue;
}
CheckValue<IkReal> x2176=IKPowWithIntegerCheck(((((-1.0)*py*r10*sj5))+(((-1.0)*cj5*py*r11))+(((-1.0)*px*r00*sj5))+(((-1.0)*cj5*px*r01))),-1);
if(!x2176.valid){
continue;
}
CheckValue<IkReal> x2177=IKPowWithIntegerCheck(((((-1.0)*py*r10*sj5))+(((-1.0)*cj5*py*r11))+(((-1.0)*px*r00*sj5))+(((-1.0)*cj5*px*r01))),-1);
if(!x2177.valid){
continue;
}
j3array[1]=((-2.0)*(atan(((((0.5)*(x2172.value)*(IKsqrt(((((4.0)*(cj4*cj4)*(py*py)*(r11*r11)))+(((-8.0)*cj5*r00*r01*sj5*(cj4*cj4)*(px*px)))+(((4.0)*(py*py)*(r10*r10)))+(((8.0)*cj5*px*py*r01*r10*sj5))+(((8.0)*cj5*r00*r01*sj5*(px*px)))+(((-8.0)*px*py*r00*r10*(cj5*cj5)))+(((4.0)*(px*px)*(r00*r00)))+(((8.0)*px*py*r00*r10))+(((8.0)*px*py*r01*r11*(cj4*cj4)))+(((8.0)*cj5*r10*r11*sj5*(py*py)))+(((0.08)*cj5*px*r00*(cj4*cj4)))+(((-8.0)*cj5*px*py*r00*r11*sj5*(cj4*cj4)))+(((-8.0)*cj5*r10*r11*sj5*(cj4*cj4)*(py*py)))+(((0.08)*cj5*py*r10*(cj4*cj4)))+(((-0.08)*py*r11*sj5*(cj4*cj4)))+(((8.0)*cj5*px*py*r00*r11*sj5))+(((8.0)*px*py*r01*r11*(cj5*cj5)))+(((4.0)*(cj4*cj4)*(cj5*cj5)*(py*py)*(r10*r10)))+(((-8.0)*cj5*px*py*r01*r10*sj5*(cj4*cj4)))+(((-0.08)*px*r01*sj5*(cj4*cj4)))+(((0.0004)*(cj4*cj4)))+(((4.0)*(cj5*cj5)*(py*py)*(r11*r11)))+(((8.0)*px*py*r00*r10*(cj4*cj4)*(cj5*cj5)))+(((4.0)*(cj4*cj4)*(px*px)*(r01*r01)))+(((4.0)*(cj5*cj5)*(px*px)*(r01*r01)))+(((-4.0)*(cj4*cj4)*(cj5*cj5)*(px*px)*(r01*r01)))+(((-4.0)*(cj5*cj5)*(px*px)*(r00*r00)))+(((-8.0)*px*py*r01*r11*(cj4*cj4)*(cj5*cj5)))+(((4.0)*(cj4*cj4)*(cj5*cj5)*(px*px)*(r00*r00)))+(((-4.0)*(cj5*cj5)*(py*py)*(r10*r10)))+(((-4.0)*(cj4*cj4)*(cj5*cj5)*(py*py)*(r11*r11))))))))+(((0.01)*cj4*(x2173.value)))+((cj4*cj5*px*r00*(x2174.value)))+(((-1.0)*cj4*px*r01*sj5*(x2175.value)))+(((-1.0)*cj4*py*r11*sj5*(x2176.value)))+((cj4*cj5*py*r10*(x2177.value)))))));
sj3array[1]=IKsin(j3array[1]);
cj3array[1]=IKcos(j3array[1]);
if( j3array[0] > IKPI )
{
    j3array[0]-=IK2PI;
}
else if( j3array[0] < -IKPI )
{    j3array[0]+=IK2PI;
}
j3valid[0] = true;
if( j3array[1] > IKPI )
{
    j3array[1]-=IK2PI;
}
else if( j3array[1] < -IKPI )
{    j3array[1]+=IK2PI;
}
j3valid[1] = true;
for(int ij3 = 0; ij3 < 2; ++ij3)
{
if( !j3valid[ij3] )
{
    continue;
}
_ij3[0] = ij3; _ij3[1] = -1;
for(int iij3 = ij3+1; iij3 < 2; ++iij3)
{
if( j3valid[iij3] && IKabs(cj3array[ij3]-cj3array[iij3]) < IKFAST_SOLUTION_THRESH && IKabs(sj3array[ij3]-sj3array[iij3]) < IKFAST_SOLUTION_THRESH )
{
    j3valid[iij3]=false; _ij3[1] = iij3; break; 
}
}
j3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];

innerfn(solutions);
}
}

}

}

} else
{
{
IkReal j3array[2], cj3array[2], sj3array[2];
bool j3valid[2]={false};
_nj3 = 2;
IkReal x2178=rxp0_2*rxp0_2;
IkReal x2179=cj4*cj4;
IkReal x2180=cj5*cj5;
IkReal x2181=rxp1_2*rxp1_2;
IkReal x2182=(cj5*rxp1_2);
IkReal x2183=((8.0)*rxp0_2*sj5);
IkReal x2184=((4.0)*x2178);
IkReal x2185=((4.0)*x2180*x2181);
CheckValue<IkReal> x2191=IKPowWithIntegerCheck(((((-1.0)*cj4*cj5*rxp0_2))+((cj4*rxp1_2*sj5))),-1);
if(!x2191.valid){
continue;
}
IkReal x2186=x2191.value;
IkReal x2187=(x2182*x2186);
IkReal x2188=(rxp0_2*sj5*x2186);
IkReal x2189=(x2187+x2188);
if((((((-1.0)*x2180*x2184))+(((4.0)*x2179*x2181))+(((-1.0)*x2179*x2182*x2183))+x2185+x2184+((x2182*x2183))+((x2179*x2180*x2184))+(((-1.0)*x2179*x2185)))) < -0.00001)
continue;
IkReal x2190=((0.5)*x2186*(IKsqrt(((((-1.0)*x2180*x2184))+(((4.0)*x2179*x2181))+(((-1.0)*x2179*x2182*x2183))+x2185+x2184+((x2182*x2183))+((x2179*x2180*x2184))+(((-1.0)*x2179*x2185))))));
j3array[0]=((2.0)*(atan((x2190+x2189))));
sj3array[0]=IKsin(j3array[0]);
cj3array[0]=IKcos(j3array[0]);
j3array[1]=((2.0)*(atan((x2189+(((-1.0)*x2190))))));
sj3array[1]=IKsin(j3array[1]);
cj3array[1]=IKcos(j3array[1]);
if( j3array[0] > IKPI )
{
    j3array[0]-=IK2PI;
}
else if( j3array[0] < -IKPI )
{    j3array[0]+=IK2PI;
}
j3valid[0] = true;
if( j3array[1] > IKPI )
{
    j3array[1]-=IK2PI;
}
else if( j3array[1] < -IKPI )
{    j3array[1]+=IK2PI;
}
j3valid[1] = true;
for(int ij3 = 0; ij3 < 2; ++ij3)
{
if( !j3valid[ij3] )
{
    continue;
}
_ij3[0] = ij3; _ij3[1] = -1;
for(int iij3 = ij3+1; iij3 < 2; ++iij3)
{
if( j3valid[iij3] && IKabs(cj3array[ij3]-cj3array[iij3]) < IKFAST_SOLUTION_THRESH && IKabs(sj3array[ij3]-sj3array[iij3]) < IKFAST_SOLUTION_THRESH )
{
    j3valid[iij3]=false; _ij3[1] = iij3; break; 
}
}
j3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];

innerfn(solutions);
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j3]

}
} while(0);
if( bgotonextstatement )
{
}
}
}

} else
{
{
IkReal j3array[2], cj3array[2], sj3array[2];
bool j3valid[2]={false};
_nj3 = 2;
IkReal x2192=cj5*cj5;
IkReal x2193=r20*r20;
IkReal x2194=cj4*cj4;
IkReal x2195=rxp0_2*rxp0_2;
IkReal x2196=rxp1_2*rxp1_2;
IkReal x2197=rxp2_2*rxp2_2;
IkReal x2198=r21*r21;
IkReal x2199=(rxp0_2*sj5);
IkReal x2200=(cj4*sj4);
IkReal x2201=((0.08)*r20);
IkReal x2202=(cj5*rxp1_2);
IkReal x2203=(rxp1_2*sj5);
IkReal x2204=((8.0)*rxp2_2);
IkReal x2205=((0.08)*r22);
IkReal x2206=(cj5*rxp0_2);
IkReal x2207=((0.08)*r21);
IkReal x2208=((0.01)*sj4);
IkReal x2209=(rxp2_2*sj5);
IkReal x2210=((0.0004)*x2192);
IkReal x2211=((4.0)*x2195);
IkReal x2212=((4.0)*x2197);
IkReal x2213=((0.0004)*x2193);
IkReal x2214=(cj5*rxp2_2*x2207);
IkReal x2215=((0.0008)*cj5*r20*r21*sj5);
IkReal x2216=((4.0)*x2192*x2196);
CheckValue<IkReal> x2221=IKPowWithIntegerCheck((((cj4*x2203))+(((-1.0)*cj5*r21*x2208))+(((-1.0)*rxp2_2*sj4))+(((-1.0)*r20*sj5*x2208))+(((-1.0)*cj4*x2206))),-1);
if(!x2221.valid){
continue;
}
IkReal x2217=x2221.value;
IkReal x2218=((1.0)*x2217);
IkReal x2219=((0.01)*r22*x2217);
if((((((-1.0)*sj5*x2200*x2202*x2207))+((x2198*x2210))+x2213+x2212+x2211+x2216+x2215+x2214+(((-1.0)*x2200*x2203*x2204))+((cj5*x2199*x2200*x2201))+(((8.0)*x2199*x2202))+(((-1.0)*x2192*x2211))+(((-1.0)*x2193*x2210))+(((4.0)*x2194*x2196))+((rxp0_2*x2192*x2200*x2207))+((x2201*x2209))+(((-1.0)*x2202*x2205))+(((-1.0)*x2194*x2212))+(((-1.0)*x2194*x2214))+(((-1.0)*x2194*x2215))+(((-1.0)*x2194*x2216))+(((-1.0)*x2194*x2213))+((x2192*x2194*x2211))+(((-1.0)*rxp1_2*x2200*x2201))+((x2193*x2194*x2210))+(((-1.0)*x2194*x2198*x2210))+(((-1.0)*x2199*x2205))+(((-8.0)*x2194*x2199*x2202))+((rxp1_2*x2192*x2200*x2201))+((x2200*x2204*x2206))+(((0.0004)*(r22*r22)))+(((-1.0)*x2194*x2201*x2209)))) < -0.00001)
continue;
IkReal x2220=((0.5)*x2217*(IKsqrt(((((-1.0)*sj5*x2200*x2202*x2207))+((x2198*x2210))+x2213+x2212+x2211+x2216+x2215+x2214+(((-1.0)*x2200*x2203*x2204))+((cj5*x2199*x2200*x2201))+(((8.0)*x2199*x2202))+(((-1.0)*x2192*x2211))+(((-1.0)*x2193*x2210))+(((4.0)*x2194*x2196))+((rxp0_2*x2192*x2200*x2207))+((x2201*x2209))+(((-1.0)*x2202*x2205))+(((-1.0)*x2194*x2212))+(((-1.0)*x2194*x2214))+(((-1.0)*x2194*x2215))+(((-1.0)*x2194*x2216))+(((-1.0)*x2194*x2213))+((x2192*x2194*x2211))+(((-1.0)*rxp1_2*x2200*x2201))+((x2193*x2194*x2210))+(((-1.0)*x2194*x2198*x2210))+(((-1.0)*x2199*x2205))+(((-8.0)*x2194*x2199*x2202))+((rxp1_2*x2192*x2200*x2201))+((x2200*x2204*x2206))+(((0.0004)*(r22*r22)))+(((-1.0)*x2194*x2201*x2209))))));
j3array[0]=((2.0)*(atan((((x2202*x2217))+x2220+(((-1.0)*x2219))+((x2199*x2217))))));
sj3array[0]=IKsin(j3array[0]);
cj3array[0]=IKcos(j3array[0]);
j3array[1]=((2.0)*(atan((((x2202*x2218))+(((-1.0)*x2219))+(((-1.0)*x2220))+((x2199*x2218))))));
sj3array[1]=IKsin(j3array[1]);
cj3array[1]=IKcos(j3array[1]);
if( j3array[0] > IKPI )
{
    j3array[0]-=IK2PI;
}
else if( j3array[0] < -IKPI )
{    j3array[0]+=IK2PI;
}
j3valid[0] = true;
if( j3array[1] > IKPI )
{
    j3array[1]-=IK2PI;
}
else if( j3array[1] < -IKPI )
{    j3array[1]+=IK2PI;
}
j3valid[1] = true;
for(int ij3 = 0; ij3 < 2; ++ij3)
{
if( !j3valid[ij3] )
{
    continue;
}
_ij3[0] = ij3; _ij3[1] = -1;
for(int iij3 = ij3+1; iij3 < 2; ++iij3)
{
if( j3valid[iij3] && IKabs(cj3array[ij3]-cj3array[iij3]) < IKFAST_SOLUTION_THRESH && IKabs(sj3array[ij3]-sj3array[iij3]) < IKFAST_SOLUTION_THRESH )
{
    j3valid[iij3]=false; _ij3[1] = iij3; break; 
}
}
j3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];

innerfn(solutions);
}
}

}

}

} else
{
{
IkReal j3array[2], cj3array[2], sj3array[2];
bool j3valid[2]={false};
_nj3 = 2;
IkReal x2222=cj4*cj4;
IkReal x2223=npy*npy;
IkReal x2224=cj5*cj5;
IkReal x2225=npx*npx;
IkReal x2226=npz*npz;
IkReal x2227=(cj5*npx);
IkReal x2228=(npz*sj4);
IkReal x2229=((1.0)*sj5);
IkReal x2230=((4.0)*x2224);
IkReal x2231=((4.0)*x2226);
IkReal x2232=((0.08)*x2222);
IkReal x2233=((8.0)*npy*sj5);
IkReal x2234=(x2222*x2223);
CheckValue<IkReal> x2243=IKPowWithIntegerCheck(((((-1.0)*npx*x2229))+(((-1.0)*cj5*npy))),-1);
if(!x2243.valid){
continue;
}
IkReal x2235=x2243.value;
IkReal x2236=(cj4*x2235);
IkReal x2237=((0.01)*x2236);
IkReal x2238=(x2228*x2235);
IkReal x2239=(x2227*x2236);
CheckValue<IkReal> x2244=IKPowWithIntegerCheck(((((-1.0)*cj5*npy))+(((-1.0)*npx*sj5))),-1);
if(!x2244.valid){
continue;
}
IkReal x2240=(cj4*npy*x2229*(x2244.value));
IkReal x2241=(x2239+x2238+x2237);
if((((((-1.0)*cj4*x2228*x2233))+x2231+(((-1.0)*x2222*x2231))+(((0.0004)*x2222))+(((-1.0)*x2225*x2230))+(((-1.0)*x2222*x2227*x2233))+(((4.0)*x2225))+(((4.0)*x2234))+(((8.0)*cj4*x2227*x2228))+((x2227*x2233))+((x2227*x2232))+((x2223*x2230))+(((-1.0)*x2230*x2234))+(((-1.0)*npy*sj5*x2232))+((x2222*x2225*x2230))+(((0.08)*cj4*x2228)))) < -0.00001)
continue;
IkReal x2242=((0.5)*x2235*(IKsqrt(((((-1.0)*cj4*x2228*x2233))+x2231+(((-1.0)*x2222*x2231))+(((0.0004)*x2222))+(((-1.0)*x2225*x2230))+(((-1.0)*x2222*x2227*x2233))+(((4.0)*x2225))+(((4.0)*x2234))+(((8.0)*cj4*x2227*x2228))+((x2227*x2233))+((x2227*x2232))+((x2223*x2230))+(((-1.0)*x2230*x2234))+(((-1.0)*npy*sj5*x2232))+((x2222*x2225*x2230))+(((0.08)*cj4*x2228))))));
j3array[0]=((2.0)*(atan((x2240+x2242+(((-1.0)*x2241))))));
sj3array[0]=IKsin(j3array[0]);
cj3array[0]=IKcos(j3array[0]);
j3array[1]=((-2.0)*(atan((x2241+x2242+(((-1.0)*x2240))))));
sj3array[1]=IKsin(j3array[1]);
cj3array[1]=IKcos(j3array[1]);
if( j3array[0] > IKPI )
{
    j3array[0]-=IK2PI;
}
else if( j3array[0] < -IKPI )
{    j3array[0]+=IK2PI;
}
j3valid[0] = true;
if( j3array[1] > IKPI )
{
    j3array[1]-=IK2PI;
}
else if( j3array[1] < -IKPI )
{    j3array[1]+=IK2PI;
}
j3valid[1] = true;
for(int ij3 = 0; ij3 < 2; ++ij3)
{
if( !j3valid[ij3] )
{
    continue;
}
_ij3[0] = ij3; _ij3[1] = -1;
for(int iij3 = ij3+1; iij3 < 2; ++iij3)
{
if( j3valid[iij3] && IKabs(cj3array[ij3]-cj3array[iij3]) < IKFAST_SOLUTION_THRESH && IKabs(sj3array[ij3]-sj3array[iij3]) < IKFAST_SOLUTION_THRESH )
{
    j3valid[iij3]=false; _ij3[1] = iij3; break; 
}
}
j3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];

innerfn(solutions);
}
}

}

}

} else
{
{
IkReal j3array[2], cj3array[2], sj3array[2];
bool j3valid[2]={false};
_nj3 = 2;
IkReal x2245=cj4*cj4;
IkReal x2246=r20*r20;
IkReal x2247=cj5*cj5;
IkReal x2248=r21*r21;
IkReal x2249=r22*r22;
IkReal x2250=(r21*sj5);
IkReal x2251=(cj5*r20);
IkReal x2252=((4.0)*x2249);
IkReal x2253=((4.0)*x2246);
IkReal x2254=((8.0)*cj4*r22*sj4);
IkReal x2255=((4.0)*x2247*x2248);
CheckValue<IkReal> x2263=IKPowWithIntegerCheck(((((-1.0)*cj5*r21))+(((-1.0)*r20*sj5))),-1);
if(!x2263.valid){
continue;
}
IkReal x2256=x2263.value;
IkReal x2257=(cj4*x2256);
IkReal x2258=(r22*sj4*x2256);
IkReal x2259=(x2251*x2257);
IkReal x2260=((1.0)*x2250*x2257);
IkReal x2261=(x2259+x2258);
if(((x2255+x2253+x2252+(((-8.0)*x2245*x2250*x2251))+((x2245*x2247*x2253))+(((-1.0)*x2245*x2255))+(((-1.0)*x2245*x2252))+(((4.0)*x2245*x2248))+(((8.0)*x2250*x2251))+((x2251*x2254))+(((-1.0)*x2250*x2254))+(((-1.0)*x2247*x2253)))) < -0.00001)
continue;
IkReal x2262=((0.5)*x2256*(IKsqrt((x2255+x2253+x2252+(((-8.0)*x2245*x2250*x2251))+((x2245*x2247*x2253))+(((-1.0)*x2245*x2255))+(((-1.0)*x2245*x2252))+(((4.0)*x2245*x2248))+(((8.0)*x2250*x2251))+((x2251*x2254))+(((-1.0)*x2250*x2254))+(((-1.0)*x2247*x2253))))));
j3array[0]=((2.0)*(atan((x2262+x2260+(((-1.0)*x2261))))));
sj3array[0]=IKsin(j3array[0]);
cj3array[0]=IKcos(j3array[0]);
j3array[1]=((-2.0)*(atan((x2262+x2261+(((-1.0)*x2260))))));
sj3array[1]=IKsin(j3array[1]);
cj3array[1]=IKcos(j3array[1]);
if( j3array[0] > IKPI )
{
    j3array[0]-=IK2PI;
}
else if( j3array[0] < -IKPI )
{    j3array[0]+=IK2PI;
}
j3valid[0] = true;
if( j3array[1] > IKPI )
{
    j3array[1]-=IK2PI;
}
else if( j3array[1] < -IKPI )
{    j3array[1]+=IK2PI;
}
j3valid[1] = true;
for(int ij3 = 0; ij3 < 2; ++ij3)
{
if( !j3valid[ij3] )
{
    continue;
}
_ij3[0] = ij3; _ij3[1] = -1;
for(int iij3 = ij3+1; iij3 < 2; ++iij3)
{
if( j3valid[iij3] && IKabs(cj3array[ij3]-cj3array[iij3]) < IKFAST_SOLUTION_THRESH && IKabs(sj3array[ij3]-sj3array[iij3]) < IKFAST_SOLUTION_THRESH )
{
    j3valid[iij3]=false; _ij3[1] = iij3; break; 
}
}
j3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];

innerfn(solutions);
}
}

}

}
}
}

}

}
    }
}
return solutions.GetNumSolutions()>0;
}
static inline void polyroots3(IkReal rawcoeffs[3+1], IkReal rawroots[3], int& numroots)
{
    using std::complex;
    if( rawcoeffs[0] == 0 ) {
        // solve with one reduced degree
        polyroots2(&rawcoeffs[1], &rawroots[0], numroots);
        return;
    }
    IKFAST_ASSERT(rawcoeffs[0] != 0);
    const IkReal tol = 128.0*std::numeric_limits<IkReal>::epsilon();
    const IkReal tolsqrt = sqrt(std::numeric_limits<IkReal>::epsilon());
    complex<IkReal> coeffs[3];
    const int maxsteps = 110;
    for(int i = 0; i < 3; ++i) {
        coeffs[i] = complex<IkReal>(rawcoeffs[i+1]/rawcoeffs[0]);
    }
    complex<IkReal> roots[3];
    IkReal err[3];
    roots[0] = complex<IkReal>(1,0);
    roots[1] = complex<IkReal>(0.4,0.9); // any complex number not a root of unity works
    err[0] = 1.0;
    err[1] = 1.0;
    for(int i = 2; i < 3; ++i) {
        roots[i] = roots[i-1]*roots[1];
        err[i] = 1.0;
    }
    for(int step = 0; step < maxsteps; ++step) {
        bool changed = false;
        for(int i = 0; i < 3; ++i) {
            if ( err[i] >= tol ) {
                changed = true;
                // evaluate
                complex<IkReal> x = roots[i] + coeffs[0];
                for(int j = 1; j < 3; ++j) {
                    x = roots[i] * x + coeffs[j];
                }
                for(int j = 0; j < 3; ++j) {
                    if( i != j ) {
                        if( roots[i] != roots[j] ) {
                            x /= (roots[i] - roots[j]);
                        }
                    }
                }
                roots[i] -= x;
                err[i] = abs(x);
            }
        }
        if( !changed ) {
            break;
        }
    }

    numroots = 0;
    bool visited[3] = {false};
    for(int i = 0; i < 3; ++i) {
        if( !visited[i] ) {
            // might be a multiple root, in which case it will have more error than the other roots
            // find any neighboring roots, and take the average
            complex<IkReal> newroot=roots[i];
            int n = 1;
            for(int j = i+1; j < 3; ++j) {
                // care about error in real much more than imaginary
                if( abs(real(roots[i])-real(roots[j])) < tolsqrt && abs(imag(roots[i])-imag(roots[j])) < 0.002 ) {
                    newroot += roots[j];
                    n += 1;
                    visited[j] = true;
                }
            }
            if( n > 1 ) {
                newroot /= n;
            }
            // there are still cases where even the mean is not accurate enough, until a better multi-root algorithm is used, need to use the sqrt
            if( IKabs(imag(newroot)) < tolsqrt ) {
                rawroots[numroots++] = real(newroot);
            }
        }
    }
}
static inline void polyroots2(IkReal rawcoeffs[2+1], IkReal rawroots[2], int& numroots) {
    IkReal det = rawcoeffs[1]*rawcoeffs[1]-4*rawcoeffs[0]*rawcoeffs[2];
    if( det < 0 ) {
        numroots=0;
    }
    else if( det == 0 ) {
        rawroots[0] = -0.5*rawcoeffs[1]/rawcoeffs[0];
        numroots = 1;
    }
    else {
        det = IKsqrt(det);
        rawroots[0] = (-rawcoeffs[1]+det)/(2*rawcoeffs[0]);
        rawroots[1] = (-rawcoeffs[1]-det)/(2*rawcoeffs[0]);//rawcoeffs[2]/(rawcoeffs[0]*rawroots[0]);
        numroots = 2;
    }
}
static inline void polyroots5(IkReal rawcoeffs[5+1], IkReal rawroots[5], int& numroots)
{
    using std::complex;
    if( rawcoeffs[0] == 0 ) {
        // solve with one reduced degree
        polyroots4(&rawcoeffs[1], &rawroots[0], numroots);
        return;
    }
    IKFAST_ASSERT(rawcoeffs[0] != 0);
    const IkReal tol = 128.0*std::numeric_limits<IkReal>::epsilon();
    const IkReal tolsqrt = sqrt(std::numeric_limits<IkReal>::epsilon());
    complex<IkReal> coeffs[5];
    const int maxsteps = 110;
    for(int i = 0; i < 5; ++i) {
        coeffs[i] = complex<IkReal>(rawcoeffs[i+1]/rawcoeffs[0]);
    }
    complex<IkReal> roots[5];
    IkReal err[5];
    roots[0] = complex<IkReal>(1,0);
    roots[1] = complex<IkReal>(0.4,0.9); // any complex number not a root of unity works
    err[0] = 1.0;
    err[1] = 1.0;
    for(int i = 2; i < 5; ++i) {
        roots[i] = roots[i-1]*roots[1];
        err[i] = 1.0;
    }
    for(int step = 0; step < maxsteps; ++step) {
        bool changed = false;
        for(int i = 0; i < 5; ++i) {
            if ( err[i] >= tol ) {
                changed = true;
                // evaluate
                complex<IkReal> x = roots[i] + coeffs[0];
                for(int j = 1; j < 5; ++j) {
                    x = roots[i] * x + coeffs[j];
                }
                for(int j = 0; j < 5; ++j) {
                    if( i != j ) {
                        if( roots[i] != roots[j] ) {
                            x /= (roots[i] - roots[j]);
                        }
                    }
                }
                roots[i] -= x;
                err[i] = abs(x);
            }
        }
        if( !changed ) {
            break;
        }
    }

    numroots = 0;
    bool visited[5] = {false};
    for(int i = 0; i < 5; ++i) {
        if( !visited[i] ) {
            // might be a multiple root, in which case it will have more error than the other roots
            // find any neighboring roots, and take the average
            complex<IkReal> newroot=roots[i];
            int n = 1;
            for(int j = i+1; j < 5; ++j) {
                // care about error in real much more than imaginary
                if( abs(real(roots[i])-real(roots[j])) < tolsqrt && abs(imag(roots[i])-imag(roots[j])) < 0.002 ) {
                    newroot += roots[j];
                    n += 1;
                    visited[j] = true;
                }
            }
            if( n > 1 ) {
                newroot /= n;
            }
            // there are still cases where even the mean is not accurate enough, until a better multi-root algorithm is used, need to use the sqrt
            if( IKabs(imag(newroot)) < tolsqrt ) {
                rawroots[numroots++] = real(newroot);
            }
        }
    }
}
static inline void polyroots4(IkReal rawcoeffs[4+1], IkReal rawroots[4], int& numroots)
{
    using std::complex;
    if( rawcoeffs[0] == 0 ) {
        // solve with one reduced degree
        polyroots3(&rawcoeffs[1], &rawroots[0], numroots);
        return;
    }
    IKFAST_ASSERT(rawcoeffs[0] != 0);
    const IkReal tol = 128.0*std::numeric_limits<IkReal>::epsilon();
    const IkReal tolsqrt = sqrt(std::numeric_limits<IkReal>::epsilon());
    complex<IkReal> coeffs[4];
    const int maxsteps = 110;
    for(int i = 0; i < 4; ++i) {
        coeffs[i] = complex<IkReal>(rawcoeffs[i+1]/rawcoeffs[0]);
    }
    complex<IkReal> roots[4];
    IkReal err[4];
    roots[0] = complex<IkReal>(1,0);
    roots[1] = complex<IkReal>(0.4,0.9); // any complex number not a root of unity works
    err[0] = 1.0;
    err[1] = 1.0;
    for(int i = 2; i < 4; ++i) {
        roots[i] = roots[i-1]*roots[1];
        err[i] = 1.0;
    }
    for(int step = 0; step < maxsteps; ++step) {
        bool changed = false;
        for(int i = 0; i < 4; ++i) {
            if ( err[i] >= tol ) {
                changed = true;
                // evaluate
                complex<IkReal> x = roots[i] + coeffs[0];
                for(int j = 1; j < 4; ++j) {
                    x = roots[i] * x + coeffs[j];
                }
                for(int j = 0; j < 4; ++j) {
                    if( i != j ) {
                        if( roots[i] != roots[j] ) {
                            x /= (roots[i] - roots[j]);
                        }
                    }
                }
                roots[i] -= x;
                err[i] = abs(x);
            }
        }
        if( !changed ) {
            break;
        }
    }

    numroots = 0;
    bool visited[4] = {false};
    for(int i = 0; i < 4; ++i) {
        if( !visited[i] ) {
            // might be a multiple root, in which case it will have more error than the other roots
            // find any neighboring roots, and take the average
            complex<IkReal> newroot=roots[i];
            int n = 1;
            for(int j = i+1; j < 4; ++j) {
                // care about error in real much more than imaginary
                if( abs(real(roots[i])-real(roots[j])) < tolsqrt && abs(imag(roots[i])-imag(roots[j])) < 0.002 ) {
                    newroot += roots[j];
                    n += 1;
                    visited[j] = true;
                }
            }
            if( n > 1 ) {
                newroot /= n;
            }
            // there are still cases where even the mean is not accurate enough, until a better multi-root algorithm is used, need to use the sqrt
            if( IKabs(imag(newroot)) < tolsqrt ) {
                rawroots[numroots++] = real(newroot);
            }
        }
    }
}
static inline void polyroots7(IkReal rawcoeffs[7+1], IkReal rawroots[7], int& numroots)
{
    using std::complex;
    if( rawcoeffs[0] == 0 ) {
        // solve with one reduced degree
        polyroots6(&rawcoeffs[1], &rawroots[0], numroots);
        return;
    }
    IKFAST_ASSERT(rawcoeffs[0] != 0);
    const IkReal tol = 128.0*std::numeric_limits<IkReal>::epsilon();
    const IkReal tolsqrt = sqrt(std::numeric_limits<IkReal>::epsilon());
    complex<IkReal> coeffs[7];
    const int maxsteps = 110;
    for(int i = 0; i < 7; ++i) {
        coeffs[i] = complex<IkReal>(rawcoeffs[i+1]/rawcoeffs[0]);
    }
    complex<IkReal> roots[7];
    IkReal err[7];
    roots[0] = complex<IkReal>(1,0);
    roots[1] = complex<IkReal>(0.4,0.9); // any complex number not a root of unity works
    err[0] = 1.0;
    err[1] = 1.0;
    for(int i = 2; i < 7; ++i) {
        roots[i] = roots[i-1]*roots[1];
        err[i] = 1.0;
    }
    for(int step = 0; step < maxsteps; ++step) {
        bool changed = false;
        for(int i = 0; i < 7; ++i) {
            if ( err[i] >= tol ) {
                changed = true;
                // evaluate
                complex<IkReal> x = roots[i] + coeffs[0];
                for(int j = 1; j < 7; ++j) {
                    x = roots[i] * x + coeffs[j];
                }
                for(int j = 0; j < 7; ++j) {
                    if( i != j ) {
                        if( roots[i] != roots[j] ) {
                            x /= (roots[i] - roots[j]);
                        }
                    }
                }
                roots[i] -= x;
                err[i] = abs(x);
            }
        }
        if( !changed ) {
            break;
        }
    }

    numroots = 0;
    bool visited[7] = {false};
    for(int i = 0; i < 7; ++i) {
        if( !visited[i] ) {
            // might be a multiple root, in which case it will have more error than the other roots
            // find any neighboring roots, and take the average
            complex<IkReal> newroot=roots[i];
            int n = 1;
            for(int j = i+1; j < 7; ++j) {
                // care about error in real much more than imaginary
                if( abs(real(roots[i])-real(roots[j])) < tolsqrt && abs(imag(roots[i])-imag(roots[j])) < 0.002 ) {
                    newroot += roots[j];
                    n += 1;
                    visited[j] = true;
                }
            }
            if( n > 1 ) {
                newroot /= n;
            }
            // there are still cases where even the mean is not accurate enough, until a better multi-root algorithm is used, need to use the sqrt
            if( IKabs(imag(newroot)) < tolsqrt ) {
                rawroots[numroots++] = real(newroot);
            }
        }
    }
}
static inline void polyroots6(IkReal rawcoeffs[6+1], IkReal rawroots[6], int& numroots)
{
    using std::complex;
    if( rawcoeffs[0] == 0 ) {
        // solve with one reduced degree
        polyroots5(&rawcoeffs[1], &rawroots[0], numroots);
        return;
    }
    IKFAST_ASSERT(rawcoeffs[0] != 0);
    const IkReal tol = 128.0*std::numeric_limits<IkReal>::epsilon();
    const IkReal tolsqrt = sqrt(std::numeric_limits<IkReal>::epsilon());
    complex<IkReal> coeffs[6];
    const int maxsteps = 110;
    for(int i = 0; i < 6; ++i) {
        coeffs[i] = complex<IkReal>(rawcoeffs[i+1]/rawcoeffs[0]);
    }
    complex<IkReal> roots[6];
    IkReal err[6];
    roots[0] = complex<IkReal>(1,0);
    roots[1] = complex<IkReal>(0.4,0.9); // any complex number not a root of unity works
    err[0] = 1.0;
    err[1] = 1.0;
    for(int i = 2; i < 6; ++i) {
        roots[i] = roots[i-1]*roots[1];
        err[i] = 1.0;
    }
    for(int step = 0; step < maxsteps; ++step) {
        bool changed = false;
        for(int i = 0; i < 6; ++i) {
            if ( err[i] >= tol ) {
                changed = true;
                // evaluate
                complex<IkReal> x = roots[i] + coeffs[0];
                for(int j = 1; j < 6; ++j) {
                    x = roots[i] * x + coeffs[j];
                }
                for(int j = 0; j < 6; ++j) {
                    if( i != j ) {
                        if( roots[i] != roots[j] ) {
                            x /= (roots[i] - roots[j]);
                        }
                    }
                }
                roots[i] -= x;
                err[i] = abs(x);
            }
        }
        if( !changed ) {
            break;
        }
    }

    numroots = 0;
    bool visited[6] = {false};
    for(int i = 0; i < 6; ++i) {
        if( !visited[i] ) {
            // might be a multiple root, in which case it will have more error than the other roots
            // find any neighboring roots, and take the average
            complex<IkReal> newroot=roots[i];
            int n = 1;
            for(int j = i+1; j < 6; ++j) {
                // care about error in real much more than imaginary
                if( abs(real(roots[i])-real(roots[j])) < tolsqrt && abs(imag(roots[i])-imag(roots[j])) < 0.002 ) {
                    newroot += roots[j];
                    n += 1;
                    visited[j] = true;
                }
            }
            if( n > 1 ) {
                newroot /= n;
            }
            // there are still cases where even the mean is not accurate enough, until a better multi-root algorithm is used, need to use the sqrt
            if( IKabs(imag(newroot)) < tolsqrt ) {
                rawroots[numroots++] = real(newroot);
            }
        }
    }
}
static inline void polyroots8(IkReal rawcoeffs[8+1], IkReal rawroots[8], int& numroots)
{
    using std::complex;
    if( rawcoeffs[0] == 0 ) {
        // solve with one reduced degree
        polyroots7(&rawcoeffs[1], &rawroots[0], numroots);
        return;
    }
    IKFAST_ASSERT(rawcoeffs[0] != 0);
    const IkReal tol = 128.0*std::numeric_limits<IkReal>::epsilon();
    const IkReal tolsqrt = sqrt(std::numeric_limits<IkReal>::epsilon());
    complex<IkReal> coeffs[8];
    const int maxsteps = 110;
    for(int i = 0; i < 8; ++i) {
        coeffs[i] = complex<IkReal>(rawcoeffs[i+1]/rawcoeffs[0]);
    }
    complex<IkReal> roots[8];
    IkReal err[8];
    roots[0] = complex<IkReal>(1,0);
    roots[1] = complex<IkReal>(0.4,0.9); // any complex number not a root of unity works
    err[0] = 1.0;
    err[1] = 1.0;
    for(int i = 2; i < 8; ++i) {
        roots[i] = roots[i-1]*roots[1];
        err[i] = 1.0;
    }
    for(int step = 0; step < maxsteps; ++step) {
        bool changed = false;
        for(int i = 0; i < 8; ++i) {
            if ( err[i] >= tol ) {
                changed = true;
                // evaluate
                complex<IkReal> x = roots[i] + coeffs[0];
                for(int j = 1; j < 8; ++j) {
                    x = roots[i] * x + coeffs[j];
                }
                for(int j = 0; j < 8; ++j) {
                    if( i != j ) {
                        if( roots[i] != roots[j] ) {
                            x /= (roots[i] - roots[j]);
                        }
                    }
                }
                roots[i] -= x;
                err[i] = abs(x);
            }
        }
        if( !changed ) {
            break;
        }
    }

    numroots = 0;
    bool visited[8] = {false};
    for(int i = 0; i < 8; ++i) {
        if( !visited[i] ) {
            // might be a multiple root, in which case it will have more error than the other roots
            // find any neighboring roots, and take the average
            complex<IkReal> newroot=roots[i];
            int n = 1;
            for(int j = i+1; j < 8; ++j) {
                // care about error in real much more than imaginary
                if( abs(real(roots[i])-real(roots[j])) < tolsqrt && abs(imag(roots[i])-imag(roots[j])) < 0.002 ) {
                    newroot += roots[j];
                    n += 1;
                    visited[j] = true;
                }
            }
            if( n > 1 ) {
                newroot /= n;
            }
            // there are still cases where even the mean is not accurate enough, until a better multi-root algorithm is used, need to use the sqrt
            if( IKabs(imag(newroot)) < tolsqrt ) {
                rawroots[numroots++] = real(newroot);
            }
        }
    }
}
inline void innerfn(IkSolutionListBase<IkReal>& solutions) {
for(int fniter = 0; fniter < 1; ++fniter) {
{
IkReal j0eval[3];
IkReal x182=(rxp0_2*sj5);
IkReal x183=(cj5*rxp1_2);
IkReal x184=((100.0)*cj3);
IkReal x185=(cj3*sj5);
IkReal x186=((1.0)*cj3*cj5);
j0eval[0]=((((-1.0)*r22))+(((100.0)*x183))+(((100.0)*x182)));
j0eval[1]=((IKabs(((((-1.0)*r00*x186))+((r01*x185))+(((-1.0)*px*x184)))))+(IKabs(((((-1.0)*py*x184))+(((-1.0)*r10*x186))+((r11*x185))))));
j0eval[2]=IKsign((x182+x183+(((-0.01)*r22))));
if( IKabs(j0eval[0]) < 0.0000010000000000  || IKabs(j0eval[1]) < 0.0000010000000000  || IKabs(j0eval[2]) < 0.0000010000000000  )
{
{
IkReal j0eval[3];
IkReal x187=(cj3*cj4);
IkReal x188=((1.0)*cj5);
IkReal x189=(cj3*sj4);
IkReal x190=((((-1.0)*cj4*r20*x188))+((cj4*r21*sj5))+(((-1.0)*r22*sj4)));
j0eval[0]=x190;
j0eval[1]=((IKabs(((((-1.0)*r10*x188*x189))+((r12*x187))+((r11*sj5*x189)))))+(IKabs((((r02*x187))+(((-1.0)*r00*x188*x189))+((r01*sj5*x189))))));
j0eval[2]=IKsign(x190);
if( IKabs(j0eval[0]) < 0.0000010000000000  || IKabs(j0eval[1]) < 0.0000010000000000  || IKabs(j0eval[2]) < 0.0000010000000000  )
{
{
IkReal j0eval[3];
IkReal x191=((100.0)*cj4);
IkReal x192=(cj5*rxp0_2);
IkReal x193=(sj3*sj5);
IkReal x194=((0.01)*sj4);
IkReal x195=(r20*sj5);
IkReal x196=(cj5*r21);
IkReal x197=(rxp1_2*sj5);
IkReal x198=((100.0)*sj3);
IkReal x199=(rxp2_2*sj4);
IkReal x200=((1.0)*cj5*sj3);
j0eval[0]=((((-1.0)*x191*x197))+((sj4*x195))+((sj4*x196))+((x191*x192))+(((100.0)*x199)));
j0eval[1]=IKsign((((cj4*x192))+x199+((x194*x196))+((x194*x195))+(((-1.0)*cj4*x197))));
j0eval[2]=((IKabs((((r01*x193))+(((-1.0)*px*x198))+(((-1.0)*r00*x200)))))+(IKabs(((((-1.0)*py*x198))+(((-1.0)*r10*x200))+((r11*x193))))));
if( IKabs(j0eval[0]) < 0.0000010000000000  || IKabs(j0eval[1]) < 0.0000010000000000  || IKabs(j0eval[2]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j3))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0eval[3];
sj3=0;
cj3=1.0;
j3=0;
IkReal x201=((0.01)*cj5);
IkReal x202=((0.01)*sj5);
IkReal x203=(cj5*rxp1_2);
IkReal x204=(rxp0_2*sj5);
j0eval[0]=((((100.0)*x203))+(((100.0)*x204))+(((-1.0)*r22)));
j0eval[1]=((IKabs((((r11*x202))+(((-1.0)*py))+(((-1.0)*r10*x201)))))+(IKabs(((((-1.0)*px))+((r01*x202))+(((-1.0)*r00*x201))))));
j0eval[2]=IKsign((x204+x203+(((-0.01)*r22))));
if( IKabs(j0eval[0]) < 0.0000010000000000  || IKabs(j0eval[1]) < 0.0000010000000000  || IKabs(j0eval[2]) < 0.0000010000000000  )
{
{
IkReal j0eval[3];
sj3=0;
cj3=1.0;
j3=0;
IkReal x205=(sj4*sj5);
IkReal x206=((1.0)*cj5*sj4);
IkReal x207=(((cj4*r21*sj5))+(((-1.0)*cj4*cj5*r20))+(((-1.0)*r22*sj4)));
j0eval[0]=x207;
j0eval[1]=((IKabs((((r11*x205))+(((-1.0)*r10*x206))+((cj4*r12)))))+(IKabs((((r01*x205))+(((-1.0)*r00*x206))+((cj4*r02))))));
j0eval[2]=IKsign(x207);
if( IKabs(j0eval[0]) < 0.0000010000000000  || IKabs(j0eval[1]) < 0.0000010000000000  || IKabs(j0eval[2]) < 0.0000010000000000  )
{
{
IkReal j0eval[3];
sj3=0;
cj3=1.0;
j3=0;
IkReal x208=r20*r20;
IkReal x209=cj5*cj5;
IkReal x210=((1.0)+(((-1.0)*x209*(r21*r21)))+(((-2.0)*cj5*r20*r21*sj5))+((x208*x209))+(((-1.0)*x208)));
j0eval[0]=x210;
j0eval[1]=((IKabs(((((-1.0)*r00*sj5))+(((-1.0)*cj5*r01)))))+(IKabs((((cj5*r11))+((r10*sj5))))));
j0eval[2]=IKsign(x210);
if( IKabs(j0eval[0]) < 0.0000010000000000  || IKabs(j0eval[1]) < 0.0000010000000000  || IKabs(j0eval[2]) < 0.0000010000000000  )
{
continue; // 1 cases reached

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x211=cj5*cj5;
CheckValue<IkReal> x212=IKPowWithIntegerCheck(IKsign(((1.0)+(((r20*r20)*(((-1.0)+x211))))+(((-2.0)*cj5*r20*r21*sj5))+(((-1.0)*x211*(r21*r21))))),-1);
if(!x212.valid){
continue;
}
CheckValue<IkReal> x213 = IKatan2WithCheck(IkReal(((((-1.0)*r00*sj5))+(((-1.0)*cj5*r01)))),IkReal((((cj5*r11))+((r10*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x213.valid){
continue;
}
j0array[0]=((-1.5707963267949)+(((1.5707963267949)*(x212.value)))+(x213.value));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[5];
IkReal x214=IKsin(j0);
IkReal x215=IKcos(j0);
IkReal x216=(sj4*sj5);
IkReal x217=((1.0)*r10);
IkReal x218=((1.0)*r01);
IkReal x219=(r11*x215);
IkReal x220=(sj5*x214);
IkReal x221=(cj5*x215);
IkReal x222=(r01*x214);
IkReal x223=(r12*x215);
IkReal x224=(sj5*x215);
IkReal x225=((1.0)*x214);
IkReal x226=(cj5*r00*x214);
evalcond[0]=((1.0)+((r00*x220))+(((-1.0)*cj5*x219))+(((-1.0)*x217*x224))+((cj5*x222)));
evalcond[1]=((((-1.0)*x218*x221))+(((-1.0)*x217*x220))+(((-1.0)*r00*x224))+(((-1.0)*cj5*r11*x225)));
evalcond[2]=((((-1.0)*py*x215))+(((0.01)*sj5*x219))+(((0.01)*x226))+(((-0.01)*r01*x220))+((px*x214))+(((-0.01)*r10*x221)));
evalcond[3]=(((sj4*x226))+((x216*x219))+(((-1.0)*x214*x216*x218))+(((-1.0)*cj4*r02*x225))+(((-1.0)*sj4*x217*x221))+((cj4*x223)));
evalcond[4]=(((cj4*sj5*x219))+(((-1.0)*sj4*x223))+(((-1.0)*cj4*x217*x221))+((r02*sj4*x214))+(((-1.0)*cj4*x218*x220))+((cj4*x226)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
IkReal x227=((0.894736842105263)*cj4);
IkReal x228=((0.105263157894737)*cj5);
IkReal x229=((0.105263157894737)*sj5);
IkReal x230=(cj5*r20);
IkReal x231=((0.894736842105263)*sj4);
IkReal x232=(r21*sj5);
if( IKabs((((cj0*r00*x228))+(((-1.0)*x227*x232))+(((-1.0)*cj0*r01*x229))+(((10.5263157894737)*py*sj0))+((r10*sj0*x228))+((x227*x230))+(((-1.0)*r11*sj0*x229))+(((10.5263157894737)*cj0*px))+((r22*x231)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((r20*x228))+(((10.5263157894737)*pz))+(((-1.0)*r21*x229))+((x230*x231))+(((-1.0)*x231*x232))+(((-1.0)*r22*x227)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((cj0*r00*x228))+(((-1.0)*x227*x232))+(((-1.0)*cj0*r01*x229))+(((10.5263157894737)*py*sj0))+((r10*sj0*x228))+((x227*x230))+(((-1.0)*r11*sj0*x229))+(((10.5263157894737)*cj0*px))+((r22*x231))))+IKsqr((((r20*x228))+(((10.5263157894737)*pz))+(((-1.0)*r21*x229))+((x230*x231))+(((-1.0)*x231*x232))+(((-1.0)*r22*x227))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j1array[0]=IKatan2((((cj0*r00*x228))+(((-1.0)*x227*x232))+(((-1.0)*cj0*r01*x229))+(((10.5263157894737)*py*sj0))+((r10*sj0*x228))+((x227*x230))+(((-1.0)*r11*sj0*x229))+(((10.5263157894737)*cj0*px))+((r22*x231))), (((r20*x228))+(((10.5263157894737)*pz))+(((-1.0)*r21*x229))+((x230*x231))+(((-1.0)*x231*x232))+(((-1.0)*r22*x227))));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[4];
IkReal x233=((1.0)*pz);
IkReal x234=((0.085)*sj4);
IkReal x235=(cj5*r00);
IkReal x236=(r01*sj5);
IkReal x237=((0.01)*cj0);
IkReal x238=((0.085)*cj4);
IkReal x239=(cj5*r20);
IkReal x240=(r21*sj5);
IkReal x241=(py*sj0);
IkReal x242=(r12*sj0);
IkReal x243=(cj0*px);
IkReal x244=((0.095)*(IKcos(j1)));
IkReal x245=((0.01)*x240);
IkReal x246=((0.01)*x239);
IkReal x247=((0.095)*(IKsin(j1)));
IkReal x248=(cj0*x238);
IkReal x249=(cj5*r10*sj0);
IkReal x250=(r11*sj0*sj5);
IkReal x251=((0.01)*x250);
IkReal x252=(x236*x237);
IkReal x253=((0.01)*x249);
IkReal x254=(x235*x237);
IkReal x255=(x233+x246);
IkReal x256=(x245+x244);
IkReal x257=(x254+x253);
IkReal x258=(x251+x252+x247);
evalcond[0]=(((x234*x240))+x256+(((-1.0)*x234*x239))+(((-1.0)*x255))+((r22*x238)));
evalcond[1]=(x257+x243+x241+(((-1.0)*x238*x240))+((x238*x239))+(((-1.0)*x258))+((r22*x234)));
evalcond[2]=(((x234*x242))+((x238*x249))+(((-1.0)*x236*x248))+x256+(((-1.0)*x238*x250))+((cj0*r02*x234))+((x235*x248))+(((-1.0)*x255)));
evalcond[3]=((((-1.0)*x241))+(((-1.0)*x243))+((r02*x248))+((x238*x242))+((cj0*x234*x236))+(((-1.0)*x234*x249))+x258+(((-1.0)*cj0*x234*x235))+((x234*x250))+(((-1.0)*x257)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x259=(cj1*r22);
IkReal x260=(sj1*sj4);
IkReal x261=(cj5*r20);
IkReal x262=((1.0)*sj4);
IkReal x263=(r21*sj5);
IkReal x264=(cj4*sj1);
IkReal x265=(cj1*x263);
IkReal x266=((1.0)*r22*sj1);
if( IKabs(((((-1.0)*r22*x264))+((x260*x261))+((cj4*x265))+(((-1.0)*cj1*cj4*x261))+(((-1.0)*x259*x262))+(((-1.0)*x260*x263)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*r22*x260))+((x263*x264))+(((-1.0)*cj1*x261*x262))+((cj4*x259))+((sj4*x265))+(((-1.0)*x261*x264)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*r22*x264))+((x260*x261))+((cj4*x265))+(((-1.0)*cj1*cj4*x261))+(((-1.0)*x259*x262))+(((-1.0)*x260*x263))))+IKsqr(((((-1.0)*r22*x260))+((x263*x264))+(((-1.0)*cj1*x261*x262))+((cj4*x259))+((sj4*x265))+(((-1.0)*x261*x264))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j2array[0]=IKatan2(((((-1.0)*r22*x264))+((x260*x261))+((cj4*x265))+(((-1.0)*cj1*cj4*x261))+(((-1.0)*x259*x262))+(((-1.0)*x260*x263))), ((((-1.0)*r22*x260))+((x263*x264))+(((-1.0)*cj1*x261*x262))+((cj4*x259))+((sj4*x265))+(((-1.0)*x261*x264))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[6];
IkReal x267=IKsin(j2);
IkReal x268=IKcos(j2);
IkReal x269=(sj0*sj4);
IkReal x270=(cj5*r10);
IkReal x271=(r11*sj5);
IkReal x272=((0.01)*sj0);
IkReal x273=((0.01)*sj5);
IkReal x274=(cj0*r01);
IkReal x275=((1.0)*cj4);
IkReal x276=(sj4*sj5);
IkReal x277=((1.0)*cj0);
IkReal x278=(cj5*r20);
IkReal x279=(cj4*sj0);
IkReal x280=(cj1*x268);
IkReal x281=(sj1*x267);
IkReal x282=(cj1*x267);
IkReal x283=(cj0*cj5*r00);
IkReal x284=(sj1*x268);
IkReal x285=((1.0)*x281);
evalcond[0]=(((cj4*x278))+((r22*sj4))+(((-1.0)*r21*sj5*x275))+x284+x282);
evalcond[1]=((((-0.095)*cj1))+(((-0.085)*x280))+pz+(((0.085)*x281))+(((-1.0)*r21*x273))+(((0.01)*x278)));
evalcond[2]=((((-1.0)*r21*x276))+x280+(((-1.0)*r22*x275))+(((-1.0)*x285))+((sj4*x278)));
evalcond[3]=((((-1.0)*cj5*r00*sj4*x277))+((x274*x276))+((cj0*cj4*r02))+((r12*x279))+(((-1.0)*x282))+(((-1.0)*x284))+(((-1.0)*x269*x270))+((x269*x271)));
evalcond[4]=(((x273*x274))+((x271*x272))+(((0.095)*sj1))+(((-0.01)*x283))+(((0.085)*x284))+(((0.085)*x282))+(((-1.0)*py*sj0))+(((-1.0)*px*x277))+(((-1.0)*x270*x272)));
evalcond[5]=(((x271*x279))+(((-1.0)*r02*sj4*x277))+(((-1.0)*sj0*x270*x275))+(((-1.0)*r12*x269))+x280+((cj4*sj5*x274))+(((-1.0)*x285))+(((-1.0)*x275*x283)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
}
}
}
}

}

}

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x286=(sj4*sj5);
IkReal x287=((1.0)*cj5*sj4);
CheckValue<IkReal> x288=IKPowWithIntegerCheck(IKsign((((cj4*r21*sj5))+(((-1.0)*cj4*cj5*r20))+(((-1.0)*r22*sj4)))),-1);
if(!x288.valid){
continue;
}
CheckValue<IkReal> x289 = IKatan2WithCheck(IkReal(((((-1.0)*r10*x287))+((r11*x286))+((cj4*r12)))),IkReal((((r01*x286))+(((-1.0)*r00*x287))+((cj4*r02)))),IKFAST_ATAN2_MAGTHRESH);
if(!x289.valid){
continue;
}
j0array[0]=((-1.5707963267949)+(((1.5707963267949)*(x288.value)))+(x289.value));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[5];
IkReal x290=IKsin(j0);
IkReal x291=IKcos(j0);
IkReal x292=(sj4*sj5);
IkReal x293=((1.0)*r10);
IkReal x294=((1.0)*r01);
IkReal x295=(r11*x291);
IkReal x296=(sj5*x290);
IkReal x297=(cj5*x291);
IkReal x298=(r01*x290);
IkReal x299=(r12*x291);
IkReal x300=(sj5*x291);
IkReal x301=((1.0)*x290);
IkReal x302=(cj5*r00*x290);
evalcond[0]=((1.0)+(((-1.0)*cj5*x295))+((cj5*x298))+((r00*x296))+(((-1.0)*x293*x300)));
evalcond[1]=((((-1.0)*cj5*r11*x301))+(((-1.0)*x293*x296))+(((-1.0)*r00*x300))+(((-1.0)*x294*x297)));
evalcond[2]=((((-1.0)*py*x291))+((px*x290))+(((-0.01)*r10*x297))+(((0.01)*sj5*x295))+(((-0.01)*r01*x296))+(((0.01)*x302)));
evalcond[3]=(((cj4*x299))+(((-1.0)*cj4*r02*x301))+(((-1.0)*sj4*x293*x297))+(((-1.0)*x290*x292*x294))+((sj4*x302))+((x292*x295)));
evalcond[4]=(((r02*sj4*x290))+(((-1.0)*sj4*x299))+(((-1.0)*cj4*x293*x297))+(((-1.0)*cj4*x294*x296))+((cj4*sj5*x295))+((cj4*x302)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
IkReal x303=((0.894736842105263)*cj4);
IkReal x304=((0.105263157894737)*cj5);
IkReal x305=((0.105263157894737)*sj5);
IkReal x306=(cj5*r20);
IkReal x307=((0.894736842105263)*sj4);
IkReal x308=(r21*sj5);
if( IKabs((((r22*x307))+((cj0*r00*x304))+(((-1.0)*x303*x308))+((x303*x306))+(((-1.0)*cj0*r01*x305))+(((10.5263157894737)*py*sj0))+(((-1.0)*r11*sj0*x305))+((r10*sj0*x304))+(((10.5263157894737)*cj0*px)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*r22*x303))+(((-1.0)*r21*x305))+(((10.5263157894737)*pz))+((r20*x304))+(((-1.0)*x307*x308))+((x306*x307)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((r22*x307))+((cj0*r00*x304))+(((-1.0)*x303*x308))+((x303*x306))+(((-1.0)*cj0*r01*x305))+(((10.5263157894737)*py*sj0))+(((-1.0)*r11*sj0*x305))+((r10*sj0*x304))+(((10.5263157894737)*cj0*px))))+IKsqr(((((-1.0)*r22*x303))+(((-1.0)*r21*x305))+(((10.5263157894737)*pz))+((r20*x304))+(((-1.0)*x307*x308))+((x306*x307))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j1array[0]=IKatan2((((r22*x307))+((cj0*r00*x304))+(((-1.0)*x303*x308))+((x303*x306))+(((-1.0)*cj0*r01*x305))+(((10.5263157894737)*py*sj0))+(((-1.0)*r11*sj0*x305))+((r10*sj0*x304))+(((10.5263157894737)*cj0*px))), ((((-1.0)*r22*x303))+(((-1.0)*r21*x305))+(((10.5263157894737)*pz))+((r20*x304))+(((-1.0)*x307*x308))+((x306*x307))));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[4];
IkReal x309=((1.0)*pz);
IkReal x310=((0.085)*sj4);
IkReal x311=(cj5*r00);
IkReal x312=(r01*sj5);
IkReal x313=((0.01)*cj0);
IkReal x314=((0.085)*cj4);
IkReal x315=(cj5*r20);
IkReal x316=(r21*sj5);
IkReal x317=(py*sj0);
IkReal x318=(r12*sj0);
IkReal x319=(cj0*px);
IkReal x320=((0.095)*(IKcos(j1)));
IkReal x321=((0.01)*x316);
IkReal x322=((0.01)*x315);
IkReal x323=((0.095)*(IKsin(j1)));
IkReal x324=(cj0*x314);
IkReal x325=(cj5*r10*sj0);
IkReal x326=(r11*sj0*sj5);
IkReal x327=((0.01)*x326);
IkReal x328=(x312*x313);
IkReal x329=((0.01)*x325);
IkReal x330=(x311*x313);
IkReal x331=(x309+x322);
IkReal x332=(x320+x321);
IkReal x333=(x330+x329);
IkReal x334=(x327+x323+x328);
evalcond[0]=(((x310*x316))+(((-1.0)*x310*x315))+x332+(((-1.0)*x331))+((r22*x314)));
evalcond[1]=(x333+x319+x317+(((-1.0)*x334))+(((-1.0)*x314*x316))+((x314*x315))+((r22*x310)));
evalcond[2]=(((x310*x318))+(((-1.0)*x314*x326))+x332+((x314*x325))+(((-1.0)*x331))+((x311*x324))+((cj0*r02*x310))+(((-1.0)*x312*x324)));
evalcond[3]=(((r02*x324))+((x310*x326))+x334+(((-1.0)*x333))+(((-1.0)*cj0*x310*x311))+((cj0*x310*x312))+(((-1.0)*x317))+(((-1.0)*x319))+(((-1.0)*x310*x325))+((x314*x318)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x335=(cj1*r22);
IkReal x336=(sj1*sj4);
IkReal x337=(cj5*r20);
IkReal x338=((1.0)*sj4);
IkReal x339=(r21*sj5);
IkReal x340=(cj4*sj1);
IkReal x341=(cj1*x339);
IkReal x342=((1.0)*r22*sj1);
if( IKabs((((x336*x337))+(((-1.0)*cj1*cj4*x337))+((cj4*x341))+(((-1.0)*x336*x339))+(((-1.0)*r22*x340))+(((-1.0)*x335*x338)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*cj1*x337*x338))+(((-1.0)*x337*x340))+((sj4*x341))+((cj4*x335))+(((-1.0)*r22*x336))+((x339*x340)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((x336*x337))+(((-1.0)*cj1*cj4*x337))+((cj4*x341))+(((-1.0)*x336*x339))+(((-1.0)*r22*x340))+(((-1.0)*x335*x338))))+IKsqr(((((-1.0)*cj1*x337*x338))+(((-1.0)*x337*x340))+((sj4*x341))+((cj4*x335))+(((-1.0)*r22*x336))+((x339*x340))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j2array[0]=IKatan2((((x336*x337))+(((-1.0)*cj1*cj4*x337))+((cj4*x341))+(((-1.0)*x336*x339))+(((-1.0)*r22*x340))+(((-1.0)*x335*x338))), ((((-1.0)*cj1*x337*x338))+(((-1.0)*x337*x340))+((sj4*x341))+((cj4*x335))+(((-1.0)*r22*x336))+((x339*x340))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[6];
IkReal x343=IKsin(j2);
IkReal x344=IKcos(j2);
IkReal x345=(sj0*sj4);
IkReal x346=(cj5*r10);
IkReal x347=(r11*sj5);
IkReal x348=((0.01)*sj0);
IkReal x349=((0.01)*sj5);
IkReal x350=(cj0*r01);
IkReal x351=((1.0)*cj4);
IkReal x352=(sj4*sj5);
IkReal x353=((1.0)*cj0);
IkReal x354=(cj5*r20);
IkReal x355=(cj4*sj0);
IkReal x356=(cj1*x344);
IkReal x357=(sj1*x343);
IkReal x358=(cj1*x343);
IkReal x359=(cj0*cj5*r00);
IkReal x360=(sj1*x344);
IkReal x361=((1.0)*x357);
evalcond[0]=(((r22*sj4))+((cj4*x354))+x358+x360+(((-1.0)*r21*sj5*x351)));
evalcond[1]=((((-0.095)*cj1))+(((-0.085)*x356))+pz+(((0.085)*x357))+(((0.01)*x354))+(((-1.0)*r21*x349)));
evalcond[2]=(((sj4*x354))+(((-1.0)*r22*x351))+(((-1.0)*x361))+x356+(((-1.0)*r21*x352)));
evalcond[3]=((((-1.0)*cj5*r00*sj4*x353))+(((-1.0)*x360))+((r12*x355))+((cj0*cj4*r02))+(((-1.0)*x358))+((x345*x347))+((x350*x352))+(((-1.0)*x345*x346)));
evalcond[4]=((((0.095)*sj1))+(((-1.0)*px*x353))+(((0.085)*x360))+((x347*x348))+((x349*x350))+(((-1.0)*x346*x348))+(((-1.0)*py*sj0))+(((0.085)*x358))+(((-0.01)*x359)));
evalcond[5]=(((cj4*sj5*x350))+(((-1.0)*x361))+(((-1.0)*r12*x345))+(((-1.0)*r02*sj4*x353))+x356+((x347*x355))+(((-1.0)*x351*x359))+(((-1.0)*sj0*x346*x351)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
}
}
}
}

}

}

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x362=((0.01)*cj5);
IkReal x363=((0.01)*sj5);
CheckValue<IkReal> x364=IKPowWithIntegerCheck(IKsign((((cj5*rxp1_2))+(((-0.01)*r22))+((rxp0_2*sj5)))),-1);
if(!x364.valid){
continue;
}
CheckValue<IkReal> x365 = IKatan2WithCheck(IkReal(((((-1.0)*r10*x362))+(((-1.0)*py))+((r11*x363)))),IkReal((((r01*x363))+(((-1.0)*r00*x362))+(((-1.0)*px)))),IKFAST_ATAN2_MAGTHRESH);
if(!x365.valid){
continue;
}
j0array[0]=((-1.5707963267949)+(((1.5707963267949)*(x364.value)))+(x365.value));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[5];
IkReal x366=IKsin(j0);
IkReal x367=IKcos(j0);
IkReal x368=(sj4*sj5);
IkReal x369=((1.0)*r10);
IkReal x370=((1.0)*r01);
IkReal x371=(r11*x367);
IkReal x372=(sj5*x366);
IkReal x373=(cj5*x367);
IkReal x374=(r01*x366);
IkReal x375=(r12*x367);
IkReal x376=(sj5*x367);
IkReal x377=((1.0)*x366);
IkReal x378=(cj5*r00*x366);
evalcond[0]=((1.0)+((r00*x372))+((cj5*x374))+(((-1.0)*cj5*x371))+(((-1.0)*x369*x376)));
evalcond[1]=((((-1.0)*x370*x373))+(((-1.0)*r00*x376))+(((-1.0)*x369*x372))+(((-1.0)*cj5*r11*x377)));
evalcond[2]=((((-1.0)*py*x367))+(((0.01)*sj5*x371))+(((-0.01)*r01*x372))+(((0.01)*x378))+((px*x366))+(((-0.01)*r10*x373)));
evalcond[3]=(((sj4*x378))+(((-1.0)*sj4*x369*x373))+((cj4*x375))+(((-1.0)*cj4*r02*x377))+((x368*x371))+(((-1.0)*x366*x368*x370)));
evalcond[4]=(((cj4*sj5*x371))+(((-1.0)*cj4*x370*x372))+((r02*sj4*x366))+(((-1.0)*cj4*x369*x373))+((cj4*x378))+(((-1.0)*sj4*x375)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
IkReal x379=((0.894736842105263)*cj4);
IkReal x380=((0.105263157894737)*cj5);
IkReal x381=((0.105263157894737)*sj5);
IkReal x382=(cj5*r20);
IkReal x383=((0.894736842105263)*sj4);
IkReal x384=(r21*sj5);
if( IKabs((((r22*x383))+(((-1.0)*x379*x384))+((r10*sj0*x380))+(((-1.0)*r11*sj0*x381))+(((10.5263157894737)*py*sj0))+((x379*x382))+(((-1.0)*cj0*r01*x381))+((cj0*r00*x380))+(((10.5263157894737)*cj0*px)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((10.5263157894737)*pz))+((r20*x380))+((x382*x383))+(((-1.0)*r21*x381))+(((-1.0)*r22*x379))+(((-1.0)*x383*x384)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((r22*x383))+(((-1.0)*x379*x384))+((r10*sj0*x380))+(((-1.0)*r11*sj0*x381))+(((10.5263157894737)*py*sj0))+((x379*x382))+(((-1.0)*cj0*r01*x381))+((cj0*r00*x380))+(((10.5263157894737)*cj0*px))))+IKsqr(((((10.5263157894737)*pz))+((r20*x380))+((x382*x383))+(((-1.0)*r21*x381))+(((-1.0)*r22*x379))+(((-1.0)*x383*x384))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j1array[0]=IKatan2((((r22*x383))+(((-1.0)*x379*x384))+((r10*sj0*x380))+(((-1.0)*r11*sj0*x381))+(((10.5263157894737)*py*sj0))+((x379*x382))+(((-1.0)*cj0*r01*x381))+((cj0*r00*x380))+(((10.5263157894737)*cj0*px))), ((((10.5263157894737)*pz))+((r20*x380))+((x382*x383))+(((-1.0)*r21*x381))+(((-1.0)*r22*x379))+(((-1.0)*x383*x384))));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[4];
IkReal x385=((1.0)*pz);
IkReal x386=((0.085)*sj4);
IkReal x387=(cj5*r00);
IkReal x388=(r01*sj5);
IkReal x389=((0.01)*cj0);
IkReal x390=((0.085)*cj4);
IkReal x391=(cj5*r20);
IkReal x392=(r21*sj5);
IkReal x393=(py*sj0);
IkReal x394=(r12*sj0);
IkReal x395=(cj0*px);
IkReal x396=((0.095)*(IKcos(j1)));
IkReal x397=((0.01)*x392);
IkReal x398=((0.01)*x391);
IkReal x399=((0.095)*(IKsin(j1)));
IkReal x400=(cj0*x390);
IkReal x401=(cj5*r10*sj0);
IkReal x402=(r11*sj0*sj5);
IkReal x403=((0.01)*x402);
IkReal x404=(x388*x389);
IkReal x405=((0.01)*x401);
IkReal x406=(x387*x389);
IkReal x407=(x385+x398);
IkReal x408=(x397+x396);
IkReal x409=(x405+x406);
IkReal x410=(x399+x403+x404);
evalcond[0]=((((-1.0)*x386*x391))+x408+((r22*x390))+((x386*x392))+(((-1.0)*x407)));
evalcond[1]=(((r22*x386))+x395+x393+x409+(((-1.0)*x390*x392))+((x390*x391))+(((-1.0)*x410)));
evalcond[2]=(((x390*x401))+((x387*x400))+((cj0*r02*x386))+x408+(((-1.0)*x388*x400))+((x386*x394))+(((-1.0)*x407))+(((-1.0)*x390*x402)));
evalcond[3]=((((-1.0)*x393))+(((-1.0)*x395))+(((-1.0)*cj0*x386*x387))+((x386*x402))+x410+(((-1.0)*x386*x401))+((x390*x394))+(((-1.0)*x409))+((r02*x400))+((cj0*x386*x388)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x411=(cj1*r22);
IkReal x412=(sj1*sj4);
IkReal x413=(cj5*r20);
IkReal x414=((1.0)*sj4);
IkReal x415=(r21*sj5);
IkReal x416=(cj4*sj1);
IkReal x417=(cj1*x415);
IkReal x418=((1.0)*r22*sj1);
if( IKabs(((((-1.0)*cj1*cj4*x413))+((cj4*x417))+(((-1.0)*x412*x415))+(((-1.0)*r22*x416))+(((-1.0)*x411*x414))+((x412*x413)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((x415*x416))+(((-1.0)*x413*x416))+((cj4*x411))+(((-1.0)*cj1*x413*x414))+(((-1.0)*r22*x412))+((sj4*x417)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*cj1*cj4*x413))+((cj4*x417))+(((-1.0)*x412*x415))+(((-1.0)*r22*x416))+(((-1.0)*x411*x414))+((x412*x413))))+IKsqr((((x415*x416))+(((-1.0)*x413*x416))+((cj4*x411))+(((-1.0)*cj1*x413*x414))+(((-1.0)*r22*x412))+((sj4*x417))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j2array[0]=IKatan2(((((-1.0)*cj1*cj4*x413))+((cj4*x417))+(((-1.0)*x412*x415))+(((-1.0)*r22*x416))+(((-1.0)*x411*x414))+((x412*x413))), (((x415*x416))+(((-1.0)*x413*x416))+((cj4*x411))+(((-1.0)*cj1*x413*x414))+(((-1.0)*r22*x412))+((sj4*x417))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[6];
IkReal x419=IKsin(j2);
IkReal x420=IKcos(j2);
IkReal x421=(sj0*sj4);
IkReal x422=(cj5*r10);
IkReal x423=(r11*sj5);
IkReal x424=((0.01)*sj0);
IkReal x425=((0.01)*sj5);
IkReal x426=(cj0*r01);
IkReal x427=((1.0)*cj4);
IkReal x428=(sj4*sj5);
IkReal x429=((1.0)*cj0);
IkReal x430=(cj5*r20);
IkReal x431=(cj4*sj0);
IkReal x432=(cj1*x420);
IkReal x433=(sj1*x419);
IkReal x434=(cj1*x419);
IkReal x435=(cj0*cj5*r00);
IkReal x436=(sj1*x420);
IkReal x437=((1.0)*x433);
evalcond[0]=(((r22*sj4))+((cj4*x430))+x434+x436+(((-1.0)*r21*sj5*x427)));
evalcond[1]=((((-0.095)*cj1))+(((-0.085)*x432))+(((-1.0)*r21*x425))+pz+(((0.085)*x433))+(((0.01)*x430)));
evalcond[2]=((((-1.0)*r21*x428))+((sj4*x430))+(((-1.0)*x437))+x432+(((-1.0)*r22*x427)));
evalcond[3]=(((r12*x431))+((x426*x428))+(((-1.0)*x434))+(((-1.0)*x436))+(((-1.0)*x421*x422))+(((-1.0)*cj5*r00*sj4*x429))+((cj0*cj4*r02))+((x421*x423)));
evalcond[4]=((((-1.0)*x422*x424))+((x425*x426))+(((-1.0)*px*x429))+(((0.095)*sj1))+(((-1.0)*py*sj0))+((x423*x424))+(((-0.01)*x435))+(((0.085)*x434))+(((0.085)*x436)));
evalcond[5]=((((-1.0)*r12*x421))+(((-1.0)*x437))+(((-1.0)*x427*x435))+x432+((x423*x431))+(((-1.0)*r02*sj4*x429))+((cj4*sj5*x426))+(((-1.0)*sj0*x422*x427)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
}
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
IkReal x438=((0.01)*cj5);
IkReal x439=((0.01)*sj5);
IkReal x440=((((-1.0)*cj5*rxp1_2))+(((-1.0)*rxp0_2*sj5))+(((0.01)*r22)));
j0eval[0]=x440;
j0eval[1]=((IKabs(((((-1.0)*px))+(((-1.0)*r00*x438))+((r01*x439)))))+(IKabs(((((-1.0)*r10*x438))+(((-1.0)*py))+((r11*x439))))));
j0eval[2]=IKsign(x440);
if( IKabs(j0eval[0]) < 0.0000010000000000  || IKabs(j0eval[1]) < 0.0000010000000000  || IKabs(j0eval[2]) < 0.0000010000000000  )
{
{
IkReal j0eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
IkReal x441=(sj4*sj5);
IkReal x442=((1.0)*cj5*sj4);
IkReal x443=(((r22*sj4))+(((-1.0)*cj4*r21*sj5))+((cj4*cj5*r20)));
j0eval[0]=x443;
j0eval[1]=IKsign(x443);
j0eval[2]=((IKabs((((r01*x441))+(((-1.0)*r00*x442))+((cj4*r02)))))+(IKabs((((r11*x441))+((cj4*r12))+(((-1.0)*r10*x442))))));
if( IKabs(j0eval[0]) < 0.0000010000000000  || IKabs(j0eval[1]) < 0.0000010000000000  || IKabs(j0eval[2]) < 0.0000010000000000  )
{
{
IkReal j0eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
IkReal x444=((1.0)*cj5);
IkReal x445=(cj4*sj5);
IkReal x446=((1.0)*sj4);
IkReal x447=(((r21*sj4*sj5))+((cj4*r22))+(((-1.0)*r20*sj4*x444)));
j0eval[0]=x447;
j0eval[1]=IKsign(x447);
j0eval[2]=((IKabs(((((-1.0)*cj4*r00*x444))+(((-1.0)*r02*x446))+((r01*x445)))))+(IKabs(((((-1.0)*r12*x446))+(((-1.0)*cj4*r10*x444))+((r11*x445))))));
if( IKabs(j0eval[0]) < 0.0000010000000000  || IKabs(j0eval[1]) < 0.0000010000000000  || IKabs(j0eval[2]) < 0.0000010000000000  )
{
continue; // 1 cases reached

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x448=((1.0)*cj5);
IkReal x449=(cj4*sj5);
IkReal x450=((1.0)*sj4);
CheckValue<IkReal> x451=IKPowWithIntegerCheck(IKsign((((r21*sj4*sj5))+((cj4*r22))+(((-1.0)*r20*sj4*x448)))),-1);
if(!x451.valid){
continue;
}
CheckValue<IkReal> x452 = IKatan2WithCheck(IkReal(((((-1.0)*cj4*r10*x448))+(((-1.0)*r12*x450))+((r11*x449)))),IkReal(((((-1.0)*cj4*r00*x448))+((r01*x449))+(((-1.0)*r02*x450)))),IKFAST_ATAN2_MAGTHRESH);
if(!x452.valid){
continue;
}
j0array[0]=((-1.5707963267949)+(((1.5707963267949)*(x451.value)))+(x452.value));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[5];
IkReal x453=IKsin(j0);
IkReal x454=IKcos(j0);
IkReal x455=(sj4*sj5);
IkReal x456=((1.0)*r10);
IkReal x457=((1.0)*r01);
IkReal x458=(r11*x454);
IkReal x459=(sj5*x453);
IkReal x460=(cj5*x454);
IkReal x461=(r01*x453);
IkReal x462=(r12*x454);
IkReal x463=(sj5*x454);
IkReal x464=((1.0)*x453);
IkReal x465=(cj5*r00*x453);
evalcond[0]=((-1.0)+((cj5*x461))+(((-1.0)*x456*x463))+(((-1.0)*cj5*x458))+((r00*x459)));
evalcond[1]=((((-1.0)*cj5*r11*x464))+(((-1.0)*x456*x459))+(((-1.0)*r00*x463))+(((-1.0)*x457*x460)));
evalcond[2]=((((0.01)*sj5*x458))+(((-0.01)*r01*x459))+(((-0.01)*r10*x460))+(((0.01)*x465))+(((-1.0)*py*x454))+((px*x453)));
evalcond[3]=((((-1.0)*sj4*x456*x460))+(((-1.0)*cj4*r02*x464))+((x455*x458))+((cj4*x462))+(((-1.0)*x453*x455*x457))+((sj4*x465)));
evalcond[4]=((((-1.0)*sj4*x462))+((cj4*x465))+(((-1.0)*cj4*x456*x460))+((cj4*sj5*x458))+(((-1.0)*cj4*x457*x459))+((r02*sj4*x453)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
IkReal x466=((0.894736842105263)*cj4);
IkReal x467=((0.105263157894737)*cj5);
IkReal x468=((0.105263157894737)*sj5);
IkReal x469=(cj5*r20);
IkReal x470=((0.894736842105263)*sj4);
IkReal x471=(r21*sj5);
if( IKabs(((((-1.0)*x466*x469))+((r10*sj0*x467))+((x466*x471))+(((-1.0)*r11*sj0*x468))+(((-1.0)*cj0*r01*x468))+(((10.5263157894737)*py*sj0))+((cj0*r00*x467))+(((-1.0)*r22*x470))+(((10.5263157894737)*cj0*px)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((x469*x470))+(((10.5263157894737)*pz))+((r20*x467))+(((-1.0)*r22*x466))+(((-1.0)*r21*x468))+(((-1.0)*x470*x471)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*x466*x469))+((r10*sj0*x467))+((x466*x471))+(((-1.0)*r11*sj0*x468))+(((-1.0)*cj0*r01*x468))+(((10.5263157894737)*py*sj0))+((cj0*r00*x467))+(((-1.0)*r22*x470))+(((10.5263157894737)*cj0*px))))+IKsqr((((x469*x470))+(((10.5263157894737)*pz))+((r20*x467))+(((-1.0)*r22*x466))+(((-1.0)*r21*x468))+(((-1.0)*x470*x471))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j1array[0]=IKatan2(((((-1.0)*x466*x469))+((r10*sj0*x467))+((x466*x471))+(((-1.0)*r11*sj0*x468))+(((-1.0)*cj0*r01*x468))+(((10.5263157894737)*py*sj0))+((cj0*r00*x467))+(((-1.0)*r22*x470))+(((10.5263157894737)*cj0*px))), (((x469*x470))+(((10.5263157894737)*pz))+((r20*x467))+(((-1.0)*r22*x466))+(((-1.0)*r21*x468))+(((-1.0)*x470*x471))));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[4];
IkReal x472=((0.085)*sj4);
IkReal x473=(cj5*r00);
IkReal x474=(r01*sj5);
IkReal x475=((0.01)*cj0);
IkReal x476=((0.085)*cj4);
IkReal x477=(cj5*r20);
IkReal x478=(r21*sj5);
IkReal x479=(r12*sj0);
IkReal x480=((0.01)*x477);
IkReal x481=((0.095)*(IKcos(j1)));
IkReal x482=((0.01)*x478);
IkReal x483=((0.095)*(IKsin(j1)));
IkReal x484=((1.0)*cj0*px);
IkReal x485=((1.0)*py*sj0);
IkReal x486=(cj0*x476);
IkReal x487=(cj5*r10*sj0);
IkReal x488=(r11*sj0*sj5);
IkReal x489=((0.01)*x488);
IkReal x490=(x474*x475);
IkReal x491=((0.01)*x487);
IkReal x492=(x473*x475);
IkReal x493=(x481+x482);
IkReal x494=(x489+x483+x490);
IkReal x495=(x485+x484+x492+x491);
evalcond[0]=(((x472*x478))+(((-1.0)*x480))+(((-1.0)*x472*x477))+(((-1.0)*pz))+x493+((r22*x476)));
evalcond[1]=((((-1.0)*x495))+(((-1.0)*x476*x478))+x494+((r22*x472))+((x476*x477)));
evalcond[2]=((((-1.0)*x476*x488))+((x472*x479))+(((-1.0)*x493))+((x476*x487))+(((-1.0)*x474*x486))+x480+pz+((cj0*r02*x472))+((x473*x486)));
evalcond[3]=((((-1.0)*x495))+(((-1.0)*cj0*x472*x473))+((r02*x486))+((cj0*x472*x474))+x494+((x476*x479))+((x472*x488))+(((-1.0)*x472*x487)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x496=((1.0)*cj4);
IkReal x497=(r22*sj1);
IkReal x498=(cj1*r22);
IkReal x499=(sj1*sj4);
IkReal x500=(cj5*r20);
IkReal x501=(r21*sj5);
IkReal x502=(cj1*x501);
if( IKabs((((sj4*x498))+((cj1*cj4*x500))+(((-1.0)*x496*x497))+(((-1.0)*x496*x502))+((x499*x500))+(((-1.0)*x499*x501)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((sj4*x497))+(((-1.0)*cj1*sj4*x500))+((cj4*x498))+(((-1.0)*sj1*x496*x501))+((cj4*sj1*x500))+((sj4*x502)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((sj4*x498))+((cj1*cj4*x500))+(((-1.0)*x496*x497))+(((-1.0)*x496*x502))+((x499*x500))+(((-1.0)*x499*x501))))+IKsqr((((sj4*x497))+(((-1.0)*cj1*sj4*x500))+((cj4*x498))+(((-1.0)*sj1*x496*x501))+((cj4*sj1*x500))+((sj4*x502))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j2array[0]=IKatan2((((sj4*x498))+((cj1*cj4*x500))+(((-1.0)*x496*x497))+(((-1.0)*x496*x502))+((x499*x500))+(((-1.0)*x499*x501))), (((sj4*x497))+(((-1.0)*cj1*sj4*x500))+((cj4*x498))+(((-1.0)*sj1*x496*x501))+((cj4*sj1*x500))+((sj4*x502))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[6];
IkReal x503=IKcos(j2);
IkReal x504=IKsin(j2);
IkReal x505=(sj0*sj4);
IkReal x506=(cj5*r10);
IkReal x507=(r11*sj5);
IkReal x508=((0.01)*sj0);
IkReal x509=((0.01)*sj5);
IkReal x510=(cj0*r01);
IkReal x511=((1.0)*cj4);
IkReal x512=(sj4*sj5);
IkReal x513=((1.0)*cj0);
IkReal x514=(cj5*r20);
IkReal x515=(cj4*sj0);
IkReal x516=(cj1*x503);
IkReal x517=(sj1*x504);
IkReal x518=(cj0*cj5*r00);
IkReal x519=(sj1*x503);
IkReal x520=(cj1*x504);
IkReal x521=((1.0)*x519);
IkReal x522=((1.0)*x520);
IkReal x523=(x522+x521);
evalcond[0]=((((-0.095)*cj1))+(((0.085)*x517))+(((-0.085)*x516))+pz+(((0.01)*x514))+(((-1.0)*r21*x509)));
evalcond[1]=((((-1.0)*r22*x511))+((sj4*x514))+(((-1.0)*x517))+x516+(((-1.0)*r21*x512)));
evalcond[2]=(((cj4*x514))+((r22*sj4))+(((-1.0)*x523))+(((-1.0)*r21*sj5*x511)));
evalcond[3]=(((x510*x512))+((x505*x507))+((cj0*cj4*r02))+(((-1.0)*x523))+(((-1.0)*cj5*r00*sj4*x513))+(((-1.0)*x505*x506))+((r12*x515)));
evalcond[4]=((((-1.0)*x506*x508))+(((0.095)*sj1))+(((0.085)*x519))+(((-0.01)*x518))+(((-1.0)*px*x513))+((x507*x508))+(((-1.0)*py*sj0))+((x509*x510))+(((0.085)*x520)));
evalcond[5]=((((-1.0)*x511*x518))+((x507*x515))+(((-1.0)*r02*sj4*x513))+(((-1.0)*x516))+x517+(((-1.0)*sj0*x506*x511))+(((-1.0)*r12*x505))+((cj4*sj5*x510)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
}
}
}
}

}

}

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x524=(sj4*sj5);
IkReal x525=((1.0)*cj5*sj4);
CheckValue<IkReal> x526=IKPowWithIntegerCheck(IKsign((((r22*sj4))+(((-1.0)*cj4*r21*sj5))+((cj4*cj5*r20)))),-1);
if(!x526.valid){
continue;
}
CheckValue<IkReal> x527 = IKatan2WithCheck(IkReal((((r11*x524))+(((-1.0)*r10*x525))+((cj4*r12)))),IkReal(((((-1.0)*r00*x525))+((r01*x524))+((cj4*r02)))),IKFAST_ATAN2_MAGTHRESH);
if(!x527.valid){
continue;
}
j0array[0]=((-1.5707963267949)+(((1.5707963267949)*(x526.value)))+(x527.value));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[5];
IkReal x528=IKsin(j0);
IkReal x529=IKcos(j0);
IkReal x530=(sj4*sj5);
IkReal x531=((1.0)*r10);
IkReal x532=((1.0)*r01);
IkReal x533=(r11*x529);
IkReal x534=(sj5*x528);
IkReal x535=(cj5*x529);
IkReal x536=(r01*x528);
IkReal x537=(r12*x529);
IkReal x538=(sj5*x529);
IkReal x539=((1.0)*x528);
IkReal x540=(cj5*r00*x528);
evalcond[0]=((-1.0)+(((-1.0)*cj5*x533))+((cj5*x536))+(((-1.0)*x531*x538))+((r00*x534)));
evalcond[1]=((((-1.0)*x532*x535))+(((-1.0)*x531*x534))+(((-1.0)*cj5*r11*x539))+(((-1.0)*r00*x538)));
evalcond[2]=((((-0.01)*r01*x534))+(((0.01)*sj5*x533))+(((-1.0)*py*x529))+(((0.01)*x540))+((px*x528))+(((-0.01)*r10*x535)));
evalcond[3]=(((cj4*x537))+(((-1.0)*x528*x530*x532))+(((-1.0)*cj4*r02*x539))+((x530*x533))+((sj4*x540))+(((-1.0)*sj4*x531*x535)));
evalcond[4]=(((cj4*x540))+((r02*sj4*x528))+(((-1.0)*cj4*x531*x535))+(((-1.0)*sj4*x537))+((cj4*sj5*x533))+(((-1.0)*cj4*x532*x534)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
IkReal x541=((0.894736842105263)*cj4);
IkReal x542=((0.105263157894737)*cj5);
IkReal x543=((0.105263157894737)*sj5);
IkReal x544=(cj5*r20);
IkReal x545=((0.894736842105263)*sj4);
IkReal x546=(r21*sj5);
if( IKabs(((((-1.0)*x541*x544))+(((-1.0)*r22*x545))+((x541*x546))+(((-1.0)*cj0*r01*x543))+(((10.5263157894737)*py*sj0))+((cj0*r00*x542))+((r10*sj0*x542))+(((-1.0)*r11*sj0*x543))+(((10.5263157894737)*cj0*px)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*r22*x541))+(((-1.0)*x545*x546))+(((10.5263157894737)*pz))+((r20*x542))+((x544*x545))+(((-1.0)*r21*x543)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*x541*x544))+(((-1.0)*r22*x545))+((x541*x546))+(((-1.0)*cj0*r01*x543))+(((10.5263157894737)*py*sj0))+((cj0*r00*x542))+((r10*sj0*x542))+(((-1.0)*r11*sj0*x543))+(((10.5263157894737)*cj0*px))))+IKsqr(((((-1.0)*r22*x541))+(((-1.0)*x545*x546))+(((10.5263157894737)*pz))+((r20*x542))+((x544*x545))+(((-1.0)*r21*x543))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j1array[0]=IKatan2(((((-1.0)*x541*x544))+(((-1.0)*r22*x545))+((x541*x546))+(((-1.0)*cj0*r01*x543))+(((10.5263157894737)*py*sj0))+((cj0*r00*x542))+((r10*sj0*x542))+(((-1.0)*r11*sj0*x543))+(((10.5263157894737)*cj0*px))), ((((-1.0)*r22*x541))+(((-1.0)*x545*x546))+(((10.5263157894737)*pz))+((r20*x542))+((x544*x545))+(((-1.0)*r21*x543))));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[4];
IkReal x547=((0.085)*sj4);
IkReal x548=(cj5*r00);
IkReal x549=(r01*sj5);
IkReal x550=((0.01)*cj0);
IkReal x551=((0.085)*cj4);
IkReal x552=(cj5*r20);
IkReal x553=(r21*sj5);
IkReal x554=(r12*sj0);
IkReal x555=((0.01)*x552);
IkReal x556=((0.095)*(IKcos(j1)));
IkReal x557=((0.01)*x553);
IkReal x558=((0.095)*(IKsin(j1)));
IkReal x559=((1.0)*cj0*px);
IkReal x560=((1.0)*py*sj0);
IkReal x561=(cj0*x551);
IkReal x562=(cj5*r10*sj0);
IkReal x563=(r11*sj0*sj5);
IkReal x564=((0.01)*x563);
IkReal x565=(x549*x550);
IkReal x566=((0.01)*x562);
IkReal x567=(x548*x550);
IkReal x568=(x557+x556);
IkReal x569=(x558+x564+x565);
IkReal x570=(x559+x566+x567+x560);
evalcond[0]=((((-1.0)*x547*x552))+(((-1.0)*pz))+((x547*x553))+(((-1.0)*x555))+x568+((r22*x551)));
evalcond[1]=((((-1.0)*x551*x553))+((r22*x547))+(((-1.0)*x570))+x569+((x551*x552)));
evalcond[2]=((((-1.0)*x549*x561))+((cj0*r02*x547))+((x551*x562))+((x547*x554))+((x548*x561))+pz+x555+(((-1.0)*x551*x563))+(((-1.0)*x568)));
evalcond[3]=((((-1.0)*cj0*x547*x548))+((cj0*x547*x549))+(((-1.0)*x570))+x569+((x551*x554))+(((-1.0)*x547*x562))+((r02*x561))+((x547*x563)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x571=((1.0)*cj4);
IkReal x572=(r22*sj1);
IkReal x573=(cj1*r22);
IkReal x574=(sj1*sj4);
IkReal x575=(cj5*r20);
IkReal x576=(r21*sj5);
IkReal x577=(cj1*x576);
if( IKabs((((sj4*x573))+((x574*x575))+(((-1.0)*x571*x577))+(((-1.0)*x571*x572))+((cj1*cj4*x575))+(((-1.0)*x574*x576)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((sj4*x572))+((sj4*x577))+(((-1.0)*sj1*x571*x576))+(((-1.0)*cj1*sj4*x575))+((cj4*x573))+((cj4*sj1*x575)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((sj4*x573))+((x574*x575))+(((-1.0)*x571*x577))+(((-1.0)*x571*x572))+((cj1*cj4*x575))+(((-1.0)*x574*x576))))+IKsqr((((sj4*x572))+((sj4*x577))+(((-1.0)*sj1*x571*x576))+(((-1.0)*cj1*sj4*x575))+((cj4*x573))+((cj4*sj1*x575))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j2array[0]=IKatan2((((sj4*x573))+((x574*x575))+(((-1.0)*x571*x577))+(((-1.0)*x571*x572))+((cj1*cj4*x575))+(((-1.0)*x574*x576))), (((sj4*x572))+((sj4*x577))+(((-1.0)*sj1*x571*x576))+(((-1.0)*cj1*sj4*x575))+((cj4*x573))+((cj4*sj1*x575))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[6];
IkReal x578=IKcos(j2);
IkReal x579=IKsin(j2);
IkReal x580=(sj0*sj4);
IkReal x581=(cj5*r10);
IkReal x582=(r11*sj5);
IkReal x583=((0.01)*sj0);
IkReal x584=((0.01)*sj5);
IkReal x585=(cj0*r01);
IkReal x586=((1.0)*cj4);
IkReal x587=(sj4*sj5);
IkReal x588=((1.0)*cj0);
IkReal x589=(cj5*r20);
IkReal x590=(cj4*sj0);
IkReal x591=(cj1*x578);
IkReal x592=(sj1*x579);
IkReal x593=(cj0*cj5*r00);
IkReal x594=(sj1*x578);
IkReal x595=(cj1*x579);
IkReal x596=((1.0)*x594);
IkReal x597=((1.0)*x595);
IkReal x598=(x597+x596);
evalcond[0]=((((-0.095)*cj1))+(((0.085)*x592))+(((0.01)*x589))+(((-1.0)*r21*x584))+pz+(((-0.085)*x591)));
evalcond[1]=((((-1.0)*r22*x586))+(((-1.0)*x592))+(((-1.0)*r21*x587))+x591+((sj4*x589)));
evalcond[2]=(((r22*sj4))+((cj4*x589))+(((-1.0)*x598))+(((-1.0)*r21*sj5*x586)));
evalcond[3]=(((x580*x582))+(((-1.0)*x580*x581))+((cj0*cj4*r02))+((x585*x587))+(((-1.0)*x598))+((r12*x590))+(((-1.0)*cj5*r00*sj4*x588)));
evalcond[4]=(((x584*x585))+(((-0.01)*x593))+(((0.095)*sj1))+(((0.085)*x594))+(((0.085)*x595))+((x582*x583))+(((-1.0)*px*x588))+(((-1.0)*py*sj0))+(((-1.0)*x581*x583)));
evalcond[5]=((((-1.0)*r02*sj4*x588))+(((-1.0)*x586*x593))+(((-1.0)*x591))+((cj4*sj5*x585))+x592+((x582*x590))+(((-1.0)*sj0*x581*x586))+(((-1.0)*r12*x580)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
}
}
}
}

}

}

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x599=((0.01)*cj5);
IkReal x600=((0.01)*sj5);
CheckValue<IkReal> x601 = IKatan2WithCheck(IkReal(((((-1.0)*py))+((r11*x600))+(((-1.0)*r10*x599)))),IkReal(((((-1.0)*r00*x599))+(((-1.0)*px))+((r01*x600)))),IKFAST_ATAN2_MAGTHRESH);
if(!x601.valid){
continue;
}
CheckValue<IkReal> x602=IKPowWithIntegerCheck(IKsign(((((-1.0)*cj5*rxp1_2))+(((-1.0)*rxp0_2*sj5))+(((0.01)*r22)))),-1);
if(!x602.valid){
continue;
}
j0array[0]=((-1.5707963267949)+(x601.value)+(((1.5707963267949)*(x602.value))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[5];
IkReal x603=IKsin(j0);
IkReal x604=IKcos(j0);
IkReal x605=(sj4*sj5);
IkReal x606=((1.0)*r10);
IkReal x607=((1.0)*r01);
IkReal x608=(r11*x604);
IkReal x609=(sj5*x603);
IkReal x610=(cj5*x604);
IkReal x611=(r01*x603);
IkReal x612=(r12*x604);
IkReal x613=(sj5*x604);
IkReal x614=((1.0)*x603);
IkReal x615=(cj5*r00*x603);
evalcond[0]=((-1.0)+((r00*x609))+(((-1.0)*cj5*x608))+(((-1.0)*x606*x613))+((cj5*x611)));
evalcond[1]=((((-1.0)*x607*x610))+(((-1.0)*x606*x609))+(((-1.0)*cj5*r11*x614))+(((-1.0)*r00*x613)));
evalcond[2]=((((-1.0)*py*x604))+((px*x603))+(((-0.01)*r10*x610))+(((0.01)*sj5*x608))+(((0.01)*x615))+(((-0.01)*r01*x609)));
evalcond[3]=((((-1.0)*cj4*r02*x614))+((x605*x608))+((sj4*x615))+(((-1.0)*sj4*x606*x610))+(((-1.0)*x603*x605*x607))+((cj4*x612)));
evalcond[4]=((((-1.0)*cj4*x607*x609))+(((-1.0)*cj4*x606*x610))+(((-1.0)*sj4*x612))+((r02*sj4*x603))+((cj4*x615))+((cj4*sj5*x608)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
IkReal x616=((0.894736842105263)*cj4);
IkReal x617=((0.105263157894737)*cj5);
IkReal x618=((0.105263157894737)*sj5);
IkReal x619=(cj5*r20);
IkReal x620=((0.894736842105263)*sj4);
IkReal x621=(r21*sj5);
if( IKabs(((((-1.0)*r11*sj0*x618))+((x616*x621))+((cj0*r00*x617))+(((10.5263157894737)*py*sj0))+((r10*sj0*x617))+(((-1.0)*cj0*r01*x618))+(((-1.0)*x616*x619))+(((10.5263157894737)*cj0*px))+(((-1.0)*r22*x620)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((r20*x617))+(((-1.0)*r21*x618))+(((10.5263157894737)*pz))+(((-1.0)*r22*x616))+((x619*x620))+(((-1.0)*x620*x621)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*r11*sj0*x618))+((x616*x621))+((cj0*r00*x617))+(((10.5263157894737)*py*sj0))+((r10*sj0*x617))+(((-1.0)*cj0*r01*x618))+(((-1.0)*x616*x619))+(((10.5263157894737)*cj0*px))+(((-1.0)*r22*x620))))+IKsqr((((r20*x617))+(((-1.0)*r21*x618))+(((10.5263157894737)*pz))+(((-1.0)*r22*x616))+((x619*x620))+(((-1.0)*x620*x621))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j1array[0]=IKatan2(((((-1.0)*r11*sj0*x618))+((x616*x621))+((cj0*r00*x617))+(((10.5263157894737)*py*sj0))+((r10*sj0*x617))+(((-1.0)*cj0*r01*x618))+(((-1.0)*x616*x619))+(((10.5263157894737)*cj0*px))+(((-1.0)*r22*x620))), (((r20*x617))+(((-1.0)*r21*x618))+(((10.5263157894737)*pz))+(((-1.0)*r22*x616))+((x619*x620))+(((-1.0)*x620*x621))));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[4];
IkReal x622=((0.085)*sj4);
IkReal x623=(cj5*r00);
IkReal x624=(r01*sj5);
IkReal x625=((0.01)*cj0);
IkReal x626=((0.085)*cj4);
IkReal x627=(cj5*r20);
IkReal x628=(r21*sj5);
IkReal x629=(r12*sj0);
IkReal x630=((0.01)*x627);
IkReal x631=((0.095)*(IKcos(j1)));
IkReal x632=((0.01)*x628);
IkReal x633=((0.095)*(IKsin(j1)));
IkReal x634=((1.0)*cj0*px);
IkReal x635=((1.0)*py*sj0);
IkReal x636=(cj0*x626);
IkReal x637=(cj5*r10*sj0);
IkReal x638=(r11*sj0*sj5);
IkReal x639=((0.01)*x638);
IkReal x640=(x624*x625);
IkReal x641=((0.01)*x637);
IkReal x642=(x623*x625);
IkReal x643=(x632+x631);
IkReal x644=(x640+x633+x639);
IkReal x645=(x642+x641+x634+x635);
evalcond[0]=(((r22*x626))+(((-1.0)*x622*x627))+(((-1.0)*x630))+(((-1.0)*pz))+x643+((x622*x628)));
evalcond[1]=(((r22*x622))+(((-1.0)*x645))+x644+(((-1.0)*x626*x628))+((x626*x627)));
evalcond[2]=(((cj0*r02*x622))+(((-1.0)*x643))+(((-1.0)*x624*x636))+pz+x630+(((-1.0)*x626*x638))+((x623*x636))+((x622*x629))+((x626*x637)));
evalcond[3]=(((r02*x636))+((cj0*x622*x624))+(((-1.0)*x622*x637))+(((-1.0)*x645))+(((-1.0)*cj0*x622*x623))+x644+((x622*x638))+((x626*x629)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x646=((1.0)*cj4);
IkReal x647=(r22*sj1);
IkReal x648=(cj1*r22);
IkReal x649=(sj1*sj4);
IkReal x650=(cj5*r20);
IkReal x651=(r21*sj5);
IkReal x652=(cj1*x651);
if( IKabs((((cj1*cj4*x650))+((sj4*x648))+(((-1.0)*x646*x652))+((x649*x650))+(((-1.0)*x646*x647))+(((-1.0)*x649*x651)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((sj4*x652))+(((-1.0)*sj1*x646*x651))+((cj4*x648))+((sj4*x647))+(((-1.0)*cj1*sj4*x650))+((cj4*sj1*x650)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((cj1*cj4*x650))+((sj4*x648))+(((-1.0)*x646*x652))+((x649*x650))+(((-1.0)*x646*x647))+(((-1.0)*x649*x651))))+IKsqr((((sj4*x652))+(((-1.0)*sj1*x646*x651))+((cj4*x648))+((sj4*x647))+(((-1.0)*cj1*sj4*x650))+((cj4*sj1*x650))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j2array[0]=IKatan2((((cj1*cj4*x650))+((sj4*x648))+(((-1.0)*x646*x652))+((x649*x650))+(((-1.0)*x646*x647))+(((-1.0)*x649*x651))), (((sj4*x652))+(((-1.0)*sj1*x646*x651))+((cj4*x648))+((sj4*x647))+(((-1.0)*cj1*sj4*x650))+((cj4*sj1*x650))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[6];
IkReal x653=IKcos(j2);
IkReal x654=IKsin(j2);
IkReal x655=(sj0*sj4);
IkReal x656=(cj5*r10);
IkReal x657=(r11*sj5);
IkReal x658=((0.01)*sj0);
IkReal x659=((0.01)*sj5);
IkReal x660=(cj0*r01);
IkReal x661=((1.0)*cj4);
IkReal x662=(sj4*sj5);
IkReal x663=((1.0)*cj0);
IkReal x664=(cj5*r20);
IkReal x665=(cj4*sj0);
IkReal x666=(cj1*x653);
IkReal x667=(sj1*x654);
IkReal x668=(cj0*cj5*r00);
IkReal x669=(sj1*x653);
IkReal x670=(cj1*x654);
IkReal x671=((1.0)*x669);
IkReal x672=((1.0)*x670);
IkReal x673=(x672+x671);
evalcond[0]=((((-0.095)*cj1))+(((0.085)*x667))+pz+(((-0.085)*x666))+(((-1.0)*r21*x659))+(((0.01)*x664)));
evalcond[1]=((((-1.0)*r21*x662))+(((-1.0)*r22*x661))+((sj4*x664))+(((-1.0)*x667))+x666);
evalcond[2]=(((r22*sj4))+(((-1.0)*r21*sj5*x661))+((cj4*x664))+(((-1.0)*x673)));
evalcond[3]=(((cj0*cj4*r02))+((r12*x665))+((x660*x662))+((x655*x657))+(((-1.0)*x655*x656))+(((-1.0)*x673))+(((-1.0)*cj5*r00*sj4*x663)));
evalcond[4]=((((0.095)*sj1))+(((0.085)*x669))+(((-1.0)*x656*x658))+(((0.085)*x670))+((x657*x658))+(((-1.0)*py*sj0))+((x659*x660))+(((-0.01)*x668))+(((-1.0)*px*x663)));
evalcond[5]=((((-1.0)*r02*sj4*x663))+((x657*x665))+(((-1.0)*x661*x668))+(((-1.0)*sj0*x656*x661))+(((-1.0)*x666))+x667+((cj4*sj5*x660))+(((-1.0)*r12*x655)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
}
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
IkReal x674=((1.0)*cj5);
IkReal x675=((1.0)*sj5);
IkReal x676=(((r21*sj4*sj5))+((cj4*r22))+(((-1.0)*r20*sj4*x674)));
j0eval[0]=x676;
j0eval[1]=((IKabs(((((-1.0)*r10*x675))+(((-1.0)*r11*x674)))))+(IKabs(((((-1.0)*r01*x674))+(((-1.0)*r00*x675))))));
j0eval[2]=IKsign(x676);
if( IKabs(j0eval[0]) < 0.0000010000000000  || IKabs(j0eval[1]) < 0.0000010000000000  || IKabs(j0eval[2]) < 0.0000010000000000  )
{
{
IkReal j0eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
IkReal x677=(sj4*sj5);
IkReal x678=((1.0)*cj5*sj4);
IkReal x679=(((cj5*r21))+((r20*sj5)));
j0eval[0]=x679;
j0eval[1]=IKsign(x679);
j0eval[2]=((IKabs((((r01*x677))+(((-1.0)*r00*x678))+((cj4*r02)))))+(IKabs((((r11*x677))+(((-1.0)*r10*x678))+((cj4*r12))))));
if( IKabs(j0eval[0]) < 0.0000010000000000  || IKabs(j0eval[1]) < 0.0000010000000000  || IKabs(j0eval[2]) < 0.0000010000000000  )
{
{
IkReal j0eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
IkReal x680=((0.01)*sj5);
IkReal x681=((0.01)*cj5);
IkReal x682=((100.0)*cj4);
IkReal x683=(cj5*rxp0_2);
IkReal x684=(r20*sj4);
IkReal x685=(r21*sj4);
IkReal x686=(rxp1_2*sj5);
IkReal x687=(rxp2_2*sj4);
j0eval[0]=(((cj5*x685))+((x682*x683))+((sj5*x684))+(((100.0)*x687))+(((-1.0)*x682*x686)));
j0eval[1]=IKsign((((cj4*x683))+((x681*x685))+((x680*x684))+x687+(((-1.0)*cj4*x686))));
j0eval[2]=((IKabs(((((-1.0)*r10*x681))+(((-1.0)*py))+((r11*x680)))))+(IKabs(((((-1.0)*px))+(((-1.0)*r00*x681))+((r01*x680))))));
if( IKabs(j0eval[0]) < 0.0000010000000000  || IKabs(j0eval[1]) < 0.0000010000000000  || IKabs(j0eval[2]) < 0.0000010000000000  )
{
continue; // 1 cases reached

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x688=((0.01)*cj5);
IkReal x689=((0.01)*sj5);
CheckValue<IkReal> x690 = IKatan2WithCheck(IkReal(((((-1.0)*r10*x688))+(((-1.0)*py))+((r11*x689)))),IkReal(((((-1.0)*px))+(((-1.0)*r00*x688))+((r01*x689)))),IKFAST_ATAN2_MAGTHRESH);
if(!x690.valid){
continue;
}
CheckValue<IkReal> x691=IKPowWithIntegerCheck(IKsign((((r20*sj4*x689))+((r21*sj4*x688))+((cj4*cj5*rxp0_2))+(((-1.0)*cj4*rxp1_2*sj5))+((rxp2_2*sj4)))),-1);
if(!x691.valid){
continue;
}
j0array[0]=((-1.5707963267949)+(x690.value)+(((1.5707963267949)*(x691.value))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[5];
IkReal x692=IKsin(j0);
IkReal x693=IKcos(j0);
IkReal x694=(r11*sj5);
IkReal x695=((1.0)*r02);
IkReal x696=((1.0)*r12);
IkReal x697=((1.0)*r01);
IkReal x698=((1.0)*r10);
IkReal x699=(sj4*x693);
IkReal x700=(sj5*x692);
IkReal x701=(cj5*x692);
IkReal x702=(cj4*x693);
IkReal x703=(sj4*x692);
IkReal x704=(cj4*x692);
IkReal x705=((0.01)*x693);
IkReal x706=((1.0)*x693);
evalcond[0]=(((r01*x701))+(((-1.0)*cj5*r11*x706))+((r00*x700))+(((-1.0)*sj5*x693*x698)));
evalcond[1]=((((-1.0)*py*x706))+(((0.01)*r00*x701))+((x694*x705))+((px*x692))+(((-1.0)*cj5*r10*x705))+(((-0.01)*r01*x700)));
evalcond[2]=((((-1.0)*cj5*x698*x699))+((x694*x699))+(((-1.0)*x695*x704))+((r00*sj4*x701))+(((-1.0)*sj4*x697*x700))+((r12*x702)));
evalcond[3]=((1.0)+(((-1.0)*x696*x699))+(((-1.0)*cj5*x698*x702))+(((-1.0)*cj4*x697*x700))+((x694*x702))+((cj4*r00*x701))+((r02*x703)));
evalcond[4]=(((r01*sj5*x702))+(((-1.0)*cj4*x698*x701))+(((-1.0)*cj5*r00*x702))+((x694*x704))+(((-1.0)*x696*x703))+(((-1.0)*x695*x699)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j1eval[1];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j1eval[0]=cj4;
if( IKabs(j1eval[0]) < 0.0000010000000000  )
{
continue; // 1 cases reached

} else
{
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
IkReal x707=((0.105263157894737)*sj0);
IkReal x708=((0.105263157894737)*cj0);
IkReal x709=((17.0)*cj4*sj4);
CheckValue<IkReal> x710=IKPowWithIntegerCheck(cj4,-1);
if(!x710.valid){
continue;
}
if( IKabs((((cj5*r10*x707))+(((-1.0)*r01*sj5*x708))+(((-0.894736842105263)*cj5*r21))+(((-1.0)*r11*sj5*x707))+(((10.5263157894737)*py*sj0))+(((-0.894736842105263)*r20*sj5))+((cj5*r00*x708))+(((10.5263157894737)*cj0*px)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-0.0526315789473684)*(x710.value)*(((((-200.0)*cj4*pz))+(((17.0)*r22*(cj4*cj4)))+(((2.0)*r22*sj4))+(((-1.0)*cj5*r20*x709))+((r21*sj5*x709)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((cj5*r10*x707))+(((-1.0)*r01*sj5*x708))+(((-0.894736842105263)*cj5*r21))+(((-1.0)*r11*sj5*x707))+(((10.5263157894737)*py*sj0))+(((-0.894736842105263)*r20*sj5))+((cj5*r00*x708))+(((10.5263157894737)*cj0*px))))+IKsqr(((-0.0526315789473684)*(x710.value)*(((((-200.0)*cj4*pz))+(((17.0)*r22*(cj4*cj4)))+(((2.0)*r22*sj4))+(((-1.0)*cj5*r20*x709))+((r21*sj5*x709))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j1array[0]=IKatan2((((cj5*r10*x707))+(((-1.0)*r01*sj5*x708))+(((-0.894736842105263)*cj5*r21))+(((-1.0)*r11*sj5*x707))+(((10.5263157894737)*py*sj0))+(((-0.894736842105263)*r20*sj5))+((cj5*r00*x708))+(((10.5263157894737)*cj0*px))), ((-0.0526315789473684)*(x710.value)*(((((-200.0)*cj4*pz))+(((17.0)*r22*(cj4*cj4)))+(((2.0)*r22*sj4))+(((-1.0)*cj5*r20*x709))+((r21*sj5*x709))))));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[4];
CheckValue<IkReal> x734=IKPowWithIntegerCheck(cj4,-1);
if(!x734.valid){
continue;
}
IkReal x711=x734.value;
IkReal x712=(cj0*r01);
IkReal x713=((0.085)*sj4);
IkReal x714=((0.01)*sj5);
IkReal x715=(r11*sj0);
IkReal x716=((0.005)*x711);
IkReal x717=(cj0*r00);
IkReal x718=((0.085)*cj4);
IkReal x719=((200.0)*cj4*pz);
IkReal x720=((2.0)*r22*sj4);
IkReal x721=((0.095)*(IKcos(j1)));
IkReal x722=((0.095)*(IKsin(j1)));
IkReal x723=((1.0)*cj0*px);
IkReal x724=((1.0)*py*sj0);
IkReal x725=((17.0)*cj4*cj5);
IkReal x726=(cj5*r10*sj0);
IkReal x727=((17.0)*cj4*sj5);
IkReal x728=(x714*x715);
IkReal x729=(x712*x714);
IkReal x730=((0.01)*x726);
IkReal x731=((0.01)*cj5*x717);
IkReal x732=(x722+x728+x729);
IkReal x733=(x731+x730+x723+x724);
CheckValue<IkReal> x735=IKPowWithIntegerCheck(x711,-2);
if(!x735.valid){
continue;
}
evalcond[0]=(((x716*(((((-1.0)*r20*sj4*x725))+(((17.0)*r22*(x735.value)))+(((-1.0)*x719))+((r21*sj4*x727))+x720))))+x721);
evalcond[1]=((((0.085)*r20*sj5))+(((0.085)*cj5*r21))+(((-1.0)*x733))+x732);
evalcond[2]=((((-1.0)*x721))+((x716*((((x712*x725))+((x717*x727))+(((-1.0)*x720))+((r10*sj0*x727))+x719+((x715*x725)))))));
evalcond[3]=((((-1.0)*x713*x726))+((cj0*r02*x718))+(((-1.0)*cj5*x713*x717))+((r12*sj0*x718))+((sj5*x712*x713))+((sj5*x713*x715))+(((-1.0)*x733))+x732);
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x736=(cj4*r22);
IkReal x737=((1.0)*sj1);
IkReal x738=(r20*sj1);
IkReal x739=(cj5*sj4);
IkReal x740=(cj1*r20);
IkReal x741=(cj5*r21);
IkReal x742=(r21*sj4*sj5);
if( IKabs(((((-1.0)*x737*x742))+((cj1*x741))+(((-1.0)*x736*x737))+((sj5*x740))+((x738*x739)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((cj1*x742))+((sj1*x741))+((sj5*x738))+(((-1.0)*x739*x740))+((cj1*x736)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*x737*x742))+((cj1*x741))+(((-1.0)*x736*x737))+((sj5*x740))+((x738*x739))))+IKsqr((((cj1*x742))+((sj1*x741))+((sj5*x738))+(((-1.0)*x739*x740))+((cj1*x736))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j2array[0]=IKatan2(((((-1.0)*x737*x742))+((cj1*x741))+(((-1.0)*x736*x737))+((sj5*x740))+((x738*x739))), (((cj1*x742))+((sj1*x741))+((sj5*x738))+(((-1.0)*x739*x740))+((cj1*x736))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[6];
IkReal x743=IKsin(j2);
IkReal x744=IKcos(j2);
IkReal x745=(sj0*sj5);
IkReal x746=((1.0)*r10);
IkReal x747=(cj0*r01);
IkReal x748=(cj5*sj4);
IkReal x749=((1.0)*sj0);
IkReal x750=(sj4*sj5);
IkReal x751=((0.01)*cj5);
IkReal x752=(cj1*x744);
IkReal x753=(sj1*x743);
IkReal x754=((1.0)*cj0*r00);
IkReal x755=(sj1*x744);
IkReal x756=(cj1*x743);
IkReal x757=((1.0)*x755);
IkReal x758=((1.0)*x756);
IkReal x759=(x757+x758);
evalcond[0]=(((cj5*r21))+((r20*sj5))+(((-1.0)*x759)));
CheckValue<IkReal> x760=IKPowWithIntegerCheck(cj4,-1);
if(!x760.valid){
continue;
}
evalcond[1]=((((-0.095)*cj1))+(((-0.085)*x752))+(((0.085)*x753))+(((-0.01)*r22*sj4*(x760.value)))+pz);
evalcond[2]=((((-1.0)*r21*x750))+(((-1.0)*x753))+((r20*x748))+x752+(((-1.0)*cj4*r22)));
evalcond[3]=((((-1.0)*sj5*x754))+(((-1.0)*x745*x746))+(((-1.0)*cj5*x747))+(((-1.0)*x752))+x753+(((-1.0)*cj5*r11*x749)));
evalcond[4]=(((x747*x750))+(((-1.0)*sj0*x746*x748))+((r11*sj4*x745))+((cj0*cj4*r02))+(((-1.0)*x748*x754))+(((-1.0)*x759))+((cj4*r12*sj0)));
evalcond[5]=((((0.095)*sj1))+(((0.085)*x755))+(((0.085)*x756))+(((-1.0)*r10*sj0*x751))+(((-1.0)*py*x749))+(((0.01)*r11*x745))+(((0.01)*sj5*x747))+(((-1.0)*cj0*r00*x751))+(((-1.0)*cj0*px)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
}
}

}

}
}
}

}

}

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x761=(sj4*sj5);
IkReal x762=((1.0)*cj5*sj4);
CheckValue<IkReal> x763=IKPowWithIntegerCheck(IKsign((((cj5*r21))+((r20*sj5)))),-1);
if(!x763.valid){
continue;
}
CheckValue<IkReal> x764 = IKatan2WithCheck(IkReal(((((-1.0)*r10*x762))+((r11*x761))+((cj4*r12)))),IkReal(((((-1.0)*r00*x762))+((r01*x761))+((cj4*r02)))),IKFAST_ATAN2_MAGTHRESH);
if(!x764.valid){
continue;
}
j0array[0]=((-1.5707963267949)+(((1.5707963267949)*(x763.value)))+(x764.value));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[5];
IkReal x765=IKsin(j0);
IkReal x766=IKcos(j0);
IkReal x767=(r11*sj5);
IkReal x768=((1.0)*r02);
IkReal x769=((1.0)*r12);
IkReal x770=((1.0)*r01);
IkReal x771=((1.0)*r10);
IkReal x772=(sj4*x766);
IkReal x773=(sj5*x765);
IkReal x774=(cj5*x765);
IkReal x775=(cj4*x766);
IkReal x776=(sj4*x765);
IkReal x777=(cj4*x765);
IkReal x778=((0.01)*x766);
IkReal x779=((1.0)*x766);
evalcond[0]=((((-1.0)*sj5*x766*x771))+((r01*x774))+((r00*x773))+(((-1.0)*cj5*r11*x779)));
evalcond[1]=((((0.01)*r00*x774))+((px*x765))+(((-1.0)*cj5*r10*x778))+(((-0.01)*r01*x773))+((x767*x778))+(((-1.0)*py*x779)));
evalcond[2]=((((-1.0)*x768*x777))+((r00*sj4*x774))+((x767*x772))+(((-1.0)*cj5*x771*x772))+((r12*x775))+(((-1.0)*sj4*x770*x773)));
evalcond[3]=((1.0)+((cj4*r00*x774))+((x767*x775))+(((-1.0)*cj5*x771*x775))+(((-1.0)*x769*x772))+((r02*x776))+(((-1.0)*cj4*x770*x773)));
evalcond[4]=((((-1.0)*x768*x772))+((r01*sj5*x775))+(((-1.0)*cj5*r00*x775))+((x767*x777))+(((-1.0)*cj4*x771*x774))+(((-1.0)*x769*x776)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j1eval[1];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j1eval[0]=cj4;
if( IKabs(j1eval[0]) < 0.0000010000000000  )
{
continue; // 1 cases reached

} else
{
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
IkReal x780=((0.105263157894737)*sj0);
IkReal x781=((0.105263157894737)*cj0);
IkReal x782=((17.0)*cj4*sj4);
CheckValue<IkReal> x783=IKPowWithIntegerCheck(cj4,-1);
if(!x783.valid){
continue;
}
if( IKabs((((cj5*r10*x780))+(((-0.894736842105263)*cj5*r21))+(((-1.0)*r01*sj5*x781))+(((10.5263157894737)*py*sj0))+(((-0.894736842105263)*r20*sj5))+((cj5*r00*x781))+(((-1.0)*r11*sj5*x780))+(((10.5263157894737)*cj0*px)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-0.0526315789473684)*(x783.value)*(((((-200.0)*cj4*pz))+(((-1.0)*cj5*r20*x782))+(((17.0)*r22*(cj4*cj4)))+(((2.0)*r22*sj4))+((r21*sj5*x782)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((cj5*r10*x780))+(((-0.894736842105263)*cj5*r21))+(((-1.0)*r01*sj5*x781))+(((10.5263157894737)*py*sj0))+(((-0.894736842105263)*r20*sj5))+((cj5*r00*x781))+(((-1.0)*r11*sj5*x780))+(((10.5263157894737)*cj0*px))))+IKsqr(((-0.0526315789473684)*(x783.value)*(((((-200.0)*cj4*pz))+(((-1.0)*cj5*r20*x782))+(((17.0)*r22*(cj4*cj4)))+(((2.0)*r22*sj4))+((r21*sj5*x782))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j1array[0]=IKatan2((((cj5*r10*x780))+(((-0.894736842105263)*cj5*r21))+(((-1.0)*r01*sj5*x781))+(((10.5263157894737)*py*sj0))+(((-0.894736842105263)*r20*sj5))+((cj5*r00*x781))+(((-1.0)*r11*sj5*x780))+(((10.5263157894737)*cj0*px))), ((-0.0526315789473684)*(x783.value)*(((((-200.0)*cj4*pz))+(((-1.0)*cj5*r20*x782))+(((17.0)*r22*(cj4*cj4)))+(((2.0)*r22*sj4))+((r21*sj5*x782))))));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[4];
CheckValue<IkReal> x807=IKPowWithIntegerCheck(cj4,-1);
if(!x807.valid){
continue;
}
IkReal x784=x807.value;
IkReal x785=(cj0*r01);
IkReal x786=((0.085)*sj4);
IkReal x787=((0.01)*sj5);
IkReal x788=(r11*sj0);
IkReal x789=((0.005)*x784);
IkReal x790=(cj0*r00);
IkReal x791=((0.085)*cj4);
IkReal x792=((200.0)*cj4*pz);
IkReal x793=((2.0)*r22*sj4);
IkReal x794=((0.095)*(IKcos(j1)));
IkReal x795=((0.095)*(IKsin(j1)));
IkReal x796=((1.0)*cj0*px);
IkReal x797=((1.0)*py*sj0);
IkReal x798=((17.0)*cj4*cj5);
IkReal x799=(cj5*r10*sj0);
IkReal x800=((17.0)*cj4*sj5);
IkReal x801=(x787*x788);
IkReal x802=(x785*x787);
IkReal x803=((0.01)*x799);
IkReal x804=((0.01)*cj5*x790);
IkReal x805=(x795+x801+x802);
IkReal x806=(x797+x796+x804+x803);
CheckValue<IkReal> x808=IKPowWithIntegerCheck(x784,-2);
if(!x808.valid){
continue;
}
evalcond[0]=(((x789*(((((-1.0)*x792))+((r21*sj4*x800))+x793+(((17.0)*r22*(x808.value)))+(((-1.0)*r20*sj4*x798))))))+x794);
evalcond[1]=((((0.085)*r20*sj5))+(((0.085)*cj5*r21))+x805+(((-1.0)*x806)));
evalcond[2]=((((-1.0)*x794))+((x789*((((r10*sj0*x800))+((x790*x800))+(((-1.0)*x793))+((x785*x798))+((x788*x798))+x792)))));
evalcond[3]=(((cj0*r02*x791))+(((-1.0)*cj5*x786*x790))+((r12*sj0*x791))+((sj5*x786*x788))+(((-1.0)*x786*x799))+x805+(((-1.0)*x806))+((sj5*x785*x786)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x809=(cj4*r22);
IkReal x810=((1.0)*sj1);
IkReal x811=(r20*sj1);
IkReal x812=(cj5*sj4);
IkReal x813=(cj1*r20);
IkReal x814=(cj5*r21);
IkReal x815=(r21*sj4*sj5);
if( IKabs((((sj5*x813))+(((-1.0)*x809*x810))+(((-1.0)*x810*x815))+((x811*x812))+((cj1*x814)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((sj1*x814))+(((-1.0)*x812*x813))+((sj5*x811))+((cj1*x809))+((cj1*x815)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((sj5*x813))+(((-1.0)*x809*x810))+(((-1.0)*x810*x815))+((x811*x812))+((cj1*x814))))+IKsqr((((sj1*x814))+(((-1.0)*x812*x813))+((sj5*x811))+((cj1*x809))+((cj1*x815))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j2array[0]=IKatan2((((sj5*x813))+(((-1.0)*x809*x810))+(((-1.0)*x810*x815))+((x811*x812))+((cj1*x814))), (((sj1*x814))+(((-1.0)*x812*x813))+((sj5*x811))+((cj1*x809))+((cj1*x815))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[6];
IkReal x816=IKsin(j2);
IkReal x817=IKcos(j2);
IkReal x818=(sj0*sj5);
IkReal x819=((1.0)*r10);
IkReal x820=(cj0*r01);
IkReal x821=(cj5*sj4);
IkReal x822=((1.0)*sj0);
IkReal x823=(sj4*sj5);
IkReal x824=((0.01)*cj5);
IkReal x825=(cj1*x817);
IkReal x826=(sj1*x816);
IkReal x827=((1.0)*cj0*r00);
IkReal x828=(sj1*x817);
IkReal x829=(cj1*x816);
IkReal x830=((1.0)*x828);
IkReal x831=((1.0)*x829);
IkReal x832=(x830+x831);
evalcond[0]=(((cj5*r21))+(((-1.0)*x832))+((r20*sj5)));
CheckValue<IkReal> x833=IKPowWithIntegerCheck(cj4,-1);
if(!x833.valid){
continue;
}
evalcond[1]=((((-0.095)*cj1))+(((-0.085)*x825))+(((-0.01)*r22*sj4*(x833.value)))+pz+(((0.085)*x826)));
evalcond[2]=(((r20*x821))+(((-1.0)*r21*x823))+(((-1.0)*x826))+(((-1.0)*cj4*r22))+x825);
evalcond[3]=((((-1.0)*x818*x819))+(((-1.0)*cj5*x820))+(((-1.0)*x825))+(((-1.0)*cj5*r11*x822))+x826+(((-1.0)*sj5*x827)));
evalcond[4]=((((-1.0)*sj0*x819*x821))+((x820*x823))+((r11*sj4*x818))+((cj0*cj4*r02))+(((-1.0)*x832))+(((-1.0)*x821*x827))+((cj4*r12*sj0)));
evalcond[5]=((((0.095)*sj1))+(((-1.0)*py*x822))+(((-1.0)*r10*sj0*x824))+(((0.01)*r11*x818))+(((0.01)*sj5*x820))+(((0.085)*x829))+(((0.085)*x828))+(((-1.0)*cj0*r00*x824))+(((-1.0)*cj0*px)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
}
}

}

}
}
}

}

}

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x834=((1.0)*cj5);
IkReal x835=((1.0)*sj5);
CheckValue<IkReal> x836=IKPowWithIntegerCheck(IKsign((((r21*sj4*sj5))+((cj4*r22))+(((-1.0)*r20*sj4*x834)))),-1);
if(!x836.valid){
continue;
}
CheckValue<IkReal> x837 = IKatan2WithCheck(IkReal(((((-1.0)*r10*x835))+(((-1.0)*r11*x834)))),IkReal(((((-1.0)*r00*x835))+(((-1.0)*r01*x834)))),IKFAST_ATAN2_MAGTHRESH);
if(!x837.valid){
continue;
}
j0array[0]=((-1.5707963267949)+(((1.5707963267949)*(x836.value)))+(x837.value));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[5];
IkReal x838=IKsin(j0);
IkReal x839=IKcos(j0);
IkReal x840=(r11*sj5);
IkReal x841=((1.0)*r02);
IkReal x842=((1.0)*r12);
IkReal x843=((1.0)*r01);
IkReal x844=((1.0)*r10);
IkReal x845=(sj4*x839);
IkReal x846=(sj5*x838);
IkReal x847=(cj5*x838);
IkReal x848=(cj4*x839);
IkReal x849=(sj4*x838);
IkReal x850=(cj4*x838);
IkReal x851=((0.01)*x839);
IkReal x852=((1.0)*x839);
evalcond[0]=((((-1.0)*sj5*x839*x844))+(((-1.0)*cj5*r11*x852))+((r01*x847))+((r00*x846)));
evalcond[1]=((((-0.01)*r01*x846))+(((0.01)*r00*x847))+(((-1.0)*py*x852))+((x840*x851))+(((-1.0)*cj5*r10*x851))+((px*x838)));
evalcond[2]=(((x840*x845))+(((-1.0)*x841*x850))+(((-1.0)*sj4*x843*x846))+((r12*x848))+(((-1.0)*cj5*x844*x845))+((r00*sj4*x847)));
evalcond[3]=((1.0)+((x840*x848))+((r02*x849))+(((-1.0)*cj4*x843*x846))+(((-1.0)*x842*x845))+(((-1.0)*cj5*x844*x848))+((cj4*r00*x847)));
evalcond[4]=((((-1.0)*x841*x845))+(((-1.0)*x842*x849))+((x840*x850))+((r01*sj5*x848))+(((-1.0)*cj4*x844*x847))+(((-1.0)*cj5*r00*x848)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j1eval[1];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j1eval[0]=cj4;
if( IKabs(j1eval[0]) < 0.0000010000000000  )
{
continue; // 1 cases reached

} else
{
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
IkReal x853=((0.105263157894737)*sj0);
IkReal x854=((0.105263157894737)*cj0);
IkReal x855=((17.0)*cj4*sj4);
CheckValue<IkReal> x856=IKPowWithIntegerCheck(cj4,-1);
if(!x856.valid){
continue;
}
if( IKabs(((((-1.0)*r11*sj5*x853))+((cj5*r00*x854))+(((-0.894736842105263)*cj5*r21))+((cj5*r10*x853))+(((10.5263157894737)*py*sj0))+(((-0.894736842105263)*r20*sj5))+(((-1.0)*r01*sj5*x854))+(((10.5263157894737)*cj0*px)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-0.0526315789473684)*(x856.value)*(((((-200.0)*cj4*pz))+(((-1.0)*cj5*r20*x855))+(((17.0)*r22*(cj4*cj4)))+(((2.0)*r22*sj4))+((r21*sj5*x855)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*r11*sj5*x853))+((cj5*r00*x854))+(((-0.894736842105263)*cj5*r21))+((cj5*r10*x853))+(((10.5263157894737)*py*sj0))+(((-0.894736842105263)*r20*sj5))+(((-1.0)*r01*sj5*x854))+(((10.5263157894737)*cj0*px))))+IKsqr(((-0.0526315789473684)*(x856.value)*(((((-200.0)*cj4*pz))+(((-1.0)*cj5*r20*x855))+(((17.0)*r22*(cj4*cj4)))+(((2.0)*r22*sj4))+((r21*sj5*x855))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j1array[0]=IKatan2(((((-1.0)*r11*sj5*x853))+((cj5*r00*x854))+(((-0.894736842105263)*cj5*r21))+((cj5*r10*x853))+(((10.5263157894737)*py*sj0))+(((-0.894736842105263)*r20*sj5))+(((-1.0)*r01*sj5*x854))+(((10.5263157894737)*cj0*px))), ((-0.0526315789473684)*(x856.value)*(((((-200.0)*cj4*pz))+(((-1.0)*cj5*r20*x855))+(((17.0)*r22*(cj4*cj4)))+(((2.0)*r22*sj4))+((r21*sj5*x855))))));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[4];
CheckValue<IkReal> x880=IKPowWithIntegerCheck(cj4,-1);
if(!x880.valid){
continue;
}
IkReal x857=x880.value;
IkReal x858=(cj0*r01);
IkReal x859=((0.085)*sj4);
IkReal x860=((0.01)*sj5);
IkReal x861=(r11*sj0);
IkReal x862=((0.005)*x857);
IkReal x863=(cj0*r00);
IkReal x864=((0.085)*cj4);
IkReal x865=((200.0)*cj4*pz);
IkReal x866=((2.0)*r22*sj4);
IkReal x867=((0.095)*(IKcos(j1)));
IkReal x868=((0.095)*(IKsin(j1)));
IkReal x869=((1.0)*cj0*px);
IkReal x870=((1.0)*py*sj0);
IkReal x871=((17.0)*cj4*cj5);
IkReal x872=(cj5*r10*sj0);
IkReal x873=((17.0)*cj4*sj5);
IkReal x874=(x860*x861);
IkReal x875=(x858*x860);
IkReal x876=((0.01)*x872);
IkReal x877=((0.01)*cj5*x863);
IkReal x878=(x868+x874+x875);
IkReal x879=(x869+x870+x876+x877);
CheckValue<IkReal> x881=IKPowWithIntegerCheck(x857,-2);
if(!x881.valid){
continue;
}
evalcond[0]=(x867+((x862*(((((-1.0)*x865))+((r21*sj4*x873))+(((-1.0)*r20*sj4*x871))+(((17.0)*r22*(x881.value)))+x866)))));
evalcond[1]=((((0.085)*r20*sj5))+(((0.085)*cj5*r21))+x878+(((-1.0)*x879)));
evalcond[2]=((((-1.0)*x867))+((x862*(((((-1.0)*x866))+((x863*x873))+((x858*x871))+((x861*x871))+x865+((r10*sj0*x873)))))));
evalcond[3]=(((r12*sj0*x864))+(((-1.0)*cj5*x859*x863))+((cj0*r02*x864))+((sj5*x858*x859))+x878+(((-1.0)*x859*x872))+((sj5*x859*x861))+(((-1.0)*x879)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x882=(cj4*r22);
IkReal x883=((1.0)*sj1);
IkReal x884=(r20*sj1);
IkReal x885=(cj5*sj4);
IkReal x886=(cj1*r20);
IkReal x887=(cj5*r21);
IkReal x888=(r21*sj4*sj5);
if( IKabs(((((-1.0)*x883*x888))+(((-1.0)*x882*x883))+((sj5*x886))+((cj1*x887))+((x884*x885)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((sj1*x887))+(((-1.0)*x885*x886))+((sj5*x884))+((cj1*x882))+((cj1*x888)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*x883*x888))+(((-1.0)*x882*x883))+((sj5*x886))+((cj1*x887))+((x884*x885))))+IKsqr((((sj1*x887))+(((-1.0)*x885*x886))+((sj5*x884))+((cj1*x882))+((cj1*x888))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j2array[0]=IKatan2(((((-1.0)*x883*x888))+(((-1.0)*x882*x883))+((sj5*x886))+((cj1*x887))+((x884*x885))), (((sj1*x887))+(((-1.0)*x885*x886))+((sj5*x884))+((cj1*x882))+((cj1*x888))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[6];
IkReal x889=IKsin(j2);
IkReal x890=IKcos(j2);
IkReal x891=(sj0*sj5);
IkReal x892=((1.0)*r10);
IkReal x893=(cj0*r01);
IkReal x894=(cj5*sj4);
IkReal x895=((1.0)*sj0);
IkReal x896=(sj4*sj5);
IkReal x897=((0.01)*cj5);
IkReal x898=(cj1*x890);
IkReal x899=(sj1*x889);
IkReal x900=((1.0)*cj0*r00);
IkReal x901=(sj1*x890);
IkReal x902=(cj1*x889);
IkReal x903=((1.0)*x901);
IkReal x904=((1.0)*x902);
IkReal x905=(x904+x903);
evalcond[0]=(((cj5*r21))+(((-1.0)*x905))+((r20*sj5)));
CheckValue<IkReal> x906=IKPowWithIntegerCheck(cj4,-1);
if(!x906.valid){
continue;
}
evalcond[1]=((((-0.095)*cj1))+(((-0.085)*x898))+(((0.085)*x899))+(((-0.01)*r22*sj4*(x906.value)))+pz);
evalcond[2]=(((r20*x894))+(((-1.0)*x899))+(((-1.0)*r21*x896))+(((-1.0)*cj4*r22))+x898);
evalcond[3]=((((-1.0)*x898))+(((-1.0)*sj5*x900))+(((-1.0)*cj5*x893))+x899+(((-1.0)*x891*x892))+(((-1.0)*cj5*r11*x895)));
evalcond[4]=(((r11*sj4*x891))+(((-1.0)*x894*x900))+(((-1.0)*x905))+(((-1.0)*sj0*x892*x894))+((cj0*cj4*r02))+((x893*x896))+((cj4*r12*sj0)));
evalcond[5]=((((-1.0)*cj0*r00*x897))+(((0.095)*sj1))+(((-1.0)*r10*sj0*x897))+(((-1.0)*py*x895))+(((0.085)*x901))+(((0.085)*x902))+(((0.01)*sj5*x893))+(((0.01)*r11*x891))+(((-1.0)*cj0*px)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
}
}

}

}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal x907=((1.0)*cj5);
IkReal x908=((1.0)*sj5);
IkReal x909=((((-1.0)*r21*sj4*x908))+((cj5*r20*sj4))+(((-1.0)*cj4*r22)));
j0eval[0]=x909;
j0eval[1]=((IKabs(((((-1.0)*r11*x907))+(((-1.0)*r10*x908)))))+(IKabs(((((-1.0)*r00*x908))+(((-1.0)*r01*x907))))));
j0eval[2]=IKsign(x909);
if( IKabs(j0eval[0]) < 0.0000010000000000  || IKabs(j0eval[1]) < 0.0000010000000000  || IKabs(j0eval[2]) < 0.0000010000000000  )
{
{
IkReal j0eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal x910=(sj4*sj5);
IkReal x911=((1.0)*cj5*sj4);
IkReal x912=((((-1.0)*cj5*r21))+(((-1.0)*r20*sj5)));
j0eval[0]=x912;
j0eval[1]=IKsign(x912);
j0eval[2]=((IKabs(((((-1.0)*r00*x911))+((r01*x910))+((cj4*r02)))))+(IKabs((((r11*x910))+(((-1.0)*r10*x911))+((cj4*r12))))));
if( IKabs(j0eval[0]) < 0.0000010000000000  || IKabs(j0eval[1]) < 0.0000010000000000  || IKabs(j0eval[2]) < 0.0000010000000000  )
{
{
IkReal j0eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal x913=((1.0)*cj5);
IkReal x914=(r21*sj4);
IkReal x915=((0.01)*cj5);
IkReal x916=((100.0)*cj4);
IkReal x917=((0.01)*sj5);
IkReal x918=(r20*sj4);
IkReal x919=(rxp1_2*sj5);
IkReal x920=(rxp2_2*sj4);
j0eval[0]=((((-100.0)*x920))+(((-1.0)*x913*x914))+(((-1.0)*cj5*rxp0_2*x916))+(((-1.0)*sj5*x918))+((x916*x919)));
j0eval[1]=((IKabs(((((-1.0)*r00*x915))+(((-1.0)*px))+((r01*x917)))))+(IKabs((((r11*x917))+(((-1.0)*py))+(((-1.0)*r10*x915))))));
j0eval[2]=IKsign(((((-1.0)*cj4*rxp0_2*x913))+(((-1.0)*x920))+(((-1.0)*x914*x915))+((cj4*x919))+(((-1.0)*x917*x918))));
if( IKabs(j0eval[0]) < 0.0000010000000000  || IKabs(j0eval[1]) < 0.0000010000000000  || IKabs(j0eval[2]) < 0.0000010000000000  )
{
continue; // 1 cases reached

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x921=((0.01)*cj5);
IkReal x922=((0.01)*sj5);
CheckValue<IkReal> x923=IKPowWithIntegerCheck(IKsign(((((-1.0)*r20*sj4*x922))+(((-1.0)*cj4*cj5*rxp0_2))+(((-1.0)*r21*sj4*x921))+((cj4*rxp1_2*sj5))+(((-1.0)*rxp2_2*sj4)))),-1);
if(!x923.valid){
continue;
}
CheckValue<IkReal> x924 = IKatan2WithCheck(IkReal(((((-1.0)*r10*x921))+(((-1.0)*py))+((r11*x922)))),IkReal(((((-1.0)*px))+((r01*x922))+(((-1.0)*r00*x921)))),IKFAST_ATAN2_MAGTHRESH);
if(!x924.valid){
continue;
}
j0array[0]=((-1.5707963267949)+(((1.5707963267949)*(x923.value)))+(x924.value));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[5];
IkReal x925=IKsin(j0);
IkReal x926=IKcos(j0);
IkReal x927=(r11*sj5);
IkReal x928=((1.0)*r02);
IkReal x929=((1.0)*r12);
IkReal x930=((1.0)*r01);
IkReal x931=((1.0)*r10);
IkReal x932=(sj4*x926);
IkReal x933=(sj5*x925);
IkReal x934=(cj5*x925);
IkReal x935=(cj4*x926);
IkReal x936=(sj4*x925);
IkReal x937=(cj4*x925);
IkReal x938=((0.01)*x926);
IkReal x939=((1.0)*x926);
evalcond[0]=((((-1.0)*cj5*r11*x939))+((r01*x934))+((r00*x933))+(((-1.0)*sj5*x926*x931)));
evalcond[1]=((((0.01)*r00*x934))+((x927*x938))+(((-1.0)*cj5*r10*x938))+(((-0.01)*r01*x933))+(((-1.0)*py*x939))+((px*x925)));
evalcond[2]=(((r00*sj4*x934))+(((-1.0)*cj5*x931*x932))+((x927*x932))+(((-1.0)*x928*x937))+((r12*x935))+(((-1.0)*sj4*x930*x933)));
evalcond[3]=((-1.0)+(((-1.0)*cj5*x931*x935))+((x927*x935))+(((-1.0)*x929*x932))+((cj4*r00*x934))+(((-1.0)*cj4*x930*x933))+((r02*x936)));
evalcond[4]=(((x927*x937))+(((-1.0)*x928*x932))+(((-1.0)*cj5*r00*x935))+(((-1.0)*x929*x936))+(((-1.0)*cj4*x931*x934))+((r01*sj5*x935)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j1eval[1];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j1eval[0]=cj4;
if( IKabs(j1eval[0]) < 0.0000010000000000  )
{
continue; // 1 cases reached

} else
{
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
IkReal x940=((0.105263157894737)*sj0);
IkReal x941=((0.105263157894737)*cj0);
IkReal x942=((17.0)*cj4*sj4);
CheckValue<IkReal> x943=IKPowWithIntegerCheck(cj4,-1);
if(!x943.valid){
continue;
}
if( IKabs((((cj5*r10*x940))+(((-1.0)*r01*sj5*x941))+(((0.894736842105263)*r20*sj5))+(((10.5263157894737)*py*sj0))+(((-1.0)*r11*sj5*x940))+((cj5*r00*x941))+(((0.894736842105263)*cj5*r21))+(((10.5263157894737)*cj0*px)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-0.0526315789473684)*(x943.value)*(((((-200.0)*cj4*pz))+(((17.0)*r22*(cj4*cj4)))+(((2.0)*r22*sj4))+((r21*sj5*x942))+(((-1.0)*cj5*r20*x942)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((cj5*r10*x940))+(((-1.0)*r01*sj5*x941))+(((0.894736842105263)*r20*sj5))+(((10.5263157894737)*py*sj0))+(((-1.0)*r11*sj5*x940))+((cj5*r00*x941))+(((0.894736842105263)*cj5*r21))+(((10.5263157894737)*cj0*px))))+IKsqr(((-0.0526315789473684)*(x943.value)*(((((-200.0)*cj4*pz))+(((17.0)*r22*(cj4*cj4)))+(((2.0)*r22*sj4))+((r21*sj5*x942))+(((-1.0)*cj5*r20*x942))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j1array[0]=IKatan2((((cj5*r10*x940))+(((-1.0)*r01*sj5*x941))+(((0.894736842105263)*r20*sj5))+(((10.5263157894737)*py*sj0))+(((-1.0)*r11*sj5*x940))+((cj5*r00*x941))+(((0.894736842105263)*cj5*r21))+(((10.5263157894737)*cj0*px))), ((-0.0526315789473684)*(x943.value)*(((((-200.0)*cj4*pz))+(((17.0)*r22*(cj4*cj4)))+(((2.0)*r22*sj4))+((r21*sj5*x942))+(((-1.0)*cj5*r20*x942))))));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[4];
CheckValue<IkReal> x967=IKPowWithIntegerCheck(cj4,-1);
if(!x967.valid){
continue;
}
IkReal x944=x967.value;
IkReal x945=(cj0*r01);
IkReal x946=((0.085)*sj4);
IkReal x947=((0.01)*sj5);
IkReal x948=(r11*sj0);
IkReal x949=((0.005)*x944);
IkReal x950=(py*sj0);
IkReal x951=(cj0*r00);
IkReal x952=(cj0*px);
IkReal x953=((0.085)*cj4);
IkReal x954=((0.095)*(IKcos(j1)));
IkReal x955=((2.0)*r22*sj4);
IkReal x956=((200.0)*cj4*pz);
IkReal x957=((0.095)*(IKsin(j1)));
IkReal x958=((17.0)*cj4*cj5);
IkReal x959=(cj5*r10*sj0);
IkReal x960=((17.0)*cj4*sj5);
IkReal x961=(x947*x948);
IkReal x962=(x945*x947);
IkReal x963=((0.01)*x959);
IkReal x964=((0.01)*cj5*x951);
IkReal x965=(x963+x964);
IkReal x966=(x962+x961+x957);
CheckValue<IkReal> x968=IKPowWithIntegerCheck(x944,-2);
if(!x968.valid){
continue;
}
evalcond[0]=(x954+((x949*((((r21*sj4*x960))+(((-1.0)*r20*sj4*x958))+(((-1.0)*x956))+(((17.0)*r22*(x968.value)))+x955)))));
evalcond[1]=((((0.085)*r20*sj5))+(((0.085)*cj5*r21))+x965+x952+x950+(((-1.0)*x966)));
evalcond[2]=(((x949*((((x951*x960))+((x948*x958))+((r10*sj0*x960))+((x945*x958))+(((-1.0)*x956))+x955))))+x954);
evalcond[3]=(((sj5*x946*x948))+((sj5*x945*x946))+(((-1.0)*cj5*x946*x951))+((r12*sj0*x953))+((cj0*r02*x953))+(((-1.0)*x952))+(((-1.0)*x950))+(((-1.0)*x946*x959))+x966+(((-1.0)*x965)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x969=((1.0)*sj1);
IkReal x970=(r20*sj5);
IkReal x971=(cj5*r21);
IkReal x972=((1.0)*cj1);
IkReal x973=(cj4*r22);
IkReal x974=(r21*sj4*sj5);
IkReal x975=(cj5*r20*sj4);
if( IKabs(((((-1.0)*x969*x973))+(((-1.0)*x969*x974))+(((-1.0)*x971*x972))+((sj1*x975))+(((-1.0)*x970*x972)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*x969*x971))+(((-1.0)*x969*x970))+((cj1*x974))+((cj1*x973))+(((-1.0)*x972*x975)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*x969*x973))+(((-1.0)*x969*x974))+(((-1.0)*x971*x972))+((sj1*x975))+(((-1.0)*x970*x972))))+IKsqr(((((-1.0)*x969*x971))+(((-1.0)*x969*x970))+((cj1*x974))+((cj1*x973))+(((-1.0)*x972*x975))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j2array[0]=IKatan2(((((-1.0)*x969*x973))+(((-1.0)*x969*x974))+(((-1.0)*x971*x972))+((sj1*x975))+(((-1.0)*x970*x972))), ((((-1.0)*x969*x971))+(((-1.0)*x969*x970))+((cj1*x974))+((cj1*x973))+(((-1.0)*x972*x975))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[6];
IkReal x976=IKsin(j2);
IkReal x977=IKcos(j2);
IkReal x978=(sj0*sj5);
IkReal x979=((1.0)*r10);
IkReal x980=(cj5*sj4);
IkReal x981=((1.0)*cj0);
IkReal x982=((1.0)*sj0);
IkReal x983=((0.01)*cj5);
IkReal x984=(cj1*x977);
IkReal x985=(sj1*x976);
IkReal x986=(cj1*x976);
IkReal x987=(cj0*r01*sj5);
IkReal x988=(sj1*x977);
IkReal x989=((1.0)*x985);
evalcond[0]=(((cj5*r21))+x988+x986+((r20*sj5)));
CheckValue<IkReal> x990=IKPowWithIntegerCheck(cj4,-1);
if(!x990.valid){
continue;
}
evalcond[1]=((((0.085)*x985))+(((-0.095)*cj1))+(((-0.01)*r22*sj4*(x990.value)))+pz+(((-0.085)*x984)));
evalcond[2]=((((-1.0)*x989))+(((-1.0)*r21*sj4*sj5))+(((-1.0)*cj4*r22))+((r20*x980))+x984);
evalcond[3]=((((-1.0)*x989))+(((-1.0)*cj5*r01*x981))+(((-1.0)*x978*x979))+(((-1.0)*r00*sj5*x981))+x984+(((-1.0)*cj5*r11*x982)));
evalcond[4]=((((-1.0)*sj0*x979*x980))+(((-1.0)*x986))+(((-1.0)*x988))+((sj4*x987))+((cj0*cj4*r02))+((r11*sj4*x978))+(((-1.0)*r00*x980*x981))+((cj4*r12*sj0)));
evalcond[5]=((((0.085)*x988))+(((0.085)*x986))+(((-1.0)*px*x981))+(((0.095)*sj1))+(((0.01)*r11*x978))+(((0.01)*x987))+(((-1.0)*py*x982))+(((-1.0)*r10*sj0*x983))+(((-1.0)*cj0*r00*x983)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
}
}

}

}
}
}

}

}

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x991=(sj4*sj5);
IkReal x992=((1.0)*cj5*sj4);
CheckValue<IkReal> x993 = IKatan2WithCheck(IkReal(((((-1.0)*r10*x992))+((cj4*r12))+((r11*x991)))),IkReal((((r01*x991))+(((-1.0)*r00*x992))+((cj4*r02)))),IKFAST_ATAN2_MAGTHRESH);
if(!x993.valid){
continue;
}
CheckValue<IkReal> x994=IKPowWithIntegerCheck(IKsign(((((-1.0)*cj5*r21))+(((-1.0)*r20*sj5)))),-1);
if(!x994.valid){
continue;
}
j0array[0]=((-1.5707963267949)+(x993.value)+(((1.5707963267949)*(x994.value))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[5];
IkReal x995=IKsin(j0);
IkReal x996=IKcos(j0);
IkReal x997=(r11*sj5);
IkReal x998=((1.0)*r02);
IkReal x999=((1.0)*r12);
IkReal x1000=((1.0)*r01);
IkReal x1001=((1.0)*r10);
IkReal x1002=(sj4*x996);
IkReal x1003=(sj5*x995);
IkReal x1004=(cj5*x995);
IkReal x1005=(cj4*x996);
IkReal x1006=(sj4*x995);
IkReal x1007=(cj4*x995);
IkReal x1008=((0.01)*x996);
IkReal x1009=((1.0)*x996);
evalcond[0]=(((r01*x1004))+(((-1.0)*sj5*x1001*x996))+(((-1.0)*cj5*r11*x1009))+((r00*x1003)));
evalcond[1]=((((-1.0)*py*x1009))+((px*x995))+(((-1.0)*cj5*r10*x1008))+(((0.01)*r00*x1004))+((x1008*x997))+(((-0.01)*r01*x1003)));
evalcond[2]=(((r00*sj4*x1004))+(((-1.0)*x1007*x998))+(((-1.0)*cj5*x1001*x1002))+(((-1.0)*sj4*x1000*x1003))+((x1002*x997))+((r12*x1005)));
evalcond[3]=((-1.0)+(((-1.0)*x1002*x999))+((r02*x1006))+(((-1.0)*cj4*x1000*x1003))+(((-1.0)*cj5*x1001*x1005))+((cj4*r00*x1004))+((x1005*x997)));
evalcond[4]=((((-1.0)*x1002*x998))+(((-1.0)*cj4*x1001*x1004))+((r01*sj5*x1005))+(((-1.0)*cj5*r00*x1005))+((x1007*x997))+(((-1.0)*x1006*x999)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j1eval[1];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j1eval[0]=cj4;
if( IKabs(j1eval[0]) < 0.0000010000000000  )
{
continue; // 1 cases reached

} else
{
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
IkReal x1010=((0.105263157894737)*sj0);
IkReal x1011=((0.105263157894737)*cj0);
IkReal x1012=((17.0)*cj4*sj4);
CheckValue<IkReal> x1013=IKPowWithIntegerCheck(cj4,-1);
if(!x1013.valid){
continue;
}
if( IKabs((((cj5*r00*x1011))+(((-1.0)*r01*sj5*x1011))+(((0.894736842105263)*r20*sj5))+(((-1.0)*r11*sj5*x1010))+((cj5*r10*x1010))+(((10.5263157894737)*py*sj0))+(((0.894736842105263)*cj5*r21))+(((10.5263157894737)*cj0*px)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-0.0526315789473684)*(x1013.value)*(((((-200.0)*cj4*pz))+((r21*sj5*x1012))+(((17.0)*r22*(cj4*cj4)))+(((2.0)*r22*sj4))+(((-1.0)*cj5*r20*x1012)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((cj5*r00*x1011))+(((-1.0)*r01*sj5*x1011))+(((0.894736842105263)*r20*sj5))+(((-1.0)*r11*sj5*x1010))+((cj5*r10*x1010))+(((10.5263157894737)*py*sj0))+(((0.894736842105263)*cj5*r21))+(((10.5263157894737)*cj0*px))))+IKsqr(((-0.0526315789473684)*(x1013.value)*(((((-200.0)*cj4*pz))+((r21*sj5*x1012))+(((17.0)*r22*(cj4*cj4)))+(((2.0)*r22*sj4))+(((-1.0)*cj5*r20*x1012))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j1array[0]=IKatan2((((cj5*r00*x1011))+(((-1.0)*r01*sj5*x1011))+(((0.894736842105263)*r20*sj5))+(((-1.0)*r11*sj5*x1010))+((cj5*r10*x1010))+(((10.5263157894737)*py*sj0))+(((0.894736842105263)*cj5*r21))+(((10.5263157894737)*cj0*px))), ((-0.0526315789473684)*(x1013.value)*(((((-200.0)*cj4*pz))+((r21*sj5*x1012))+(((17.0)*r22*(cj4*cj4)))+(((2.0)*r22*sj4))+(((-1.0)*cj5*r20*x1012))))));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[4];
CheckValue<IkReal> x1037=IKPowWithIntegerCheck(cj4,-1);
if(!x1037.valid){
continue;
}
IkReal x1014=x1037.value;
IkReal x1015=(cj0*r01);
IkReal x1016=((0.085)*sj4);
IkReal x1017=((0.01)*sj5);
IkReal x1018=(r11*sj0);
IkReal x1019=((0.005)*x1014);
IkReal x1020=(py*sj0);
IkReal x1021=(cj0*r00);
IkReal x1022=(cj0*px);
IkReal x1023=((0.085)*cj4);
IkReal x1024=((0.095)*(IKcos(j1)));
IkReal x1025=((2.0)*r22*sj4);
IkReal x1026=((200.0)*cj4*pz);
IkReal x1027=((0.095)*(IKsin(j1)));
IkReal x1028=((17.0)*cj4*cj5);
IkReal x1029=(cj5*r10*sj0);
IkReal x1030=((17.0)*cj4*sj5);
IkReal x1031=(x1017*x1018);
IkReal x1032=(x1015*x1017);
IkReal x1033=((0.01)*x1029);
IkReal x1034=((0.01)*cj5*x1021);
IkReal x1035=(x1033+x1034);
IkReal x1036=(x1032+x1031+x1027);
CheckValue<IkReal> x1038=IKPowWithIntegerCheck(x1014,-2);
if(!x1038.valid){
continue;
}
evalcond[0]=(x1024+((x1019*((x1025+(((-1.0)*x1026))+(((-1.0)*r20*sj4*x1028))+((r21*sj4*x1030))+(((17.0)*r22*(x1038.value))))))));
evalcond[1]=((((-1.0)*x1036))+(((0.085)*r20*sj5))+x1035+x1020+x1022+(((0.085)*cj5*r21)));
evalcond[2]=(x1024+((x1019*((((x1021*x1030))+x1025+((x1015*x1028))+(((-1.0)*x1026))+((x1018*x1028))+((r10*sj0*x1030)))))));
evalcond[3]=((((-1.0)*x1035))+x1036+(((-1.0)*x1022))+(((-1.0)*x1020))+(((-1.0)*cj5*x1016*x1021))+((r12*sj0*x1023))+(((-1.0)*x1016*x1029))+((sj5*x1016*x1018))+((cj0*r02*x1023))+((sj5*x1015*x1016)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x1039=((1.0)*sj1);
IkReal x1040=(r20*sj5);
IkReal x1041=(cj5*r21);
IkReal x1042=((1.0)*cj1);
IkReal x1043=(cj4*r22);
IkReal x1044=(r21*sj4*sj5);
IkReal x1045=(cj5*r20*sj4);
if( IKabs(((((-1.0)*x1039*x1043))+(((-1.0)*x1039*x1044))+(((-1.0)*x1041*x1042))+((sj1*x1045))+(((-1.0)*x1040*x1042)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*x1039*x1040))+(((-1.0)*x1039*x1041))+((cj1*x1044))+((cj1*x1043))+(((-1.0)*x1042*x1045)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*x1039*x1043))+(((-1.0)*x1039*x1044))+(((-1.0)*x1041*x1042))+((sj1*x1045))+(((-1.0)*x1040*x1042))))+IKsqr(((((-1.0)*x1039*x1040))+(((-1.0)*x1039*x1041))+((cj1*x1044))+((cj1*x1043))+(((-1.0)*x1042*x1045))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j2array[0]=IKatan2(((((-1.0)*x1039*x1043))+(((-1.0)*x1039*x1044))+(((-1.0)*x1041*x1042))+((sj1*x1045))+(((-1.0)*x1040*x1042))), ((((-1.0)*x1039*x1040))+(((-1.0)*x1039*x1041))+((cj1*x1044))+((cj1*x1043))+(((-1.0)*x1042*x1045))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[6];
IkReal x1046=IKsin(j2);
IkReal x1047=IKcos(j2);
IkReal x1048=(sj0*sj5);
IkReal x1049=((1.0)*r10);
IkReal x1050=(cj5*sj4);
IkReal x1051=((1.0)*cj0);
IkReal x1052=((1.0)*sj0);
IkReal x1053=((0.01)*cj5);
IkReal x1054=(cj1*x1047);
IkReal x1055=(sj1*x1046);
IkReal x1056=(cj1*x1046);
IkReal x1057=(cj0*r01*sj5);
IkReal x1058=(sj1*x1047);
IkReal x1059=((1.0)*x1055);
evalcond[0]=(((cj5*r21))+x1056+x1058+((r20*sj5)));
CheckValue<IkReal> x1060=IKPowWithIntegerCheck(cj4,-1);
if(!x1060.valid){
continue;
}
evalcond[1]=((((-0.095)*cj1))+(((-0.085)*x1054))+(((-0.01)*r22*sj4*(x1060.value)))+pz+(((0.085)*x1055)));
evalcond[2]=((((-1.0)*x1059))+x1054+((r20*x1050))+(((-1.0)*r21*sj4*sj5))+(((-1.0)*cj4*r22)));
evalcond[3]=((((-1.0)*x1059))+x1054+(((-1.0)*cj5*r01*x1051))+(((-1.0)*r00*sj5*x1051))+(((-1.0)*x1048*x1049))+(((-1.0)*cj5*r11*x1052)));
evalcond[4]=(((r11*sj4*x1048))+((cj0*cj4*r02))+(((-1.0)*sj0*x1049*x1050))+(((-1.0)*x1056))+(((-1.0)*x1058))+(((-1.0)*r00*x1050*x1051))+((sj4*x1057))+((cj4*r12*sj0)));
evalcond[5]=((((-1.0)*r10*sj0*x1053))+(((0.095)*sj1))+(((-1.0)*cj0*r00*x1053))+(((-1.0)*px*x1051))+(((-1.0)*py*x1052))+(((0.085)*x1058))+(((0.085)*x1056))+(((0.01)*r11*x1048))+(((0.01)*x1057)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
}
}

}

}
}
}

}

}

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x1061=((1.0)*cj5);
IkReal x1062=((1.0)*sj5);
CheckValue<IkReal> x1063 = IKatan2WithCheck(IkReal(((((-1.0)*r11*x1061))+(((-1.0)*r10*x1062)))),IkReal(((((-1.0)*r01*x1061))+(((-1.0)*r00*x1062)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1063.valid){
continue;
}
CheckValue<IkReal> x1064=IKPowWithIntegerCheck(IKsign(((((-1.0)*r21*sj4*x1062))+((cj5*r20*sj4))+(((-1.0)*cj4*r22)))),-1);
if(!x1064.valid){
continue;
}
j0array[0]=((-1.5707963267949)+(x1063.value)+(((1.5707963267949)*(x1064.value))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[5];
IkReal x1065=IKsin(j0);
IkReal x1066=IKcos(j0);
IkReal x1067=(r11*sj5);
IkReal x1068=((1.0)*r02);
IkReal x1069=((1.0)*r12);
IkReal x1070=((1.0)*r01);
IkReal x1071=((1.0)*r10);
IkReal x1072=(sj4*x1066);
IkReal x1073=(sj5*x1065);
IkReal x1074=(cj5*x1065);
IkReal x1075=(cj4*x1066);
IkReal x1076=(sj4*x1065);
IkReal x1077=(cj4*x1065);
IkReal x1078=((0.01)*x1066);
IkReal x1079=((1.0)*x1066);
evalcond[0]=(((r00*x1073))+(((-1.0)*cj5*r11*x1079))+((r01*x1074))+(((-1.0)*sj5*x1066*x1071)));
evalcond[1]=(((x1067*x1078))+((px*x1065))+(((-1.0)*py*x1079))+(((-0.01)*r01*x1073))+(((0.01)*r00*x1074))+(((-1.0)*cj5*r10*x1078)));
evalcond[2]=(((r12*x1075))+(((-1.0)*cj5*x1071*x1072))+((x1067*x1072))+(((-1.0)*x1068*x1077))+((r00*sj4*x1074))+(((-1.0)*sj4*x1070*x1073)));
evalcond[3]=((-1.0)+(((-1.0)*cj5*x1071*x1075))+((cj4*r00*x1074))+(((-1.0)*cj4*x1070*x1073))+((x1067*x1075))+(((-1.0)*x1069*x1072))+((r02*x1076)));
evalcond[4]=(((x1067*x1077))+((r01*sj5*x1075))+(((-1.0)*x1068*x1072))+(((-1.0)*cj4*x1071*x1074))+(((-1.0)*cj5*r00*x1075))+(((-1.0)*x1069*x1076)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j1eval[1];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j1eval[0]=cj4;
if( IKabs(j1eval[0]) < 0.0000010000000000  )
{
continue; // 1 cases reached

} else
{
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
IkReal x1080=((0.105263157894737)*sj0);
IkReal x1081=((0.105263157894737)*cj0);
IkReal x1082=((17.0)*cj4*sj4);
CheckValue<IkReal> x1083=IKPowWithIntegerCheck(cj4,-1);
if(!x1083.valid){
continue;
}
if( IKabs((((cj5*r10*x1080))+(((-1.0)*r11*sj5*x1080))+(((-1.0)*r01*sj5*x1081))+(((0.894736842105263)*r20*sj5))+(((10.5263157894737)*py*sj0))+((cj5*r00*x1081))+(((0.894736842105263)*cj5*r21))+(((10.5263157894737)*cj0*px)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-0.0526315789473684)*(x1083.value)*(((((-200.0)*cj4*pz))+(((17.0)*r22*(cj4*cj4)))+(((2.0)*r22*sj4))+(((-1.0)*cj5*r20*x1082))+((r21*sj5*x1082)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((cj5*r10*x1080))+(((-1.0)*r11*sj5*x1080))+(((-1.0)*r01*sj5*x1081))+(((0.894736842105263)*r20*sj5))+(((10.5263157894737)*py*sj0))+((cj5*r00*x1081))+(((0.894736842105263)*cj5*r21))+(((10.5263157894737)*cj0*px))))+IKsqr(((-0.0526315789473684)*(x1083.value)*(((((-200.0)*cj4*pz))+(((17.0)*r22*(cj4*cj4)))+(((2.0)*r22*sj4))+(((-1.0)*cj5*r20*x1082))+((r21*sj5*x1082))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j1array[0]=IKatan2((((cj5*r10*x1080))+(((-1.0)*r11*sj5*x1080))+(((-1.0)*r01*sj5*x1081))+(((0.894736842105263)*r20*sj5))+(((10.5263157894737)*py*sj0))+((cj5*r00*x1081))+(((0.894736842105263)*cj5*r21))+(((10.5263157894737)*cj0*px))), ((-0.0526315789473684)*(x1083.value)*(((((-200.0)*cj4*pz))+(((17.0)*r22*(cj4*cj4)))+(((2.0)*r22*sj4))+(((-1.0)*cj5*r20*x1082))+((r21*sj5*x1082))))));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[4];
CheckValue<IkReal> x1107=IKPowWithIntegerCheck(cj4,-1);
if(!x1107.valid){
continue;
}
IkReal x1084=x1107.value;
IkReal x1085=(cj0*r01);
IkReal x1086=((0.085)*sj4);
IkReal x1087=((0.01)*sj5);
IkReal x1088=(r11*sj0);
IkReal x1089=((0.005)*x1084);
IkReal x1090=(py*sj0);
IkReal x1091=(cj0*r00);
IkReal x1092=(cj0*px);
IkReal x1093=((0.085)*cj4);
IkReal x1094=((0.095)*(IKcos(j1)));
IkReal x1095=((2.0)*r22*sj4);
IkReal x1096=((200.0)*cj4*pz);
IkReal x1097=((0.095)*(IKsin(j1)));
IkReal x1098=((17.0)*cj4*cj5);
IkReal x1099=(cj5*r10*sj0);
IkReal x1100=((17.0)*cj4*sj5);
IkReal x1101=(x1087*x1088);
IkReal x1102=(x1085*x1087);
IkReal x1103=((0.01)*x1099);
IkReal x1104=((0.01)*cj5*x1091);
IkReal x1105=(x1104+x1103);
IkReal x1106=(x1102+x1101+x1097);
CheckValue<IkReal> x1108=IKPowWithIntegerCheck(x1084,-2);
if(!x1108.valid){
continue;
}
evalcond[0]=(x1094+((x1089*((x1095+(((-1.0)*x1096))+((r21*sj4*x1100))+(((17.0)*r22*(x1108.value)))+(((-1.0)*r20*sj4*x1098)))))));
evalcond[1]=(x1105+(((0.085)*r20*sj5))+x1090+x1092+(((0.085)*cj5*r21))+(((-1.0)*x1106)));
evalcond[2]=(x1094+((x1089*((x1095+((x1085*x1098))+(((-1.0)*x1096))+((x1091*x1100))+((x1088*x1098))+((r10*sj0*x1100)))))));
evalcond[3]=((((-1.0)*x1086*x1099))+x1106+((cj0*r02*x1093))+((sj5*x1086*x1088))+((r12*sj0*x1093))+((sj5*x1085*x1086))+(((-1.0)*cj5*x1086*x1091))+(((-1.0)*x1092))+(((-1.0)*x1090))+(((-1.0)*x1105)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x1109=((1.0)*sj1);
IkReal x1110=(r20*sj5);
IkReal x1111=(cj5*r21);
IkReal x1112=((1.0)*cj1);
IkReal x1113=(cj4*r22);
IkReal x1114=(r21*sj4*sj5);
IkReal x1115=(cj5*r20*sj4);
if( IKabs(((((-1.0)*x1109*x1113))+(((-1.0)*x1109*x1114))+((sj1*x1115))+(((-1.0)*x1110*x1112))+(((-1.0)*x1111*x1112)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*x1109*x1111))+(((-1.0)*x1109*x1110))+(((-1.0)*x1112*x1115))+((cj1*x1113))+((cj1*x1114)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*x1109*x1113))+(((-1.0)*x1109*x1114))+((sj1*x1115))+(((-1.0)*x1110*x1112))+(((-1.0)*x1111*x1112))))+IKsqr(((((-1.0)*x1109*x1111))+(((-1.0)*x1109*x1110))+(((-1.0)*x1112*x1115))+((cj1*x1113))+((cj1*x1114))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j2array[0]=IKatan2(((((-1.0)*x1109*x1113))+(((-1.0)*x1109*x1114))+((sj1*x1115))+(((-1.0)*x1110*x1112))+(((-1.0)*x1111*x1112))), ((((-1.0)*x1109*x1111))+(((-1.0)*x1109*x1110))+(((-1.0)*x1112*x1115))+((cj1*x1113))+((cj1*x1114))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[6];
IkReal x1116=IKsin(j2);
IkReal x1117=IKcos(j2);
IkReal x1118=(sj0*sj5);
IkReal x1119=((1.0)*r10);
IkReal x1120=(cj5*sj4);
IkReal x1121=((1.0)*cj0);
IkReal x1122=((1.0)*sj0);
IkReal x1123=((0.01)*cj5);
IkReal x1124=(cj1*x1117);
IkReal x1125=(sj1*x1116);
IkReal x1126=(cj1*x1116);
IkReal x1127=(cj0*r01*sj5);
IkReal x1128=(sj1*x1117);
IkReal x1129=((1.0)*x1125);
evalcond[0]=(((cj5*r21))+x1128+x1126+((r20*sj5)));
CheckValue<IkReal> x1130=IKPowWithIntegerCheck(cj4,-1);
if(!x1130.valid){
continue;
}
evalcond[1]=((((-0.095)*cj1))+(((-0.085)*x1124))+(((-0.01)*r22*sj4*(x1130.value)))+pz+(((0.085)*x1125)));
evalcond[2]=(x1124+(((-1.0)*x1129))+(((-1.0)*r21*sj4*sj5))+(((-1.0)*cj4*r22))+((r20*x1120)));
evalcond[3]=((((-1.0)*cj5*r11*x1122))+x1124+(((-1.0)*r00*sj5*x1121))+(((-1.0)*cj5*r01*x1121))+(((-1.0)*x1129))+(((-1.0)*x1118*x1119)));
evalcond[4]=((((-1.0)*r00*x1120*x1121))+(((-1.0)*sj0*x1119*x1120))+((sj4*x1127))+((cj0*cj4*r02))+(((-1.0)*x1128))+(((-1.0)*x1126))+((r11*sj4*x1118))+((cj4*r12*sj0)));
evalcond[5]=((((0.01)*x1127))+(((-1.0)*cj0*r00*x1123))+(((0.095)*sj1))+(((-1.0)*r10*sj0*x1123))+(((-1.0)*py*x1122))+(((0.01)*r11*x1118))+(((0.085)*x1128))+(((0.085)*x1126))+(((-1.0)*px*x1121)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
}
}

}

}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x1131=((((10000.0)*(rxp0_2*rxp0_2)))+(((10000.0)*(rxp1_2*rxp1_2))));
IkReal x1138 = x1131;
if(IKabs(x1138)==0){
continue;
}
IkReal x1132=pow(x1138,-0.5);
if((x1131) < -0.00001)
continue;
IkReal x1133=IKabs(IKsqrt(x1131));
IkReal x1134=((100.0)*x1132);
CheckValue<IkReal> x1139=IKPowWithIntegerCheck(x1133,-1);
if(!x1139.valid){
continue;
}
IkReal x1135=x1139.value;
IkReal x1136=(r22*x1135);
if((((1.0)+(((-1.0)*(x1136*x1136))))) < -0.00001)
continue;
IkReal x1137=IKsqrt(((1.0)+(((-1.0)*(x1136*x1136)))));
CheckValue<IkReal> x1140 = IKatan2WithCheck(IkReal(((100.0)*rxp1_2)),IkReal(((100.0)*rxp0_2)),IKFAST_ATAN2_MAGTHRESH);
if(!x1140.valid){
continue;
}
if( (x1136) < -1-IKFAST_SINCOS_THRESH || (x1136) > 1+IKFAST_SINCOS_THRESH )
    continue;
IkReal gconst52=((((-1.0)*(x1140.value)))+(IKasin(x1136)));
IkReal gconst53=(((rxp0_2*x1134*x1136))+(((-1.0)*rxp1_2*x1134*x1137)));
IkReal gconst54=(((rxp0_2*x1134*x1137))+((rxp1_2*x1134*x1136)));
if((((((10000.0)*(rxp0_2*rxp0_2)))+(((10000.0)*(rxp1_2*rxp1_2))))) < -0.00001)
continue;
CheckValue<IkReal> x1141=IKPowWithIntegerCheck(IKabs(IKsqrt(((((10000.0)*(rxp0_2*rxp0_2)))+(((10000.0)*(rxp1_2*rxp1_2)))))),-1);
if(!x1141.valid){
continue;
}
if( ((r22*(x1141.value))) < -1-IKFAST_SINCOS_THRESH || ((r22*(x1141.value))) > 1+IKFAST_SINCOS_THRESH )
    continue;
CheckValue<IkReal> x1142 = IKatan2WithCheck(IkReal(((100.0)*rxp1_2)),IkReal(((100.0)*rxp0_2)),IKFAST_ATAN2_MAGTHRESH);
if(!x1142.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((((-1.0)*(IKasin((r22*(x1141.value))))))+j5+(x1142.value))))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x1143=((1.0)*cj3);
IkReal x1144=((0.01)*cj3*gconst54);
IkReal x1145=((0.01)*cj3*gconst53);
CheckValue<IkReal> x1146 = IKatan2WithCheck(IkReal((((r11*x1145))+(((-1.0)*r10*x1144))+(((-1.0)*py*x1143)))),IkReal(((((-1.0)*r00*x1144))+(((-1.0)*px*x1143))+((r01*x1145)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1146.valid){
continue;
}
CheckValue<IkReal> x1147=IKPowWithIntegerCheck(IKsign((((gconst54*rxp1_2))+((r22*(((((-0.01)*(gconst54*gconst54)))+(((-0.01)*(gconst53*gconst53)))))))+((gconst53*rxp0_2)))),-1);
if(!x1147.valid){
continue;
}
j0array[0]=((-1.5707963267949)+(x1146.value)+(((1.5707963267949)*(x1147.value))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[4];
IkReal x1148=IKsin(j0);
IkReal x1149=IKcos(j0);
IkReal x1150=(cj4*gconst54);
IkReal x1151=(gconst53*r11);
IkReal x1152=((1.0)*sj4);
IkReal x1153=((1.0)*cj4);
IkReal x1154=(gconst54*sj4);
IkReal x1155=(cj4*x1149);
IkReal x1156=(r00*x1148);
IkReal x1157=(r02*x1148);
IkReal x1158=((0.01)*x1149);
IkReal x1159=((1.0)*x1149);
IkReal x1160=(r10*x1159);
IkReal x1161=(gconst53*r01*x1148);
evalcond[0]=(cj3+(((-1.0)*gconst53*x1160))+((gconst54*r01*x1148))+((gconst53*x1156))+(((-1.0)*gconst54*r11*x1159)));
evalcond[1]=((((-0.01)*x1161))+(((-1.0)*gconst54*r10*x1158))+(((-1.0)*py*x1159))+((x1151*x1158))+((px*x1148))+(((0.01)*gconst54*x1156)));
evalcond[2]=(((r12*x1155))+(((-1.0)*gconst54*r10*x1149*x1152))+(((-1.0)*x1152*x1161))+((sj4*x1149*x1151))+(((-1.0)*x1153*x1157))+((x1154*x1156)));
evalcond[3]=(sj3+(((-1.0)*x1150*x1160))+(((-1.0)*x1153*x1161))+((x1150*x1156))+((x1151*x1155))+(((-1.0)*r12*x1149*x1152))+((sj4*x1157)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
IkReal x1162=((0.894736842105263)*sj4);
IkReal x1163=((0.105263157894737)*gconst53);
IkReal x1164=(cj0*r01);
IkReal x1165=(r11*sj0);
IkReal x1166=((0.894736842105263)*cj4);
IkReal x1167=((0.105263157894737)*gconst54);
IkReal x1168=(cj0*r00);
IkReal x1169=(gconst54*r10*sj0);
if( IKabs(((((-1.0)*x1163*x1164))+(((-1.0)*x1163*x1165))+((x1162*x1169))+(((-1.0)*gconst53*x1162*x1164))+(((-1.0)*gconst53*x1162*x1165))+((gconst54*x1162*x1168))+(((-1.0)*cj0*r02*x1166))+(((10.5263157894737)*py*sj0))+((r10*sj0*x1167))+(((-1.0)*r12*sj0*x1166))+((x1167*x1168))+(((10.5263157894737)*cj0*px)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*r21*x1163))+(((-1.0)*gconst53*r21*x1162))+((r20*x1167))+(((10.5263157894737)*pz))+(((-1.0)*r22*x1166))+((gconst54*r20*x1162)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*x1163*x1164))+(((-1.0)*x1163*x1165))+((x1162*x1169))+(((-1.0)*gconst53*x1162*x1164))+(((-1.0)*gconst53*x1162*x1165))+((gconst54*x1162*x1168))+(((-1.0)*cj0*r02*x1166))+(((10.5263157894737)*py*sj0))+((r10*sj0*x1167))+(((-1.0)*r12*sj0*x1166))+((x1167*x1168))+(((10.5263157894737)*cj0*px))))+IKsqr(((((-1.0)*r21*x1163))+(((-1.0)*gconst53*r21*x1162))+((r20*x1167))+(((10.5263157894737)*pz))+(((-1.0)*r22*x1166))+((gconst54*r20*x1162))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j1array[0]=IKatan2(((((-1.0)*x1163*x1164))+(((-1.0)*x1163*x1165))+((x1162*x1169))+(((-1.0)*gconst53*x1162*x1164))+(((-1.0)*gconst53*x1162*x1165))+((gconst54*x1162*x1168))+(((-1.0)*cj0*r02*x1166))+(((10.5263157894737)*py*sj0))+((r10*sj0*x1167))+(((-1.0)*r12*sj0*x1166))+((x1167*x1168))+(((10.5263157894737)*cj0*px))), ((((-1.0)*r21*x1163))+(((-1.0)*gconst53*r21*x1162))+((r20*x1167))+(((10.5263157894737)*pz))+(((-1.0)*r22*x1166))+((gconst54*r20*x1162))));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[6];
IkReal x1170=IKcos(j1);
IkReal x1171=IKsin(j1);
IkReal x1172=(cj0*gconst53);
IkReal x1173=((0.01)*cj3);
IkReal x1174=((0.095)*sj3);
IkReal x1175=((0.01)*gconst54);
IkReal x1176=((0.085)*r00);
IkReal x1177=((0.085)*sj4);
IkReal x1178=(gconst54*sj4);
IkReal x1179=(r11*sj0);
IkReal x1180=(cj0*r00);
IkReal x1181=((0.095)*cj3);
IkReal x1182=(cj0*px);
IkReal x1183=((0.085)*r20);
IkReal x1184=((1.0)*pz);
IkReal x1185=(gconst53*r21);
IkReal x1186=(cj0*gconst54);
IkReal x1187=(gconst54*r20);
IkReal x1188=(r12*sj0);
IkReal x1189=(py*sj0);
IkReal x1190=((0.085)*r01);
IkReal x1191=((0.085)*gconst54);
IkReal x1192=(r10*sj0);
IkReal x1193=(cj0*r02);
IkReal x1194=((1.0)*sj3);
IkReal x1195=(cj4*gconst54);
IkReal x1196=((0.01)*sj3);
IkReal x1197=((0.085)*cj4);
IkReal x1198=((0.085)*x1192);
IkReal x1199=(gconst53*x1197);
evalcond[0]=((((0.095)*x1170))+(((-1.0)*r20*x1175))+((r22*x1197))+((x1177*x1185))+(((-1.0)*x1184))+(((0.01)*x1185))+(((-1.0)*x1177*x1187)));
evalcond[1]=((((-1.0)*x1175*x1180))+(((0.095)*x1171))+(((-1.0)*cj0*x1176*x1178))+(((0.01)*gconst53*x1179))+((x1188*x1197))+(((0.01)*r01*x1172))+((x1193*x1197))+(((-1.0)*x1189))+(((-1.0)*x1182))+((r01*x1172*x1177))+((gconst53*x1177*x1179))+(((-1.0)*gconst54*x1177*x1192))+(((-1.0)*x1175*x1192)));
evalcond[2]=(((x1186*x1190))+((r20*sj3*x1175))+((gconst53*x1198))+((x1179*x1191))+((x1172*x1176))+(((-1.0)*x1170*x1174))+(((-1.0)*x1185*x1196))+((pz*sj3)));
evalcond[3]=((((-1.0)*x1189*x1194))+((r01*x1172*x1196))+((gconst53*x1183))+((r21*x1191))+((gconst53*x1179*x1196))+(((-1.0)*x1182*x1194))+(((-1.0)*sj3*x1175*x1192))+(((-1.0)*sj3*x1175*x1180))+((x1171*x1174)));
evalcond[4]=((((-1.0)*x1171*x1181))+((gconst54*x1173*x1180))+((gconst54*x1173*x1192))+((x1183*x1195))+(((-1.0)*x1185*x1197))+((r22*x1177))+(((-1.0)*r01*x1172*x1173))+((cj3*x1189))+((cj3*x1182))+(((-1.0)*gconst53*x1173*x1179)));
evalcond[5]=(((cj4*x1176*x1186))+((x1173*x1185))+((x1177*x1188))+(((-1.0)*x1179*x1199))+(((-1.0)*cj4*x1172*x1190))+(((-1.0)*cj3*x1184))+((x1177*x1193))+((x1170*x1181))+(((-1.0)*x1173*x1187))+((cj4*x1191*x1192)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j2eval[2];
IkReal x1200=x1131;
IkReal x1208 = x1200;
if(IKabs(x1208)==0){
continue;
}
IkReal x1201=pow(x1208,-0.5);
if((x1200) < -0.00001)
continue;
IkReal x1202=IKabs(IKsqrt(x1200));
IkReal x1203=((100.0)*x1201);
CheckValue<IkReal> x1209=IKPowWithIntegerCheck(x1202,-1);
if(!x1209.valid){
continue;
}
IkReal x1204=x1209.value;
IkReal x1205=(r22*x1204);
CheckValue<IkReal> x1210 = IKatan2WithCheck(IkReal(((100.0)*rxp1_2)),IkReal(((100.0)*rxp0_2)),IKFAST_ATAN2_MAGTHRESH);
if(!x1210.valid){
continue;
}
if( (x1205) < -1-IKFAST_SINCOS_THRESH || (x1205) > 1+IKFAST_SINCOS_THRESH )
    continue;
IkReal x1206=((((-1.0)*(x1210.value)))+(IKasin(x1205)));
if((((1.0)+(((-1.0)*(x1205*x1205))))) < -0.00001)
continue;
IkReal x1207=IKsqrt(((1.0)+(((-1.0)*(x1205*x1205)))));
sj5=gconst53;
cj5=gconst54;
j5=x1206;
IkReal gconst52=x1206;
IkReal gconst53=(((rxp0_2*x1203*x1205))+(((-1.0)*rxp1_2*x1203*x1207)));
IkReal gconst54=(((rxp0_2*x1203*x1207))+((rxp1_2*x1203*x1205)));
j2eval[0]=sj3;
j2eval[1]=IKsign(sj3);
if( IKabs(j2eval[0]) < 0.0000010000000000  || IKabs(j2eval[1]) < 0.0000010000000000  )
{
{
IkReal j2eval[2];
IkReal x1211=x1131;
IkReal x1219 = x1211;
if(IKabs(x1219)==0){
continue;
}
IkReal x1212=pow(x1219,-0.5);
if((x1211) < -0.00001)
continue;
IkReal x1213=IKabs(IKsqrt(x1211));
IkReal x1214=((100.0)*x1212);
CheckValue<IkReal> x1220=IKPowWithIntegerCheck(x1213,-1);
if(!x1220.valid){
continue;
}
IkReal x1215=x1220.value;
IkReal x1216=(r22*x1215);
CheckValue<IkReal> x1221 = IKatan2WithCheck(IkReal(((100.0)*rxp1_2)),IkReal(((100.0)*rxp0_2)),IKFAST_ATAN2_MAGTHRESH);
if(!x1221.valid){
continue;
}
if( (x1216) < -1-IKFAST_SINCOS_THRESH || (x1216) > 1+IKFAST_SINCOS_THRESH )
    continue;
IkReal x1217=((((-1.0)*(x1221.value)))+(IKasin(x1216)));
if((((1.0)+(((-1.0)*(x1216*x1216))))) < -0.00001)
continue;
IkReal x1218=IKsqrt(((1.0)+(((-1.0)*(x1216*x1216)))));
sj5=gconst53;
cj5=gconst54;
j5=x1217;
IkReal gconst52=x1217;
IkReal gconst53=(((rxp0_2*x1214*x1216))+(((-1.0)*rxp1_2*x1214*x1218)));
IkReal gconst54=(((rxp0_2*x1214*x1218))+((rxp1_2*x1214*x1216)));
j2eval[0]=cj3;
j2eval[1]=IKsign(cj3);
if( IKabs(j2eval[0]) < 0.0000010000000000  || IKabs(j2eval[1]) < 0.0000010000000000  )
{
continue; // 1 cases reached

} else
{
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x1222=(gconst54*r20);
IkReal x1223=(sj1*sj4);
IkReal x1224=((1.0)*cj4);
IkReal x1225=((1.0)*r22);
IkReal x1226=(gconst53*r21);
IkReal x1227=((1.0)*cj3);
IkReal x1228=(cj3*r22);
IkReal x1229=(cj1*cj4);
IkReal x1230=(cj1*sj4);
CheckValue<IkReal> x1231=IKPowWithIntegerCheck(IKsign(cj3),-1);
if(!x1231.valid){
continue;
}
CheckValue<IkReal> x1232 = IKatan2WithCheck(IkReal(((((-1.0)*x1225*x1230))+(((-1.0)*cj1*x1222*x1224))+(((-1.0)*sj1*x1224*x1228))+((x1226*x1229))+((cj3*x1222*x1223))+(((-1.0)*x1223*x1226*x1227)))),IkReal(((((-1.0)*sj1*x1222*x1224))+((cj4*sj1*x1226))+((x1228*x1229))+((cj3*x1226*x1230))+(((-1.0)*x1222*x1227*x1230))+(((-1.0)*x1223*x1225)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1232.valid){
continue;
}
j2array[0]=((-1.5707963267949)+(((1.5707963267949)*(x1231.value)))+(x1232.value));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[8];
IkReal x1233=IKsin(j2);
IkReal x1234=IKcos(j2);
IkReal x1235=(gconst54*sj4);
IkReal x1236=(cj0*r00);
IkReal x1237=((1.0)*gconst53);
IkReal x1238=((0.01)*gconst54);
IkReal x1239=(r10*sj0);
IkReal x1240=(cj0*r01);
IkReal x1241=(cj4*gconst53);
IkReal x1242=(sj0*sj4);
IkReal x1243=(gconst53*r11);
IkReal x1244=((1.0)*gconst54);
IkReal x1245=((1.0)*sj3);
IkReal x1246=((1.0)*cj0);
IkReal x1247=(r11*sj0);
IkReal x1248=((0.01)*gconst53);
IkReal x1249=(cj1*x1234);
IkReal x1250=(sj1*x1233);
IkReal x1251=(sj1*x1234);
IkReal x1252=(cj1*x1233);
evalcond[0]=(((gconst53*r20))+(((-1.0)*x1245*x1251))+(((-1.0)*x1245*x1252))+((gconst54*r21)));
evalcond[1]=((((-0.095)*cj1))+((r20*x1238))+(((-1.0)*r21*x1248))+(((0.085)*x1250))+pz+(((-0.085)*x1249)));
evalcond[2]=((((-1.0)*r21*sj4*x1237))+x1249+((r20*x1235))+(((-1.0)*cj4*r22))+(((-1.0)*x1250)));
evalcond[3]=((((-1.0)*cj4*r21*x1237))+((r22*sj4))+((cj3*x1252))+((cj3*x1251))+((cj4*gconst54*r20)));
evalcond[4]=((((-1.0)*x1244*x1247))+(((-1.0)*x1245*x1249))+(((-1.0)*x1237*x1239))+(((-1.0)*x1236*x1237))+(((-1.0)*x1240*x1244))+((sj3*x1250)));
evalcond[5]=(((cj0*cj4*r02))+((gconst53*sj4*x1240))+((x1242*x1243))+(((-1.0)*x1235*x1239))+(((-1.0)*x1235*x1236))+(((-1.0)*x1251))+(((-1.0)*x1252))+((cj4*r12*sj0)));
evalcond[6]=((((-1.0)*px*x1246))+(((0.095)*sj1))+((x1240*x1248))+(((-1.0)*x1238*x1239))+(((0.085)*x1252))+(((0.085)*x1251))+(((-1.0)*x1236*x1238))+(((0.01)*sj0*x1243))+(((-1.0)*py*sj0)));
evalcond[7]=((((-1.0)*cj4*x1236*x1244))+(((-1.0)*cj4*x1239*x1244))+((x1240*x1241))+(((-1.0)*r12*x1242))+(((-1.0)*r02*sj4*x1246))+(((-1.0)*cj3*x1250))+((x1241*x1247))+((cj3*x1249)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x1253=(cj1*gconst53);
IkReal x1254=(sj3*sj4);
IkReal x1255=(gconst54*sj1);
IkReal x1256=(gconst53*sj1);
IkReal x1257=(cj1*gconst54);
IkReal x1258=(cj4*r22*sj3);
CheckValue<IkReal> x1259=IKPowWithIntegerCheck(IKsign(sj3),-1);
if(!x1259.valid){
continue;
}
CheckValue<IkReal> x1260 = IKatan2WithCheck(IkReal((((r21*x1257))+(((-1.0)*sj1*x1258))+((r20*x1253))+(((-1.0)*r21*x1254*x1256))+((r20*x1254*x1255)))),IkReal((((r21*x1255))+((cj1*x1258))+(((-1.0)*r20*x1254*x1257))+((r20*x1256))+((r21*x1253*x1254)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1260.valid){
continue;
}
j2array[0]=((-1.5707963267949)+(((1.5707963267949)*(x1259.value)))+(x1260.value));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[8];
IkReal x1261=IKsin(j2);
IkReal x1262=IKcos(j2);
IkReal x1263=(gconst54*sj4);
IkReal x1264=(cj0*r00);
IkReal x1265=((1.0)*gconst53);
IkReal x1266=((0.01)*gconst54);
IkReal x1267=(r10*sj0);
IkReal x1268=(cj0*r01);
IkReal x1269=(cj4*gconst53);
IkReal x1270=(sj0*sj4);
IkReal x1271=(gconst53*r11);
IkReal x1272=((1.0)*gconst54);
IkReal x1273=((1.0)*sj3);
IkReal x1274=((1.0)*cj0);
IkReal x1275=(r11*sj0);
IkReal x1276=((0.01)*gconst53);
IkReal x1277=(cj1*x1262);
IkReal x1278=(sj1*x1261);
IkReal x1279=(sj1*x1262);
IkReal x1280=(cj1*x1261);
evalcond[0]=(((gconst53*r20))+(((-1.0)*x1273*x1280))+(((-1.0)*x1273*x1279))+((gconst54*r21)));
evalcond[1]=((((-0.095)*cj1))+(((-0.085)*x1277))+(((0.085)*x1278))+pz+((r20*x1266))+(((-1.0)*r21*x1276)));
evalcond[2]=(x1277+(((-1.0)*r21*sj4*x1265))+(((-1.0)*x1278))+(((-1.0)*cj4*r22))+((r20*x1263)));
evalcond[3]=(((r22*sj4))+((cj3*x1279))+((cj3*x1280))+(((-1.0)*cj4*r21*x1265))+((cj4*gconst54*r20)));
evalcond[4]=(((sj3*x1278))+(((-1.0)*x1268*x1272))+(((-1.0)*x1264*x1265))+(((-1.0)*x1272*x1275))+(((-1.0)*x1273*x1277))+(((-1.0)*x1265*x1267)));
evalcond[5]=((((-1.0)*x1280))+((gconst53*sj4*x1268))+((cj0*cj4*r02))+((x1270*x1271))+(((-1.0)*x1279))+(((-1.0)*x1263*x1264))+(((-1.0)*x1263*x1267))+((cj4*r12*sj0)));
evalcond[6]=((((-1.0)*x1264*x1266))+(((0.095)*sj1))+(((0.01)*sj0*x1271))+(((0.085)*x1279))+(((-1.0)*x1266*x1267))+(((-1.0)*px*x1274))+(((0.085)*x1280))+((x1268*x1276))+(((-1.0)*py*sj0)));
evalcond[7]=(((x1269*x1275))+(((-1.0)*cj4*x1267*x1272))+(((-1.0)*r02*sj4*x1274))+((cj3*x1277))+((x1268*x1269))+(((-1.0)*r12*x1270))+(((-1.0)*cj3*x1278))+(((-1.0)*cj4*x1264*x1272)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x1281=((((10000.0)*(rxp0_2*rxp0_2)))+(((10000.0)*(rxp1_2*rxp1_2))));
if((x1281) < -0.00001)
continue;
IkReal x1282=IKabs(IKsqrt(x1281));
IkReal x1288 = x1281;
if(IKabs(x1288)==0){
continue;
}
IkReal x1283=pow(x1288,-0.5);
IkReal x1284=((100.0)*x1283);
CheckValue<IkReal> x1289=IKPowWithIntegerCheck(x1282,-1);
if(!x1289.valid){
continue;
}
IkReal x1285=x1289.value;
IkReal x1286=(r22*x1285);
if((((1.0)+(((-1.0)*(x1286*x1286))))) < -0.00001)
continue;
IkReal x1287=IKsqrt(((1.0)+(((-1.0)*(x1286*x1286)))));
CheckValue<IkReal> x1290 = IKatan2WithCheck(IkReal(((100.0)*rxp1_2)),IkReal(((100.0)*rxp0_2)),IKFAST_ATAN2_MAGTHRESH);
if(!x1290.valid){
continue;
}
if( (x1286) < -1-IKFAST_SINCOS_THRESH || (x1286) > 1+IKFAST_SINCOS_THRESH )
    continue;
IkReal gconst55=((3.14159265358979)+(((-1.0)*(x1290.value)))+(((-1.0)*(IKasin(x1286)))));
IkReal gconst56=(((rxp1_2*x1284*x1287))+((rxp0_2*x1284*x1286)));
IkReal gconst57=((((-1.0)*rxp0_2*x1284*x1287))+((rxp1_2*x1284*x1286)));
if((((((10000.0)*(rxp0_2*rxp0_2)))+(((10000.0)*(rxp1_2*rxp1_2))))) < -0.00001)
continue;
CheckValue<IkReal> x1291=IKPowWithIntegerCheck(IKabs(IKsqrt(((((10000.0)*(rxp0_2*rxp0_2)))+(((10000.0)*(rxp1_2*rxp1_2)))))),-1);
if(!x1291.valid){
continue;
}
if( ((r22*(x1291.value))) < -1-IKFAST_SINCOS_THRESH || ((r22*(x1291.value))) > 1+IKFAST_SINCOS_THRESH )
    continue;
CheckValue<IkReal> x1292 = IKatan2WithCheck(IkReal(((100.0)*rxp1_2)),IkReal(((100.0)*rxp0_2)),IKFAST_ATAN2_MAGTHRESH);
if(!x1292.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+(IKasin((r22*(x1291.value))))+j5+(x1292.value))))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x1293=((0.01)*cj3);
IkReal x1294=((1.0)*cj3);
CheckValue<IkReal> x1295 = IKatan2WithCheck(IkReal((((gconst56*r11*x1293))+(((-1.0)*py*x1294))+(((-1.0)*gconst57*r10*x1293)))),IkReal((((gconst56*r01*x1293))+(((-1.0)*px*x1294))+(((-1.0)*gconst57*r00*x1293)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1295.valid){
continue;
}
CheckValue<IkReal> x1296=IKPowWithIntegerCheck(IKsign((((r22*(((((-0.01)*(gconst56*gconst56)))+(((-0.01)*(gconst57*gconst57)))))))+((gconst57*rxp1_2))+((gconst56*rxp0_2)))),-1);
if(!x1296.valid){
continue;
}
j0array[0]=((-1.5707963267949)+(x1295.value)+(((1.5707963267949)*(x1296.value))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[4];
IkReal x1297=IKsin(j0);
IkReal x1298=IKcos(j0);
IkReal x1299=(gconst56*sj4);
IkReal x1300=((1.0)*sj4);
IkReal x1301=((1.0)*cj4);
IkReal x1302=(cj4*gconst56);
IkReal x1303=(gconst57*x1297);
IkReal x1304=(r11*x1298);
IkReal x1305=(r12*x1298);
IkReal x1306=(gconst56*x1297);
IkReal x1307=(r02*x1297);
IkReal x1308=((1.0)*x1298);
IkReal x1309=((1.0)*r01*x1297);
IkReal x1310=(gconst57*r10*x1298);
evalcond[0]=((((-1.0)*gconst57*x1304))+(((-1.0)*gconst56*r10*x1308))+cj3+((r01*x1303))+((r00*x1306)));
evalcond[1]=((((-0.01)*x1310))+(((-0.01)*r01*x1306))+(((-1.0)*py*x1308))+(((0.01)*r00*x1303))+(((0.01)*gconst56*x1304))+((px*x1297)));
evalcond[2]=(((x1299*x1304))+(((-1.0)*x1300*x1310))+(((-1.0)*x1299*x1309))+((cj4*x1305))+((r00*sj4*x1303))+(((-1.0)*x1301*x1307)));
evalcond[3]=(((cj4*r00*x1303))+sj3+(((-1.0)*x1300*x1305))+((x1302*x1304))+(((-1.0)*r01*x1301*x1306))+((sj4*x1307))+(((-1.0)*x1301*x1310)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
IkReal x1311=((0.894736842105263)*sj4);
IkReal x1312=(gconst57*r20);
IkReal x1313=((0.105263157894737)*gconst57);
IkReal x1314=(cj0*r00);
IkReal x1315=((0.894736842105263)*cj4);
IkReal x1316=(gconst56*r21);
IkReal x1317=(r10*sj0);
IkReal x1318=(gconst56*r11*sj0);
IkReal x1319=(cj0*gconst56*r01);
if( IKabs(((((-1.0)*x1311*x1318))+(((-1.0)*x1311*x1319))+((gconst57*x1311*x1317))+((gconst57*x1311*x1314))+((x1313*x1314))+((x1313*x1317))+(((10.5263157894737)*py*sj0))+(((-0.105263157894737)*x1318))+(((-0.105263157894737)*x1319))+(((-1.0)*r12*sj0*x1315))+(((-1.0)*cj0*r02*x1315))+(((10.5263157894737)*cj0*px)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*x1311*x1316))+((x1311*x1312))+(((10.5263157894737)*pz))+(((-1.0)*r22*x1315))+(((0.105263157894737)*x1312))+(((-0.105263157894737)*x1316)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*x1311*x1318))+(((-1.0)*x1311*x1319))+((gconst57*x1311*x1317))+((gconst57*x1311*x1314))+((x1313*x1314))+((x1313*x1317))+(((10.5263157894737)*py*sj0))+(((-0.105263157894737)*x1318))+(((-0.105263157894737)*x1319))+(((-1.0)*r12*sj0*x1315))+(((-1.0)*cj0*r02*x1315))+(((10.5263157894737)*cj0*px))))+IKsqr(((((-1.0)*x1311*x1316))+((x1311*x1312))+(((10.5263157894737)*pz))+(((-1.0)*r22*x1315))+(((0.105263157894737)*x1312))+(((-0.105263157894737)*x1316))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j1array[0]=IKatan2(((((-1.0)*x1311*x1318))+(((-1.0)*x1311*x1319))+((gconst57*x1311*x1317))+((gconst57*x1311*x1314))+((x1313*x1314))+((x1313*x1317))+(((10.5263157894737)*py*sj0))+(((-0.105263157894737)*x1318))+(((-0.105263157894737)*x1319))+(((-1.0)*r12*sj0*x1315))+(((-1.0)*cj0*r02*x1315))+(((10.5263157894737)*cj0*px))), ((((-1.0)*x1311*x1316))+((x1311*x1312))+(((10.5263157894737)*pz))+(((-1.0)*r22*x1315))+(((0.105263157894737)*x1312))+(((-0.105263157894737)*x1316))));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[6];
IkReal x1320=IKcos(j1);
IkReal x1321=IKsin(j1);
IkReal x1322=(gconst56*sj4);
IkReal x1323=((0.01)*gconst57);
IkReal x1324=(r10*sj0);
IkReal x1325=(cj0*r00);
IkReal x1326=((0.085)*cj4);
IkReal x1327=(gconst56*r21);
IkReal x1328=(r11*sj0);
IkReal x1329=((0.01)*gconst56);
IkReal x1330=((0.085)*gconst57);
IkReal x1331=(cj0*px);
IkReal x1332=(cj0*r01);
IkReal x1333=((1.0)*pz);
IkReal x1334=((0.085)*sj4);
IkReal x1335=(r12*sj0);
IkReal x1336=(cj0*r02);
IkReal x1337=(py*sj0);
IkReal x1338=((1.0)*sj3);
IkReal x1339=((0.085)*gconst56);
IkReal x1340=((0.085)*x1332);
IkReal x1341=((0.095)*x1320);
IkReal x1342=((0.095)*x1321);
evalcond[0]=(x1341+(((0.01)*x1327))+(((0.085)*r21*x1322))+((r22*x1326))+(((-1.0)*r20*x1323))+(((-1.0)*r20*sj4*x1330))+(((-1.0)*x1333)));
evalcond[1]=(x1342+((x1329*x1332))+(((-1.0)*x1323*x1325))+(((-1.0)*x1323*x1324))+((x1322*x1340))+(((-1.0)*x1337))+(((-1.0)*x1331))+(((-1.0)*sj4*x1325*x1330))+((x1328*x1329))+((x1326*x1336))+((x1326*x1335))+(((0.085)*x1322*x1328))+(((-1.0)*sj4*x1324*x1330)));
evalcond[2]=((((-1.0)*sj3*x1341))+((x1325*x1339))+((x1328*x1330))+(((-0.01)*sj3*x1327))+((pz*sj3))+((x1324*x1339))+((x1330*x1332))+((r20*sj3*x1323)));
evalcond[3]=(((sj3*x1329*x1332))+(((-1.0)*x1337*x1338))+((r20*x1339))+((sj3*x1328*x1329))+((r21*x1330))+(((-1.0)*x1331*x1338))+(((-1.0)*sj3*x1323*x1324))+(((-1.0)*sj3*x1323*x1325))+((sj3*x1342)));
evalcond[4]=(((cj3*x1323*x1324))+((cj3*x1323*x1325))+((gconst57*r20*x1326))+(((-1.0)*cj3*x1329*x1332))+(((-1.0)*cj3*x1328*x1329))+(((-1.0)*x1326*x1327))+(((-1.0)*cj3*x1342))+((cj3*x1337))+((cj3*x1331))+((r22*x1334)));
evalcond[5]=((((-1.0)*cj3*x1333))+((gconst57*x1325*x1326))+((gconst57*x1324*x1326))+(((-1.0)*cj3*r20*x1323))+(((-1.0)*gconst56*x1326*x1332))+(((-1.0)*gconst56*x1326*x1328))+(((0.01)*cj3*x1327))+((cj3*x1341))+((x1334*x1335))+((x1334*x1336)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j2eval[2];
IkReal x1343=x1281;
if((x1343) < -0.00001)
continue;
IkReal x1344=IKabs(IKsqrt(x1343));
IkReal x1351 = x1343;
if(IKabs(x1351)==0){
continue;
}
IkReal x1345=pow(x1351,-0.5);
IkReal x1346=((100.0)*x1345);
CheckValue<IkReal> x1352=IKPowWithIntegerCheck(x1344,-1);
if(!x1352.valid){
continue;
}
IkReal x1347=x1352.value;
IkReal x1348=(r22*x1347);
if((((1.0)+(((-1.0)*(x1348*x1348))))) < -0.00001)
continue;
IkReal x1349=IKsqrt(((1.0)+(((-1.0)*(x1348*x1348)))));
if( (x1348) < -1-IKFAST_SINCOS_THRESH || (x1348) > 1+IKFAST_SINCOS_THRESH )
    continue;
CheckValue<IkReal> x1353 = IKatan2WithCheck(IkReal(((100.0)*rxp1_2)),IkReal(((100.0)*rxp0_2)),IKFAST_ATAN2_MAGTHRESH);
if(!x1353.valid){
continue;
}
IkReal x1350=((((1.0)*(IKasin(x1348))))+(((1.0)*(x1353.value))));
sj5=gconst56;
cj5=gconst57;
j5=((3.14159265)+(((-1.0)*x1350)));
IkReal gconst55=((3.14159265358979)+(((-1.0)*x1350)));
IkReal gconst56=(((rxp1_2*x1346*x1349))+((rxp0_2*x1346*x1348)));
IkReal gconst57=((((-1.0)*rxp0_2*x1346*x1349))+((rxp1_2*x1346*x1348)));
j2eval[0]=sj3;
j2eval[1]=IKsign(sj3);
if( IKabs(j2eval[0]) < 0.0000010000000000  || IKabs(j2eval[1]) < 0.0000010000000000  )
{
{
IkReal j2eval[2];
IkReal x1354=x1281;
if((x1354) < -0.00001)
continue;
IkReal x1355=IKabs(IKsqrt(x1354));
IkReal x1362 = x1354;
if(IKabs(x1362)==0){
continue;
}
IkReal x1356=pow(x1362,-0.5);
IkReal x1357=((100.0)*x1356);
CheckValue<IkReal> x1363=IKPowWithIntegerCheck(x1355,-1);
if(!x1363.valid){
continue;
}
IkReal x1358=x1363.value;
IkReal x1359=(r22*x1358);
if((((1.0)+(((-1.0)*(x1359*x1359))))) < -0.00001)
continue;
IkReal x1360=IKsqrt(((1.0)+(((-1.0)*(x1359*x1359)))));
CheckValue<IkReal> x1364 = IKatan2WithCheck(IkReal(((100.0)*rxp1_2)),IkReal(((100.0)*rxp0_2)),IKFAST_ATAN2_MAGTHRESH);
if(!x1364.valid){
continue;
}
if( (x1359) < -1-IKFAST_SINCOS_THRESH || (x1359) > 1+IKFAST_SINCOS_THRESH )
    continue;
IkReal x1361=((((1.0)*(x1364.value)))+(((1.0)*(IKasin(x1359)))));
sj5=gconst56;
cj5=gconst57;
j5=((3.14159265)+(((-1.0)*x1361)));
IkReal gconst55=((3.14159265358979)+(((-1.0)*x1361)));
IkReal gconst56=(((rxp0_2*x1357*x1359))+((rxp1_2*x1357*x1360)));
IkReal gconst57=((((-1.0)*rxp0_2*x1357*x1360))+((rxp1_2*x1357*x1359)));
j2eval[0]=cj3;
j2eval[1]=IKsign(cj3);
if( IKabs(j2eval[0]) < 0.0000010000000000  || IKabs(j2eval[1]) < 0.0000010000000000  )
{
continue; // 1 cases reached

} else
{
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x1365=((1.0)*cj4);
IkReal x1366=(cj3*sj4);
IkReal x1367=(r22*sj1);
IkReal x1368=((1.0)*sj4);
IkReal x1369=(gconst56*r21);
IkReal x1370=(cj1*r22);
IkReal x1371=(gconst57*r20*sj1);
IkReal x1372=(cj1*gconst57*r20);
CheckValue<IkReal> x1373=IKPowWithIntegerCheck(IKsign(cj3),-1);
if(!x1373.valid){
continue;
}
CheckValue<IkReal> x1374 = IKatan2WithCheck(IkReal(((((-1.0)*x1365*x1372))+((cj1*cj4*x1369))+((x1366*x1371))+(((-1.0)*cj3*x1365*x1367))+(((-1.0)*sj1*x1366*x1369))+(((-1.0)*x1368*x1370)))),IkReal(((((-1.0)*x1365*x1371))+(((-1.0)*x1366*x1372))+((cj3*cj4*x1370))+((cj4*sj1*x1369))+((cj1*x1366*x1369))+(((-1.0)*x1367*x1368)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1374.valid){
continue;
}
j2array[0]=((-1.5707963267949)+(((1.5707963267949)*(x1373.value)))+(x1374.value));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[8];
IkReal x1375=IKsin(j2);
IkReal x1376=IKcos(j2);
IkReal x1377=(cj4*gconst56);
IkReal x1378=(r11*sj0);
IkReal x1379=((1.0)*sj3);
IkReal x1380=((0.01)*gconst57);
IkReal x1381=(r10*sj0);
IkReal x1382=((1.0)*sj0);
IkReal x1383=((1.0)*r21);
IkReal x1384=(gconst57*r20);
IkReal x1385=((0.01)*gconst56);
IkReal x1386=((1.0)*cj0);
IkReal x1387=(gconst56*sj4);
IkReal x1388=(cj1*x1376);
IkReal x1389=(sj1*x1375);
IkReal x1390=(cj0*gconst56*r01);
IkReal x1391=(sj1*x1376);
IkReal x1392=(cj1*x1375);
IkReal x1393=((1.0)*gconst57*x1381);
IkReal x1394=(gconst57*r00*x1386);
evalcond[0]=(((gconst57*r21))+((gconst56*r20))+(((-1.0)*x1379*x1391))+(((-1.0)*x1379*x1392)));
evalcond[1]=((((-0.095)*cj1))+(((-1.0)*r21*x1385))+((r20*x1380))+pz+(((0.085)*x1389))+(((-0.085)*x1388)));
evalcond[2]=(x1388+(((-1.0)*x1383*x1387))+((sj4*x1384))+(((-1.0)*x1389))+(((-1.0)*cj4*r22)));
evalcond[3]=(((cj3*x1391))+((cj3*x1392))+((r22*sj4))+(((-1.0)*x1377*x1383))+((cj4*x1384)));
evalcond[4]=((((-1.0)*gconst57*x1378))+(((-1.0)*gconst56*x1381))+(((-1.0)*gconst57*r01*x1386))+(((-1.0)*gconst56*r00*x1386))+((sj3*x1389))+(((-1.0)*x1379*x1388)));
evalcond[5]=((((-1.0)*sj4*x1393))+(((-1.0)*sj4*x1394))+((cj0*cj4*r02))+((cj0*r01*x1387))+(((-1.0)*x1392))+(((-1.0)*x1391))+((x1378*x1387))+((cj4*r12*sj0)));
evalcond[6]=((((0.095)*sj1))+(((-1.0)*cj0*r00*x1380))+(((-1.0)*x1380*x1381))+((cj0*r01*x1385))+(((0.085)*x1391))+(((0.085)*x1392))+(((-1.0)*px*x1386))+((x1378*x1385))+(((-1.0)*py*x1382)));
evalcond[7]=((((-1.0)*cj3*x1389))+(((-1.0)*cj4*x1394))+(((-1.0)*cj4*x1393))+((cj3*x1388))+((x1377*x1378))+((cj0*r01*x1377))+(((-1.0)*r12*sj4*x1382))+(((-1.0)*r02*sj4*x1386)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x1395=(cj1*r21);
IkReal x1396=(sj3*sj4);
IkReal x1397=(gconst57*sj1);
IkReal x1398=(cj1*r20);
IkReal x1399=((1.0)*sj1);
IkReal x1400=(cj4*r22*sj3);
CheckValue<IkReal> x1401 = IKatan2WithCheck(IkReal((((r20*x1396*x1397))+(((-1.0)*x1399*x1400))+((gconst57*x1395))+((gconst56*x1398))+(((-1.0)*gconst56*r21*x1396*x1399)))),IkReal(((((-1.0)*gconst57*x1396*x1398))+((r21*x1397))+((gconst56*r20*sj1))+((cj1*x1400))+((gconst56*x1395*x1396)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1401.valid){
continue;
}
CheckValue<IkReal> x1402=IKPowWithIntegerCheck(IKsign(sj3),-1);
if(!x1402.valid){
continue;
}
j2array[0]=((-1.5707963267949)+(x1401.value)+(((1.5707963267949)*(x1402.value))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[8];
IkReal x1403=IKsin(j2);
IkReal x1404=IKcos(j2);
IkReal x1405=(cj4*gconst56);
IkReal x1406=(r11*sj0);
IkReal x1407=((1.0)*sj3);
IkReal x1408=((0.01)*gconst57);
IkReal x1409=(r10*sj0);
IkReal x1410=((1.0)*sj0);
IkReal x1411=((1.0)*r21);
IkReal x1412=(gconst57*r20);
IkReal x1413=((0.01)*gconst56);
IkReal x1414=((1.0)*cj0);
IkReal x1415=(gconst56*sj4);
IkReal x1416=(cj1*x1404);
IkReal x1417=(sj1*x1403);
IkReal x1418=(cj0*gconst56*r01);
IkReal x1419=(sj1*x1404);
IkReal x1420=(cj1*x1403);
IkReal x1421=((1.0)*gconst57*x1409);
IkReal x1422=(gconst57*r00*x1414);
evalcond[0]=((((-1.0)*x1407*x1420))+(((-1.0)*x1407*x1419))+((gconst57*r21))+((gconst56*r20)));
evalcond[1]=((((-0.095)*cj1))+(((-0.085)*x1416))+((r20*x1408))+pz+(((0.085)*x1417))+(((-1.0)*r21*x1413)));
evalcond[2]=((((-1.0)*x1411*x1415))+((sj4*x1412))+x1416+(((-1.0)*cj4*r22))+(((-1.0)*x1417)));
evalcond[3]=(((r22*sj4))+((cj4*x1412))+((cj3*x1420))+(((-1.0)*x1405*x1411))+((cj3*x1419)));
evalcond[4]=((((-1.0)*gconst56*r00*x1414))+(((-1.0)*gconst57*r01*x1414))+(((-1.0)*x1407*x1416))+(((-1.0)*gconst57*x1406))+(((-1.0)*gconst56*x1409))+((sj3*x1417)));
evalcond[5]=(((cj0*cj4*r02))+(((-1.0)*x1420))+((x1406*x1415))+(((-1.0)*sj4*x1421))+(((-1.0)*sj4*x1422))+((cj0*r01*x1415))+(((-1.0)*x1419))+((cj4*r12*sj0)));
evalcond[6]=((((0.085)*x1420))+(((0.095)*sj1))+(((-1.0)*cj0*r00*x1408))+((x1406*x1413))+(((0.085)*x1419))+(((-1.0)*px*x1414))+((cj0*r01*x1413))+(((-1.0)*py*x1410))+(((-1.0)*x1408*x1409)));
evalcond[7]=((((-1.0)*cj4*x1422))+(((-1.0)*cj4*x1421))+((cj0*r01*x1405))+(((-1.0)*r12*sj4*x1410))+(((-1.0)*cj3*x1417))+((x1405*x1406))+(((-1.0)*r02*sj4*x1414))+((cj3*x1416)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j0, j1, j2]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}
}
}

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x1423=((0.01)*sj5);
IkReal x1424=((0.01)*cj5);
IkReal x1425=((1.0)*sj3);
CheckValue<IkReal> x1426=IKPowWithIntegerCheck(IKsign((((r21*sj4*x1424))+((r20*sj4*x1423))+((cj4*cj5*rxp0_2))+(((-1.0)*cj4*rxp1_2*sj5))+((rxp2_2*sj4)))),-1);
if(!x1426.valid){
continue;
}
CheckValue<IkReal> x1427 = IKatan2WithCheck(IkReal((((r11*sj3*x1423))+(((-1.0)*py*x1425))+(((-1.0)*r10*sj3*x1424)))),IkReal(((((-1.0)*px*x1425))+((r01*sj3*x1423))+(((-1.0)*r00*sj3*x1424)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1427.valid){
continue;
}
j0array[0]=((-1.5707963267949)+(((1.5707963267949)*(x1426.value)))+(x1427.value));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[4];
IkReal x1428=IKsin(j0);
IkReal x1429=IKcos(j0);
IkReal x1430=(r11*sj5);
IkReal x1431=((1.0)*r01);
IkReal x1432=((1.0)*r10);
IkReal x1433=(sj4*x1429);
IkReal x1434=(sj5*x1428);
IkReal x1435=(cj5*x1428);
IkReal x1436=(cj4*x1429);
IkReal x1437=(r02*x1428);
IkReal x1438=((0.01)*x1429);
IkReal x1439=((1.0)*x1429);
evalcond[0]=(cj3+(((-1.0)*sj5*x1429*x1432))+((r01*x1435))+((r00*x1434))+(((-1.0)*cj5*r11*x1439)));
evalcond[1]=(((x1430*x1438))+(((0.01)*r00*x1435))+(((-0.01)*r01*x1434))+(((-1.0)*cj5*r10*x1438))+((px*x1428))+(((-1.0)*py*x1439)));
evalcond[2]=((((-1.0)*sj4*x1431*x1434))+((x1430*x1433))+((r12*x1436))+((r00*sj4*x1435))+(((-1.0)*cj5*x1432*x1433))+(((-1.0)*cj4*x1437)));
evalcond[3]=(sj3+((x1430*x1436))+(((-1.0)*r12*x1433))+(((-1.0)*cj5*x1432*x1436))+((sj4*x1437))+((cj4*r00*x1435))+(((-1.0)*cj4*x1431*x1434)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
IkReal x1440=((0.894736842105263)*cj4);
IkReal x1441=((0.105263157894737)*cj5);
IkReal x1442=(r01*sj5);
IkReal x1443=(r10*sj0);
IkReal x1444=((0.894736842105263)*sj4);
IkReal x1445=(r21*sj5);
IkReal x1446=(cj0*x1444);
IkReal x1447=(r11*sj0*sj5);
if( IKabs(((((-0.105263157894737)*cj0*x1442))+((x1441*x1443))+(((-1.0)*cj0*r02*x1440))+(((10.5263157894737)*py*sj0))+((cj5*r00*x1446))+((cj5*x1443*x1444))+((cj0*r00*x1441))+(((-0.105263157894737)*x1447))+(((-1.0)*x1444*x1447))+(((-1.0)*x1442*x1446))+(((-1.0)*r12*sj0*x1440))+(((10.5263157894737)*cj0*px)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*r22*x1440))+((cj5*r20*x1444))+(((10.5263157894737)*pz))+(((-0.105263157894737)*x1445))+((r20*x1441))+(((-1.0)*x1444*x1445)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-0.105263157894737)*cj0*x1442))+((x1441*x1443))+(((-1.0)*cj0*r02*x1440))+(((10.5263157894737)*py*sj0))+((cj5*r00*x1446))+((cj5*x1443*x1444))+((cj0*r00*x1441))+(((-0.105263157894737)*x1447))+(((-1.0)*x1444*x1447))+(((-1.0)*x1442*x1446))+(((-1.0)*r12*sj0*x1440))+(((10.5263157894737)*cj0*px))))+IKsqr(((((-1.0)*r22*x1440))+((cj5*r20*x1444))+(((10.5263157894737)*pz))+(((-0.105263157894737)*x1445))+((r20*x1441))+(((-1.0)*x1444*x1445))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j1array[0]=IKatan2(((((-0.105263157894737)*cj0*x1442))+((x1441*x1443))+(((-1.0)*cj0*r02*x1440))+(((10.5263157894737)*py*sj0))+((cj5*r00*x1446))+((cj5*x1443*x1444))+((cj0*r00*x1441))+(((-0.105263157894737)*x1447))+(((-1.0)*x1444*x1447))+(((-1.0)*x1442*x1446))+(((-1.0)*r12*sj0*x1440))+(((10.5263157894737)*cj0*px))), ((((-1.0)*r22*x1440))+((cj5*r20*x1444))+(((10.5263157894737)*pz))+(((-0.105263157894737)*x1445))+((r20*x1441))+(((-1.0)*x1444*x1445))));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[6];
IkReal x1448=IKcos(j1);
IkReal x1449=IKsin(j1);
IkReal x1450=(r11*sj0);
IkReal x1451=((0.085)*cj5);
IkReal x1452=((0.01)*cj3);
IkReal x1453=((0.085)*sj4);
IkReal x1454=(cj0*r00);
IkReal x1455=((0.085)*cj4);
IkReal x1456=(r10*sj0);
IkReal x1457=((0.01)*cj5);
IkReal x1458=(cj0*px);
IkReal x1459=((0.01)*sj5);
IkReal x1460=((1.0)*pz);
IkReal x1461=((0.085)*sj5);
IkReal x1462=(r21*sj5);
IkReal x1463=(r12*sj0);
IkReal x1464=(py*sj0);
IkReal x1465=(cj0*r02);
IkReal x1466=((1.0)*sj3);
IkReal x1467=((0.095)*x1448);
IkReal x1468=(cj0*r01*sj5);
IkReal x1469=((0.095)*x1449);
evalcond[0]=(((x1453*x1462))+(((-1.0)*r20*x1457))+(((-1.0)*r20*sj4*x1451))+(((-1.0)*x1460))+((r21*x1459))+x1467+((r22*x1455)));
evalcond[1]=(((x1453*x1468))+((sj5*x1450*x1453))+((cj0*r01*x1459))+((x1450*x1459))+(((-1.0)*x1458))+(((-1.0)*x1454*x1457))+((x1455*x1463))+((x1455*x1465))+(((-1.0)*sj4*x1451*x1456))+(((-1.0)*sj4*x1451*x1454))+x1469+(((-1.0)*x1464))+(((-1.0)*x1456*x1457)));
evalcond[2]=(((cj0*r01*x1451))+((r20*sj3*x1457))+((x1450*x1451))+((x1454*x1461))+((x1456*x1461))+((pz*sj3))+(((-1.0)*sj3*x1467))+(((-1.0)*r21*sj3*x1459)));
evalcond[3]=((((-1.0)*sj3*x1456*x1457))+(((-1.0)*x1458*x1466))+((cj0*r01*sj3*x1459))+((sj3*x1469))+((r20*x1461))+(((-1.0)*sj3*x1454*x1457))+(((-1.0)*x1464*x1466))+((sj3*x1450*x1459))+((r21*x1451)));
evalcond[4]=(((cj3*x1464))+((cj5*x1452*x1454))+((cj5*x1452*x1456))+(((-1.0)*cj3*x1469))+(((-1.0)*x1455*x1462))+((cj3*x1458))+((r22*x1453))+(((-1.0)*sj5*x1450*x1452))+((cj4*r20*x1451))+(((-1.0)*x1452*x1468)));
evalcond[5]=(((x1452*x1462))+((x1453*x1463))+((x1453*x1465))+(((-1.0)*cj5*r20*x1452))+((cj3*x1467))+((cj4*x1451*x1456))+((cj4*x1451*x1454))+(((-1.0)*cj3*x1460))+(((-1.0)*x1455*x1468))+(((-1.0)*sj5*x1450*x1455)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j2eval[3];
IkReal x1470=(cj5*r20);
IkReal x1471=(r20*sj5);
IkReal x1472=(r21*sj5);
IkReal x1473=(cj5*r21);
IkReal x1474=(cj1*sj3*sj4);
IkReal x1475=(cj4*r22*sj3);
IkReal x1476=(sj1*sj3*sj4);
j2eval[0]=sj3;
j2eval[1]=((IKabs((((cj1*x1475))+((sj1*x1471))+((sj1*x1473))+((x1472*x1474))+(((-1.0)*x1470*x1474)))))+(IKabs(((((-1.0)*sj1*x1475))+((cj1*x1473))+((cj1*x1471))+((x1470*x1476))+(((-1.0)*x1472*x1476))))));
j2eval[2]=IKsign(sj3);
if( IKabs(j2eval[0]) < 0.0000010000000000  || IKabs(j2eval[1]) < 0.0000010000000000  || IKabs(j2eval[2]) < 0.0000010000000000  )
{
{
IkReal j2eval[2];
j2eval[0]=sj3;
j2eval[1]=IKsign(sj3);
if( IKabs(j2eval[0]) < 0.0000010000000000  || IKabs(j2eval[1]) < 0.0000010000000000  )
{
{
IkReal j2eval[2];
j2eval[0]=cj3;
j2eval[1]=IKsign(cj3);
if( IKabs(j2eval[0]) < 0.0000010000000000  || IKabs(j2eval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x1477=(cj4*r22);
IkReal x1478=((1.0)*sj1);
IkReal x1479=(r20*sj1);
IkReal x1480=(cj5*sj4);
IkReal x1481=(cj1*r20);
IkReal x1482=(cj5*r21);
IkReal x1483=(r21*sj4*sj5);
if( IKabs((((cj1*x1482))+(((-1.0)*x1477*x1478))+(((-1.0)*x1478*x1483))+((sj5*x1481))+((x1479*x1480)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((cj1*x1477))+((sj1*x1482))+((cj1*x1483))+((sj5*x1479))+(((-1.0)*x1480*x1481)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((cj1*x1482))+(((-1.0)*x1477*x1478))+(((-1.0)*x1478*x1483))+((sj5*x1481))+((x1479*x1480))))+IKsqr((((cj1*x1477))+((sj1*x1482))+((cj1*x1483))+((sj5*x1479))+(((-1.0)*x1480*x1481))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j2array[0]=IKatan2((((cj1*x1482))+(((-1.0)*x1477*x1478))+(((-1.0)*x1478*x1483))+((sj5*x1481))+((x1479*x1480))), (((cj1*x1477))+((sj1*x1482))+((cj1*x1483))+((sj5*x1479))+(((-1.0)*x1480*x1481))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[6];
IkReal x1484=IKsin(j2);
IkReal x1485=IKcos(j2);
IkReal x1486=(sj0*sj5);
IkReal x1487=((1.0)*r10);
IkReal x1488=(cj0*r01);
IkReal x1489=(cj5*sj4);
IkReal x1490=((1.0)*sj0);
IkReal x1491=(sj4*sj5);
IkReal x1492=((0.01)*cj5);
IkReal x1493=(cj1*x1485);
IkReal x1494=(sj1*x1484);
IkReal x1495=((1.0)*cj0*r00);
IkReal x1496=(sj1*x1485);
IkReal x1497=(cj1*x1484);
IkReal x1498=((1.0)*x1496);
IkReal x1499=((1.0)*x1497);
IkReal x1500=(x1498+x1499);
evalcond[0]=((((-1.0)*x1500))+((cj5*r21))+((r20*sj5)));
CheckValue<IkReal> x1501=IKPowWithIntegerCheck(cj4,-1);
if(!x1501.valid){
continue;
}
evalcond[1]=((((-0.095)*cj1))+(((-0.085)*x1493))+(((-0.01)*r22*sj4*(x1501.value)))+pz+(((0.085)*x1494)));
evalcond[2]=(((r20*x1489))+(((-1.0)*x1494))+(((-1.0)*r21*x1491))+x1493+(((-1.0)*cj4*r22)));
evalcond[3]=((((-1.0)*x1486*x1487))+(((-1.0)*x1493))+(((-1.0)*cj5*r11*x1490))+(((-1.0)*sj5*x1495))+x1494+(((-1.0)*cj5*x1488)));
evalcond[4]=((((-1.0)*x1500))+((r11*sj4*x1486))+(((-1.0)*sj0*x1487*x1489))+((cj0*cj4*r02))+((x1488*x1491))+((cj4*r12*sj0))+(((-1.0)*x1489*x1495)));
evalcond[5]=((((0.095)*sj1))+(((0.01)*sj5*x1488))+(((-1.0)*r10*sj0*x1492))+(((0.01)*r11*x1486))+(((-1.0)*cj0*r00*x1492))+(((-1.0)*py*x1490))+(((-1.0)*cj0*px))+(((0.085)*x1497))+(((0.085)*x1496)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x1502=((1.0)*sj1);
IkReal x1503=(r20*sj5);
IkReal x1504=(cj5*r21);
IkReal x1505=((1.0)*cj1);
IkReal x1506=(cj4*r22);
IkReal x1507=(r21*sj4*sj5);
IkReal x1508=(cj5*r20*sj4);
if( IKabs(((((-1.0)*x1504*x1505))+((sj1*x1508))+(((-1.0)*x1503*x1505))+(((-1.0)*x1502*x1506))+(((-1.0)*x1502*x1507)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((cj1*x1506))+((cj1*x1507))+(((-1.0)*x1502*x1503))+(((-1.0)*x1502*x1504))+(((-1.0)*x1505*x1508)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*x1504*x1505))+((sj1*x1508))+(((-1.0)*x1503*x1505))+(((-1.0)*x1502*x1506))+(((-1.0)*x1502*x1507))))+IKsqr((((cj1*x1506))+((cj1*x1507))+(((-1.0)*x1502*x1503))+(((-1.0)*x1502*x1504))+(((-1.0)*x1505*x1508))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j2array[0]=IKatan2(((((-1.0)*x1504*x1505))+((sj1*x1508))+(((-1.0)*x1503*x1505))+(((-1.0)*x1502*x1506))+(((-1.0)*x1502*x1507))), (((cj1*x1506))+((cj1*x1507))+(((-1.0)*x1502*x1503))+(((-1.0)*x1502*x1504))+(((-1.0)*x1505*x1508))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[6];
IkReal x1509=IKsin(j2);
IkReal x1510=IKcos(j2);
IkReal x1511=(sj0*sj5);
IkReal x1512=((1.0)*r10);
IkReal x1513=(cj5*sj4);
IkReal x1514=((1.0)*cj0);
IkReal x1515=((1.0)*sj0);
IkReal x1516=((0.01)*cj5);
IkReal x1517=(cj1*x1510);
IkReal x1518=(sj1*x1509);
IkReal x1519=(cj1*x1509);
IkReal x1520=(cj0*r01*sj5);
IkReal x1521=(sj1*x1510);
IkReal x1522=((1.0)*x1518);
evalcond[0]=(((cj5*r21))+x1521+x1519+((r20*sj5)));
CheckValue<IkReal> x1523=IKPowWithIntegerCheck(cj4,-1);
if(!x1523.valid){
continue;
}
evalcond[1]=((((-0.085)*x1517))+(((-0.095)*cj1))+(((-0.01)*r22*sj4*(x1523.value)))+pz+(((0.085)*x1518)));
evalcond[2]=(((r20*x1513))+(((-1.0)*x1522))+x1517+(((-1.0)*r21*sj4*sj5))+(((-1.0)*cj4*r22)));
evalcond[3]=((((-1.0)*x1522))+(((-1.0)*cj5*r01*x1514))+x1517+(((-1.0)*cj5*r11*x1515))+(((-1.0)*r00*sj5*x1514))+(((-1.0)*x1511*x1512)));
evalcond[4]=((((-1.0)*x1519))+((r11*sj4*x1511))+((cj0*cj4*r02))+(((-1.0)*r00*x1513*x1514))+(((-1.0)*sj0*x1512*x1513))+((sj4*x1520))+(((-1.0)*x1521))+((cj4*r12*sj0)));
evalcond[5]=((((0.01)*r11*x1511))+(((0.095)*sj1))+(((-1.0)*px*x1514))+(((0.01)*x1520))+(((-1.0)*py*x1515))+(((0.085)*x1521))+(((-1.0)*cj0*r00*x1516))+(((0.085)*x1519))+(((-1.0)*r10*sj0*x1516)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j3))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x1524=(cj1*r22);
IkReal x1525=(sj1*sj4);
IkReal x1526=(cj5*r20);
IkReal x1527=((1.0)*sj4);
IkReal x1528=(r21*sj5);
IkReal x1529=(cj4*sj1);
IkReal x1530=(cj1*x1528);
IkReal x1531=((1.0)*r22*sj1);
if( IKabs(((((-1.0)*x1525*x1528))+((x1525*x1526))+(((-1.0)*x1524*x1527))+(((-1.0)*r22*x1529))+((cj4*x1530))+(((-1.0)*cj1*cj4*x1526)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((x1528*x1529))+(((-1.0)*r22*x1525))+(((-1.0)*cj1*x1526*x1527))+(((-1.0)*x1526*x1529))+((sj4*x1530))+((cj4*x1524)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*x1525*x1528))+((x1525*x1526))+(((-1.0)*x1524*x1527))+(((-1.0)*r22*x1529))+((cj4*x1530))+(((-1.0)*cj1*cj4*x1526))))+IKsqr((((x1528*x1529))+(((-1.0)*r22*x1525))+(((-1.0)*cj1*x1526*x1527))+(((-1.0)*x1526*x1529))+((sj4*x1530))+((cj4*x1524))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j2array[0]=IKatan2(((((-1.0)*x1525*x1528))+((x1525*x1526))+(((-1.0)*x1524*x1527))+(((-1.0)*r22*x1529))+((cj4*x1530))+(((-1.0)*cj1*cj4*x1526))), (((x1528*x1529))+(((-1.0)*r22*x1525))+(((-1.0)*cj1*x1526*x1527))+(((-1.0)*x1526*x1529))+((sj4*x1530))+((cj4*x1524))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[6];
IkReal x1532=IKsin(j2);
IkReal x1533=IKcos(j2);
IkReal x1534=(sj0*sj4);
IkReal x1535=(cj5*r10);
IkReal x1536=(r11*sj5);
IkReal x1537=((0.01)*sj0);
IkReal x1538=((0.01)*sj5);
IkReal x1539=(cj0*r01);
IkReal x1540=((1.0)*cj4);
IkReal x1541=(sj4*sj5);
IkReal x1542=((1.0)*cj0);
IkReal x1543=(cj5*r20);
IkReal x1544=(cj4*sj0);
IkReal x1545=(cj1*x1533);
IkReal x1546=(sj1*x1532);
IkReal x1547=(cj1*x1532);
IkReal x1548=(cj0*cj5*r00);
IkReal x1549=(sj1*x1533);
IkReal x1550=((1.0)*x1546);
evalcond[0]=(((cj4*x1543))+((r22*sj4))+x1547+x1549+(((-1.0)*r21*sj5*x1540)));
evalcond[1]=((((-0.095)*cj1))+(((-0.085)*x1545))+(((0.01)*x1543))+pz+(((0.085)*x1546))+(((-1.0)*r21*x1538)));
evalcond[2]=((((-1.0)*r22*x1540))+((sj4*x1543))+(((-1.0)*r21*x1541))+x1545+(((-1.0)*x1550)));
evalcond[3]=((((-1.0)*x1549))+(((-1.0)*x1547))+((x1539*x1541))+((r12*x1544))+((cj0*cj4*r02))+(((-1.0)*cj5*r00*sj4*x1542))+(((-1.0)*x1534*x1535))+((x1534*x1536)));
evalcond[4]=(((x1538*x1539))+(((-0.01)*x1548))+(((0.095)*sj1))+((x1536*x1537))+(((-1.0)*px*x1542))+(((-1.0)*x1535*x1537))+(((-1.0)*py*sj0))+(((0.085)*x1549))+(((0.085)*x1547)));
evalcond[5]=(((x1536*x1544))+(((-1.0)*sj0*x1535*x1540))+(((-1.0)*x1540*x1548))+x1545+((cj4*sj5*x1539))+(((-1.0)*x1550))+(((-1.0)*r12*x1534))+(((-1.0)*r02*sj4*x1542)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x1551=((1.0)*cj4);
IkReal x1552=(r22*sj1);
IkReal x1553=(cj1*r22);
IkReal x1554=(sj1*sj4);
IkReal x1555=(cj5*r20);
IkReal x1556=(r21*sj5);
IkReal x1557=(cj1*x1556);
if( IKabs((((sj4*x1553))+((cj1*cj4*x1555))+((x1554*x1555))+(((-1.0)*x1551*x1552))+(((-1.0)*x1551*x1557))+(((-1.0)*x1554*x1556)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*sj1*x1551*x1556))+((sj4*x1552))+((sj4*x1557))+((cj4*sj1*x1555))+(((-1.0)*cj1*sj4*x1555))+((cj4*x1553)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((sj4*x1553))+((cj1*cj4*x1555))+((x1554*x1555))+(((-1.0)*x1551*x1552))+(((-1.0)*x1551*x1557))+(((-1.0)*x1554*x1556))))+IKsqr(((((-1.0)*sj1*x1551*x1556))+((sj4*x1552))+((sj4*x1557))+((cj4*sj1*x1555))+(((-1.0)*cj1*sj4*x1555))+((cj4*x1553))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j2array[0]=IKatan2((((sj4*x1553))+((cj1*cj4*x1555))+((x1554*x1555))+(((-1.0)*x1551*x1552))+(((-1.0)*x1551*x1557))+(((-1.0)*x1554*x1556))), ((((-1.0)*sj1*x1551*x1556))+((sj4*x1552))+((sj4*x1557))+((cj4*sj1*x1555))+(((-1.0)*cj1*sj4*x1555))+((cj4*x1553))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[6];
IkReal x1558=IKcos(j2);
IkReal x1559=IKsin(j2);
IkReal x1560=(sj0*sj4);
IkReal x1561=(cj5*r10);
IkReal x1562=(r11*sj5);
IkReal x1563=((0.01)*sj0);
IkReal x1564=((0.01)*sj5);
IkReal x1565=(cj0*r01);
IkReal x1566=((1.0)*cj4);
IkReal x1567=(sj4*sj5);
IkReal x1568=((1.0)*cj0);
IkReal x1569=(cj5*r20);
IkReal x1570=(cj4*sj0);
IkReal x1571=(cj1*x1558);
IkReal x1572=(sj1*x1559);
IkReal x1573=(cj0*cj5*r00);
IkReal x1574=(sj1*x1558);
IkReal x1575=(cj1*x1559);
IkReal x1576=((1.0)*x1574);
IkReal x1577=((1.0)*x1575);
IkReal x1578=(x1577+x1576);
evalcond[0]=((((-0.095)*cj1))+(((-0.085)*x1571))+(((0.01)*x1569))+(((-1.0)*r21*x1564))+pz+(((0.085)*x1572)));
evalcond[1]=(((sj4*x1569))+(((-1.0)*r21*x1567))+(((-1.0)*r22*x1566))+x1571+(((-1.0)*x1572)));
evalcond[2]=((((-1.0)*r21*sj5*x1566))+((cj4*x1569))+((r22*sj4))+(((-1.0)*x1578)));
evalcond[3]=(((x1560*x1562))+((r12*x1570))+((cj0*cj4*r02))+(((-1.0)*cj5*r00*sj4*x1568))+(((-1.0)*x1560*x1561))+(((-1.0)*x1578))+((x1565*x1567)));
evalcond[4]=((((-0.01)*x1573))+(((0.095)*sj1))+(((-1.0)*px*x1568))+(((-1.0)*py*sj0))+((x1562*x1563))+(((0.085)*x1575))+(((0.085)*x1574))+((x1564*x1565))+(((-1.0)*x1561*x1563)));
evalcond[5]=((((-1.0)*x1566*x1573))+x1572+((x1562*x1570))+(((-1.0)*r12*x1560))+(((-1.0)*r02*sj4*x1568))+(((-1.0)*sj0*x1561*x1566))+((cj4*sj5*x1565))+(((-1.0)*x1571)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j2]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}

} else
{
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x1579=(cj1*cj4);
IkReal x1580=(r21*sj5);
IkReal x1581=((1.0)*sj4);
IkReal x1582=(cj5*r20);
IkReal x1583=(cj1*cj3);
IkReal x1584=(cj3*r22);
IkReal x1585=(cj3*sj1);
IkReal x1586=((1.0)*cj4*sj1);
CheckValue<IkReal> x1587 = IKatan2WithCheck(IkReal(((((-1.0)*x1580*x1581*x1585))+(((-1.0)*x1579*x1582))+(((-1.0)*x1584*x1586))+((sj4*x1582*x1585))+(((-1.0)*cj1*r22*x1581))+((x1579*x1580)))),IkReal(((((-1.0)*x1581*x1582*x1583))+(((-1.0)*r22*sj1*x1581))+((cj4*sj1*x1580))+((x1579*x1584))+(((-1.0)*x1582*x1586))+((sj4*x1580*x1583)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1587.valid){
continue;
}
CheckValue<IkReal> x1588=IKPowWithIntegerCheck(IKsign(cj3),-1);
if(!x1588.valid){
continue;
}
j2array[0]=((-1.5707963267949)+(x1587.value)+(((1.5707963267949)*(x1588.value))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[8];
IkReal x1589=IKsin(j2);
IkReal x1590=IKcos(j2);
IkReal x1591=(cj4*cj5);
IkReal x1592=(cj5*sj4);
IkReal x1593=((0.01)*sj0);
IkReal x1594=((0.01)*sj5);
IkReal x1595=(cj0*r01);
IkReal x1596=(r11*sj5);
IkReal x1597=((1.0)*sj3);
IkReal x1598=((1.0)*cj4);
IkReal x1599=((1.0)*sj0);
IkReal x1600=(sj4*sj5);
IkReal x1601=((1.0)*cj0);
IkReal x1602=((0.01)*cj5);
IkReal x1603=(cj4*sj0);
IkReal x1604=(cj1*x1590);
IkReal x1605=(r10*x1599);
IkReal x1606=(sj1*x1589);
IkReal x1607=(r00*x1601);
IkReal x1608=(sj1*x1590);
IkReal x1609=(cj1*x1589);
evalcond[0]=(((cj5*r21))+(((-1.0)*x1597*x1609))+(((-1.0)*x1597*x1608))+((r20*sj5)));
evalcond[1]=((((-0.095)*cj1))+pz+(((0.085)*x1606))+(((-1.0)*r21*x1594))+((r20*x1602))+(((-0.085)*x1604)));
evalcond[2]=(((r20*x1592))+(((-1.0)*x1606))+x1604+(((-1.0)*r21*x1600))+(((-1.0)*r22*x1598)));
evalcond[3]=(((r20*x1591))+((r22*sj4))+(((-1.0)*r21*sj5*x1598))+((cj3*x1609))+((cj3*x1608)));
evalcond[4]=((((-1.0)*cj5*x1595))+((sj3*x1606))+(((-1.0)*x1597*x1604))+(((-1.0)*cj5*r11*x1599))+(((-1.0)*sj5*x1605))+(((-1.0)*sj5*x1607)));
evalcond[5]=((((-1.0)*x1592*x1605))+(((-1.0)*x1592*x1607))+((x1595*x1600))+(((-1.0)*x1609))+(((-1.0)*x1608))+((sj0*sj4*x1596))+((cj0*cj4*r02))+((r12*x1603)));
evalcond[6]=((((0.095)*sj1))+((x1593*x1596))+((x1594*x1595))+(((-1.0)*py*x1599))+(((-1.0)*cj5*r10*x1593))+(((-1.0)*px*x1601))+(((0.085)*x1609))+(((0.085)*x1608))+(((-1.0)*cj0*r00*x1602)));
evalcond[7]=(((cj4*sj5*x1595))+(((-1.0)*r12*sj4*x1599))+((cj3*x1604))+(((-1.0)*cj3*x1606))+(((-1.0)*r02*sj4*x1601))+((x1596*x1603))+(((-1.0)*x1591*x1607))+(((-1.0)*x1591*x1605)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x1610=(r21*sj1);
IkReal x1611=((17.0)*cj5);
IkReal x1612=(cj1*sj3);
IkReal x1613=((200.0)*pz);
IkReal x1614=((2.0)*sj5);
IkReal x1615=(sj1*sj3);
IkReal x1616=((2.0)*cj5*r20);
IkReal x1617=((17.0)*r20*sj5);
CheckValue<IkReal> x1618=IKPowWithIntegerCheck(IKsign(sj3),-1);
if(!x1618.valid){
continue;
}
CheckValue<IkReal> x1619 = IKatan2WithCheck(IkReal(((((19.0)*sj1*x1612))+((cj1*r21*x1611))+((sj3*x1610*x1614))+(((-1.0)*x1613*x1615))+(((-1.0)*x1615*x1616))+((cj1*x1617)))),IkReal(((((-1.0)*r21*x1612*x1614))+((sj1*x1617))+(((-19.0)*cj1*x1612))+((x1612*x1616))+((x1612*x1613))+((x1610*x1611)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1619.valid){
continue;
}
j2array[0]=((-1.5707963267949)+(((1.5707963267949)*(x1618.value)))+(x1619.value));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[8];
IkReal x1620=IKsin(j2);
IkReal x1621=IKcos(j2);
IkReal x1622=(cj4*cj5);
IkReal x1623=(cj5*sj4);
IkReal x1624=((0.01)*sj0);
IkReal x1625=((0.01)*sj5);
IkReal x1626=(cj0*r01);
IkReal x1627=(r11*sj5);
IkReal x1628=((1.0)*sj3);
IkReal x1629=((1.0)*cj4);
IkReal x1630=((1.0)*sj0);
IkReal x1631=(sj4*sj5);
IkReal x1632=((1.0)*cj0);
IkReal x1633=((0.01)*cj5);
IkReal x1634=(cj4*sj0);
IkReal x1635=(cj1*x1621);
IkReal x1636=(r10*x1630);
IkReal x1637=(sj1*x1620);
IkReal x1638=(r00*x1632);
IkReal x1639=(sj1*x1621);
IkReal x1640=(cj1*x1620);
evalcond[0]=(((cj5*r21))+(((-1.0)*x1628*x1639))+(((-1.0)*x1628*x1640))+((r20*sj5)));
evalcond[1]=((((-0.095)*cj1))+(((-1.0)*r21*x1625))+((r20*x1633))+pz+(((-0.085)*x1635))+(((0.085)*x1637)));
evalcond[2]=(((r20*x1623))+x1635+(((-1.0)*x1637))+(((-1.0)*r22*x1629))+(((-1.0)*r21*x1631)));
evalcond[3]=(((r20*x1622))+((cj3*x1640))+(((-1.0)*r21*sj5*x1629))+((r22*sj4))+((cj3*x1639)));
evalcond[4]=((((-1.0)*sj5*x1636))+(((-1.0)*sj5*x1638))+(((-1.0)*cj5*x1626))+(((-1.0)*cj5*r11*x1630))+((sj3*x1637))+(((-1.0)*x1628*x1635)));
evalcond[5]=((((-1.0)*x1623*x1638))+(((-1.0)*x1623*x1636))+((r12*x1634))+((cj0*cj4*r02))+((sj0*sj4*x1627))+(((-1.0)*x1640))+(((-1.0)*x1639))+((x1626*x1631)));
evalcond[6]=((((0.095)*sj1))+(((-1.0)*px*x1632))+(((-1.0)*cj5*r10*x1624))+(((-1.0)*cj0*r00*x1633))+(((0.085)*x1639))+((x1624*x1627))+(((0.085)*x1640))+((x1625*x1626))+(((-1.0)*py*x1630)));
evalcond[7]=(((x1627*x1634))+(((-1.0)*r02*sj4*x1632))+(((-1.0)*x1622*x1636))+(((-1.0)*x1622*x1638))+((cj3*x1635))+((cj4*sj5*x1626))+(((-1.0)*cj3*x1637))+(((-1.0)*r12*sj4*x1630)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x1641=(cj5*r20);
IkReal x1642=(r20*sj5);
IkReal x1643=(r21*sj5);
IkReal x1644=(cj5*r21);
IkReal x1645=(cj1*sj3*sj4);
IkReal x1646=(cj4*r22*sj3);
IkReal x1647=(sj1*sj3*sj4);
CheckValue<IkReal> x1648 = IKatan2WithCheck(IkReal((((cj1*x1642))+((cj1*x1644))+((x1641*x1647))+(((-1.0)*sj1*x1646))+(((-1.0)*x1643*x1647)))),IkReal((((sj1*x1642))+((sj1*x1644))+((cj1*x1646))+(((-1.0)*x1641*x1645))+((x1643*x1645)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1648.valid){
continue;
}
CheckValue<IkReal> x1649=IKPowWithIntegerCheck(IKsign(sj3),-1);
if(!x1649.valid){
continue;
}
j2array[0]=((-1.5707963267949)+(x1648.value)+(((1.5707963267949)*(x1649.value))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[8];
IkReal x1650=IKsin(j2);
IkReal x1651=IKcos(j2);
IkReal x1652=(cj4*cj5);
IkReal x1653=(cj5*sj4);
IkReal x1654=((0.01)*sj0);
IkReal x1655=((0.01)*sj5);
IkReal x1656=(cj0*r01);
IkReal x1657=(r11*sj5);
IkReal x1658=((1.0)*sj3);
IkReal x1659=((1.0)*cj4);
IkReal x1660=((1.0)*sj0);
IkReal x1661=(sj4*sj5);
IkReal x1662=((1.0)*cj0);
IkReal x1663=((0.01)*cj5);
IkReal x1664=(cj4*sj0);
IkReal x1665=(cj1*x1651);
IkReal x1666=(r10*x1660);
IkReal x1667=(sj1*x1650);
IkReal x1668=(r00*x1662);
IkReal x1669=(sj1*x1651);
IkReal x1670=(cj1*x1650);
evalcond[0]=(((cj5*r21))+(((-1.0)*x1658*x1670))+(((-1.0)*x1658*x1669))+((r20*sj5)));
evalcond[1]=((((-0.095)*cj1))+(((-1.0)*r21*x1655))+((r20*x1663))+pz+(((0.085)*x1667))+(((-0.085)*x1665)));
evalcond[2]=((((-1.0)*r21*x1661))+(((-1.0)*r22*x1659))+x1665+((r20*x1653))+(((-1.0)*x1667)));
evalcond[3]=(((cj3*x1670))+((r22*sj4))+((r20*x1652))+((cj3*x1669))+(((-1.0)*r21*sj5*x1659)));
evalcond[4]=((((-1.0)*sj5*x1666))+(((-1.0)*sj5*x1668))+(((-1.0)*cj5*r11*x1660))+((sj3*x1667))+(((-1.0)*x1658*x1665))+(((-1.0)*cj5*x1656)));
evalcond[5]=(((sj0*sj4*x1657))+((r12*x1664))+(((-1.0)*x1653*x1666))+(((-1.0)*x1653*x1668))+(((-1.0)*x1669))+((cj0*cj4*r02))+(((-1.0)*x1670))+((x1656*x1661)));
evalcond[6]=(((x1654*x1657))+(((0.095)*sj1))+(((-1.0)*py*x1660))+(((-1.0)*cj5*r10*x1654))+((x1655*x1656))+(((-1.0)*px*x1662))+(((0.085)*x1669))+(((-1.0)*cj0*r00*x1663))+(((0.085)*x1670)));
evalcond[7]=((((-1.0)*x1652*x1668))+(((-1.0)*x1652*x1666))+(((-1.0)*r02*sj4*x1662))+(((-1.0)*r12*sj4*x1660))+((cj3*x1665))+(((-1.0)*cj3*x1667))+((x1657*x1664))+((cj4*sj5*x1656)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}
}
}

}

}

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x1671=(cj3*cj4);
IkReal x1672=((1.0)*cj5);
IkReal x1673=(cj3*sj4);
CheckValue<IkReal> x1674=IKPowWithIntegerCheck(IKsign(((((-1.0)*cj4*r20*x1672))+((cj4*r21*sj5))+(((-1.0)*r22*sj4)))),-1);
if(!x1674.valid){
continue;
}
CheckValue<IkReal> x1675 = IKatan2WithCheck(IkReal(((((-1.0)*r10*x1672*x1673))+((r11*sj5*x1673))+((r12*x1671)))),IkReal((((r02*x1671))+((r01*sj5*x1673))+(((-1.0)*r00*x1672*x1673)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1675.valid){
continue;
}
j0array[0]=((-1.5707963267949)+(((1.5707963267949)*(x1674.value)))+(x1675.value));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[4];
IkReal x1676=IKsin(j0);
IkReal x1677=IKcos(j0);
IkReal x1678=(r11*sj5);
IkReal x1679=((1.0)*r01);
IkReal x1680=((1.0)*r10);
IkReal x1681=(sj4*x1677);
IkReal x1682=(sj5*x1676);
IkReal x1683=(cj5*x1676);
IkReal x1684=(cj4*x1677);
IkReal x1685=(r02*x1676);
IkReal x1686=((0.01)*x1677);
IkReal x1687=((1.0)*x1677);
evalcond[0]=(((r00*x1682))+cj3+((r01*x1683))+(((-1.0)*cj5*r11*x1687))+(((-1.0)*sj5*x1677*x1680)));
evalcond[1]=((((-0.01)*r01*x1682))+(((-1.0)*py*x1687))+((px*x1676))+(((0.01)*r00*x1683))+(((-1.0)*cj5*r10*x1686))+((x1678*x1686)));
evalcond[2]=(((r12*x1684))+(((-1.0)*cj4*x1685))+(((-1.0)*cj5*x1680*x1681))+(((-1.0)*sj4*x1679*x1682))+((r00*sj4*x1683))+((x1678*x1681)));
evalcond[3]=(sj3+(((-1.0)*cj4*x1679*x1682))+(((-1.0)*cj5*x1680*x1684))+((sj4*x1685))+(((-1.0)*r12*x1681))+((cj4*r00*x1683))+((x1678*x1684)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
IkReal x1688=((0.894736842105263)*cj4);
IkReal x1689=((0.105263157894737)*cj5);
IkReal x1690=(r01*sj5);
IkReal x1691=(r10*sj0);
IkReal x1692=((0.894736842105263)*sj4);
IkReal x1693=(r21*sj5);
IkReal x1694=(cj0*x1692);
IkReal x1695=(r11*sj0*sj5);
if( IKabs(((((-1.0)*x1692*x1695))+(((-0.105263157894737)*x1695))+((cj0*r00*x1689))+(((-1.0)*cj0*r02*x1688))+((cj5*r00*x1694))+(((-1.0)*x1690*x1694))+((x1689*x1691))+(((10.5263157894737)*py*sj0))+(((-1.0)*r12*sj0*x1688))+(((-0.105263157894737)*cj0*x1690))+((cj5*x1691*x1692))+(((10.5263157894737)*cj0*px)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*x1692*x1693))+(((-0.105263157894737)*x1693))+(((10.5263157894737)*pz))+(((-1.0)*r22*x1688))+((cj5*r20*x1692))+((r20*x1689)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*x1692*x1695))+(((-0.105263157894737)*x1695))+((cj0*r00*x1689))+(((-1.0)*cj0*r02*x1688))+((cj5*r00*x1694))+(((-1.0)*x1690*x1694))+((x1689*x1691))+(((10.5263157894737)*py*sj0))+(((-1.0)*r12*sj0*x1688))+(((-0.105263157894737)*cj0*x1690))+((cj5*x1691*x1692))+(((10.5263157894737)*cj0*px))))+IKsqr(((((-1.0)*x1692*x1693))+(((-0.105263157894737)*x1693))+(((10.5263157894737)*pz))+(((-1.0)*r22*x1688))+((cj5*r20*x1692))+((r20*x1689))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j1array[0]=IKatan2(((((-1.0)*x1692*x1695))+(((-0.105263157894737)*x1695))+((cj0*r00*x1689))+(((-1.0)*cj0*r02*x1688))+((cj5*r00*x1694))+(((-1.0)*x1690*x1694))+((x1689*x1691))+(((10.5263157894737)*py*sj0))+(((-1.0)*r12*sj0*x1688))+(((-0.105263157894737)*cj0*x1690))+((cj5*x1691*x1692))+(((10.5263157894737)*cj0*px))), ((((-1.0)*x1692*x1693))+(((-0.105263157894737)*x1693))+(((10.5263157894737)*pz))+(((-1.0)*r22*x1688))+((cj5*r20*x1692))+((r20*x1689))));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[6];
IkReal x1696=IKcos(j1);
IkReal x1697=IKsin(j1);
IkReal x1698=(r11*sj0);
IkReal x1699=((0.085)*cj5);
IkReal x1700=((0.01)*cj3);
IkReal x1701=((0.085)*sj4);
IkReal x1702=(cj0*r00);
IkReal x1703=((0.085)*cj4);
IkReal x1704=(r10*sj0);
IkReal x1705=((0.01)*cj5);
IkReal x1706=(cj0*px);
IkReal x1707=((0.01)*sj5);
IkReal x1708=((1.0)*pz);
IkReal x1709=((0.085)*sj5);
IkReal x1710=(r21*sj5);
IkReal x1711=(r12*sj0);
IkReal x1712=(py*sj0);
IkReal x1713=(cj0*r02);
IkReal x1714=((1.0)*sj3);
IkReal x1715=((0.095)*x1696);
IkReal x1716=(cj0*r01*sj5);
IkReal x1717=((0.095)*x1697);
evalcond[0]=(((r22*x1703))+x1715+(((-1.0)*r20*x1705))+(((-1.0)*x1708))+((r21*x1707))+(((-1.0)*r20*sj4*x1699))+((x1701*x1710)));
evalcond[1]=((((-1.0)*x1702*x1705))+((sj5*x1698*x1701))+((x1703*x1713))+((x1703*x1711))+x1717+(((-1.0)*x1706))+(((-1.0)*x1712))+(((-1.0)*x1704*x1705))+((cj0*r01*x1707))+(((-1.0)*sj4*x1699*x1702))+(((-1.0)*sj4*x1699*x1704))+((x1701*x1716))+((x1698*x1707)));
evalcond[2]=((((-1.0)*r21*sj3*x1707))+((cj0*r01*x1699))+(((-1.0)*sj3*x1715))+((r20*sj3*x1705))+((x1704*x1709))+((x1702*x1709))+((pz*sj3))+((x1698*x1699)));
evalcond[3]=(((sj3*x1698*x1707))+((r21*x1699))+(((-1.0)*x1712*x1714))+((r20*x1709))+(((-1.0)*sj3*x1704*x1705))+(((-1.0)*sj3*x1702*x1705))+((cj0*r01*sj3*x1707))+((sj3*x1717))+(((-1.0)*x1706*x1714)));
evalcond[4]=((((-1.0)*cj3*x1717))+((cj4*r20*x1699))+((r22*x1701))+((cj5*x1700*x1702))+((cj5*x1700*x1704))+(((-1.0)*x1700*x1716))+((cj3*x1712))+(((-1.0)*x1703*x1710))+((cj3*x1706))+(((-1.0)*sj5*x1698*x1700)));
evalcond[5]=((((-1.0)*cj3*x1708))+((x1700*x1710))+((cj3*x1715))+(((-1.0)*x1703*x1716))+((x1701*x1711))+((x1701*x1713))+((cj4*x1699*x1704))+((cj4*x1699*x1702))+(((-1.0)*cj5*r20*x1700))+(((-1.0)*sj5*x1698*x1703)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j2eval[3];
IkReal x1718=(cj5*r20);
IkReal x1719=(r20*sj5);
IkReal x1720=(r21*sj5);
IkReal x1721=(cj5*r21);
IkReal x1722=(cj1*sj3*sj4);
IkReal x1723=(cj4*r22*sj3);
IkReal x1724=(sj1*sj3*sj4);
j2eval[0]=sj3;
j2eval[1]=((IKabs((((sj1*x1721))+((x1720*x1722))+((cj1*x1723))+(((-1.0)*x1718*x1722))+((sj1*x1719)))))+(IKabs((((cj1*x1719))+(((-1.0)*x1720*x1724))+((x1718*x1724))+(((-1.0)*sj1*x1723))+((cj1*x1721))))));
j2eval[2]=IKsign(sj3);
if( IKabs(j2eval[0]) < 0.0000010000000000  || IKabs(j2eval[1]) < 0.0000010000000000  || IKabs(j2eval[2]) < 0.0000010000000000  )
{
{
IkReal j2eval[2];
j2eval[0]=sj3;
j2eval[1]=IKsign(sj3);
if( IKabs(j2eval[0]) < 0.0000010000000000  || IKabs(j2eval[1]) < 0.0000010000000000  )
{
{
IkReal j2eval[2];
j2eval[0]=cj3;
j2eval[1]=IKsign(cj3);
if( IKabs(j2eval[0]) < 0.0000010000000000  || IKabs(j2eval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x1725=(cj4*r22);
IkReal x1726=((1.0)*sj1);
IkReal x1727=(r20*sj1);
IkReal x1728=(cj5*sj4);
IkReal x1729=(cj1*r20);
IkReal x1730=(cj5*r21);
IkReal x1731=(r21*sj4*sj5);
if( IKabs((((sj5*x1729))+(((-1.0)*x1726*x1731))+((cj1*x1730))+(((-1.0)*x1725*x1726))+((x1727*x1728)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((sj5*x1727))+(((-1.0)*x1728*x1729))+((sj1*x1730))+((cj1*x1731))+((cj1*x1725)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((sj5*x1729))+(((-1.0)*x1726*x1731))+((cj1*x1730))+(((-1.0)*x1725*x1726))+((x1727*x1728))))+IKsqr((((sj5*x1727))+(((-1.0)*x1728*x1729))+((sj1*x1730))+((cj1*x1731))+((cj1*x1725))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j2array[0]=IKatan2((((sj5*x1729))+(((-1.0)*x1726*x1731))+((cj1*x1730))+(((-1.0)*x1725*x1726))+((x1727*x1728))), (((sj5*x1727))+(((-1.0)*x1728*x1729))+((sj1*x1730))+((cj1*x1731))+((cj1*x1725))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[6];
IkReal x1732=IKsin(j2);
IkReal x1733=IKcos(j2);
IkReal x1734=(sj0*sj5);
IkReal x1735=((1.0)*r10);
IkReal x1736=(cj0*r01);
IkReal x1737=(cj5*sj4);
IkReal x1738=((1.0)*sj0);
IkReal x1739=(sj4*sj5);
IkReal x1740=((0.01)*cj5);
IkReal x1741=(cj1*x1733);
IkReal x1742=(sj1*x1732);
IkReal x1743=((1.0)*cj0*r00);
IkReal x1744=(sj1*x1733);
IkReal x1745=(cj1*x1732);
IkReal x1746=((1.0)*x1744);
IkReal x1747=((1.0)*x1745);
IkReal x1748=(x1746+x1747);
evalcond[0]=(((cj5*r21))+(((-1.0)*x1748))+((r20*sj5)));
CheckValue<IkReal> x1749=IKPowWithIntegerCheck(cj4,-1);
if(!x1749.valid){
continue;
}
evalcond[1]=((((-0.095)*cj1))+(((-0.085)*x1741))+(((-0.01)*r22*sj4*(x1749.value)))+pz+(((0.085)*x1742)));
evalcond[2]=(x1741+(((-1.0)*x1742))+(((-1.0)*r21*x1739))+(((-1.0)*cj4*r22))+((r20*x1737)));
evalcond[3]=((((-1.0)*cj5*x1736))+x1742+(((-1.0)*x1741))+(((-1.0)*x1734*x1735))+(((-1.0)*cj5*r11*x1738))+(((-1.0)*sj5*x1743)));
evalcond[4]=((((-1.0)*sj0*x1735*x1737))+((x1736*x1739))+((cj0*cj4*r02))+(((-1.0)*x1737*x1743))+(((-1.0)*x1748))+((r11*sj4*x1734))+((cj4*r12*sj0)));
evalcond[5]=((((0.095)*sj1))+(((-1.0)*py*x1738))+(((-1.0)*cj0*r00*x1740))+(((0.01)*sj5*x1736))+(((0.01)*r11*x1734))+(((-1.0)*r10*sj0*x1740))+(((0.085)*x1745))+(((0.085)*x1744))+(((-1.0)*cj0*px)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x1750=((1.0)*sj1);
IkReal x1751=(r20*sj5);
IkReal x1752=(cj5*r21);
IkReal x1753=((1.0)*cj1);
IkReal x1754=(cj4*r22);
IkReal x1755=(r21*sj4*sj5);
IkReal x1756=(cj5*r20*sj4);
if( IKabs(((((-1.0)*x1750*x1755))+(((-1.0)*x1750*x1754))+(((-1.0)*x1751*x1753))+(((-1.0)*x1752*x1753))+((sj1*x1756)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((cj1*x1754))+((cj1*x1755))+(((-1.0)*x1750*x1751))+(((-1.0)*x1750*x1752))+(((-1.0)*x1753*x1756)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*x1750*x1755))+(((-1.0)*x1750*x1754))+(((-1.0)*x1751*x1753))+(((-1.0)*x1752*x1753))+((sj1*x1756))))+IKsqr((((cj1*x1754))+((cj1*x1755))+(((-1.0)*x1750*x1751))+(((-1.0)*x1750*x1752))+(((-1.0)*x1753*x1756))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j2array[0]=IKatan2(((((-1.0)*x1750*x1755))+(((-1.0)*x1750*x1754))+(((-1.0)*x1751*x1753))+(((-1.0)*x1752*x1753))+((sj1*x1756))), (((cj1*x1754))+((cj1*x1755))+(((-1.0)*x1750*x1751))+(((-1.0)*x1750*x1752))+(((-1.0)*x1753*x1756))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[6];
IkReal x1757=IKsin(j2);
IkReal x1758=IKcos(j2);
IkReal x1759=(sj0*sj5);
IkReal x1760=((1.0)*r10);
IkReal x1761=(cj5*sj4);
IkReal x1762=((1.0)*cj0);
IkReal x1763=((1.0)*sj0);
IkReal x1764=((0.01)*cj5);
IkReal x1765=(cj1*x1758);
IkReal x1766=(sj1*x1757);
IkReal x1767=(cj1*x1757);
IkReal x1768=(cj0*r01*sj5);
IkReal x1769=(sj1*x1758);
IkReal x1770=((1.0)*x1766);
evalcond[0]=(((cj5*r21))+x1769+x1767+((r20*sj5)));
CheckValue<IkReal> x1771=IKPowWithIntegerCheck(cj4,-1);
if(!x1771.valid){
continue;
}
evalcond[1]=((((-0.085)*x1765))+(((-0.095)*cj1))+(((0.085)*x1766))+(((-0.01)*r22*sj4*(x1771.value)))+pz);
evalcond[2]=(((r20*x1761))+x1765+(((-1.0)*x1770))+(((-1.0)*r21*sj4*sj5))+(((-1.0)*cj4*r22)));
evalcond[3]=((((-1.0)*cj5*r01*x1762))+x1765+(((-1.0)*x1759*x1760))+(((-1.0)*cj5*r11*x1763))+(((-1.0)*x1770))+(((-1.0)*r00*sj5*x1762)));
evalcond[4]=((((-1.0)*x1767))+(((-1.0)*x1769))+(((-1.0)*r00*x1761*x1762))+((r11*sj4*x1759))+(((-1.0)*sj0*x1760*x1761))+((cj0*cj4*r02))+((sj4*x1768))+((cj4*r12*sj0)));
evalcond[5]=((((0.01)*x1768))+(((0.095)*sj1))+(((-1.0)*cj0*r00*x1764))+(((0.085)*x1767))+(((0.085)*x1769))+(((-1.0)*px*x1762))+(((-1.0)*r10*sj0*x1764))+(((0.01)*r11*x1759))+(((-1.0)*py*x1763)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j3))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x1772=(cj1*r22);
IkReal x1773=(sj1*sj4);
IkReal x1774=(cj5*r20);
IkReal x1775=((1.0)*sj4);
IkReal x1776=(r21*sj5);
IkReal x1777=(cj4*sj1);
IkReal x1778=(cj1*x1776);
IkReal x1779=((1.0)*r22*sj1);
if( IKabs(((((-1.0)*r22*x1777))+(((-1.0)*x1772*x1775))+((x1773*x1774))+((cj4*x1778))+(((-1.0)*cj1*cj4*x1774))+(((-1.0)*x1773*x1776)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((sj4*x1778))+(((-1.0)*r22*x1773))+((x1776*x1777))+(((-1.0)*cj1*x1774*x1775))+((cj4*x1772))+(((-1.0)*x1774*x1777)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*r22*x1777))+(((-1.0)*x1772*x1775))+((x1773*x1774))+((cj4*x1778))+(((-1.0)*cj1*cj4*x1774))+(((-1.0)*x1773*x1776))))+IKsqr((((sj4*x1778))+(((-1.0)*r22*x1773))+((x1776*x1777))+(((-1.0)*cj1*x1774*x1775))+((cj4*x1772))+(((-1.0)*x1774*x1777))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j2array[0]=IKatan2(((((-1.0)*r22*x1777))+(((-1.0)*x1772*x1775))+((x1773*x1774))+((cj4*x1778))+(((-1.0)*cj1*cj4*x1774))+(((-1.0)*x1773*x1776))), (((sj4*x1778))+(((-1.0)*r22*x1773))+((x1776*x1777))+(((-1.0)*cj1*x1774*x1775))+((cj4*x1772))+(((-1.0)*x1774*x1777))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[6];
IkReal x1780=IKsin(j2);
IkReal x1781=IKcos(j2);
IkReal x1782=(sj0*sj4);
IkReal x1783=(cj5*r10);
IkReal x1784=(r11*sj5);
IkReal x1785=((0.01)*sj0);
IkReal x1786=((0.01)*sj5);
IkReal x1787=(cj0*r01);
IkReal x1788=((1.0)*cj4);
IkReal x1789=(sj4*sj5);
IkReal x1790=((1.0)*cj0);
IkReal x1791=(cj5*r20);
IkReal x1792=(cj4*sj0);
IkReal x1793=(cj1*x1781);
IkReal x1794=(sj1*x1780);
IkReal x1795=(cj1*x1780);
IkReal x1796=(cj0*cj5*r00);
IkReal x1797=(sj1*x1781);
IkReal x1798=((1.0)*x1794);
evalcond[0]=(x1797+x1795+(((-1.0)*r21*sj5*x1788))+((r22*sj4))+((cj4*x1791)));
evalcond[1]=((((-0.095)*cj1))+(((-0.085)*x1793))+pz+(((-1.0)*r21*x1786))+(((0.01)*x1791))+(((0.085)*x1794)));
evalcond[2]=((((-1.0)*x1798))+x1793+(((-1.0)*r22*x1788))+((sj4*x1791))+(((-1.0)*r21*x1789)));
evalcond[3]=(((x1782*x1784))+(((-1.0)*x1782*x1783))+((cj0*cj4*r02))+((x1787*x1789))+((r12*x1792))+(((-1.0)*x1797))+(((-1.0)*x1795))+(((-1.0)*cj5*r00*sj4*x1790)));
evalcond[4]=((((-1.0)*x1783*x1785))+(((0.095)*sj1))+((x1784*x1785))+(((-0.01)*x1796))+(((-1.0)*py*sj0))+(((-1.0)*px*x1790))+((x1786*x1787))+(((0.085)*x1797))+(((0.085)*x1795)));
evalcond[5]=((((-1.0)*x1798))+(((-1.0)*r12*x1782))+x1793+(((-1.0)*r02*sj4*x1790))+((x1784*x1792))+((cj4*sj5*x1787))+(((-1.0)*x1788*x1796))+(((-1.0)*sj0*x1783*x1788)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x1799=((1.0)*cj4);
IkReal x1800=(r22*sj1);
IkReal x1801=(cj1*r22);
IkReal x1802=(sj1*sj4);
IkReal x1803=(cj5*r20);
IkReal x1804=(r21*sj5);
IkReal x1805=(cj1*x1804);
if( IKabs((((x1802*x1803))+((sj4*x1801))+(((-1.0)*x1799*x1805))+(((-1.0)*x1799*x1800))+((cj1*cj4*x1803))+(((-1.0)*x1802*x1804)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((sj4*x1805))+((sj4*x1800))+(((-1.0)*sj1*x1799*x1804))+(((-1.0)*cj1*sj4*x1803))+((cj4*x1801))+((cj4*sj1*x1803)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((x1802*x1803))+((sj4*x1801))+(((-1.0)*x1799*x1805))+(((-1.0)*x1799*x1800))+((cj1*cj4*x1803))+(((-1.0)*x1802*x1804))))+IKsqr((((sj4*x1805))+((sj4*x1800))+(((-1.0)*sj1*x1799*x1804))+(((-1.0)*cj1*sj4*x1803))+((cj4*x1801))+((cj4*sj1*x1803))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j2array[0]=IKatan2((((x1802*x1803))+((sj4*x1801))+(((-1.0)*x1799*x1805))+(((-1.0)*x1799*x1800))+((cj1*cj4*x1803))+(((-1.0)*x1802*x1804))), (((sj4*x1805))+((sj4*x1800))+(((-1.0)*sj1*x1799*x1804))+(((-1.0)*cj1*sj4*x1803))+((cj4*x1801))+((cj4*sj1*x1803))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[6];
IkReal x1806=IKcos(j2);
IkReal x1807=IKsin(j2);
IkReal x1808=(sj0*sj4);
IkReal x1809=(cj5*r10);
IkReal x1810=(r11*sj5);
IkReal x1811=((0.01)*sj0);
IkReal x1812=((0.01)*sj5);
IkReal x1813=(cj0*r01);
IkReal x1814=((1.0)*cj4);
IkReal x1815=(sj4*sj5);
IkReal x1816=((1.0)*cj0);
IkReal x1817=(cj5*r20);
IkReal x1818=(cj4*sj0);
IkReal x1819=(cj1*x1806);
IkReal x1820=(sj1*x1807);
IkReal x1821=(cj0*cj5*r00);
IkReal x1822=(sj1*x1806);
IkReal x1823=(cj1*x1807);
IkReal x1824=((1.0)*x1822);
IkReal x1825=((1.0)*x1823);
IkReal x1826=(x1825+x1824);
evalcond[0]=((((-0.095)*cj1))+(((0.01)*x1817))+(((-0.085)*x1819))+pz+(((-1.0)*r21*x1812))+(((0.085)*x1820)));
evalcond[1]=((((-1.0)*x1820))+x1819+(((-1.0)*r21*x1815))+((sj4*x1817))+(((-1.0)*r22*x1814)));
evalcond[2]=((((-1.0)*x1826))+(((-1.0)*r21*sj5*x1814))+((r22*sj4))+((cj4*x1817)));
evalcond[3]=((((-1.0)*x1826))+(((-1.0)*cj5*r00*sj4*x1816))+((x1813*x1815))+((cj0*cj4*r02))+((x1808*x1810))+(((-1.0)*x1808*x1809))+((r12*x1818)));
evalcond[4]=((((-0.01)*x1821))+(((0.095)*sj1))+(((-1.0)*x1809*x1811))+((x1812*x1813))+(((-1.0)*py*sj0))+(((0.085)*x1822))+(((0.085)*x1823))+((x1810*x1811))+(((-1.0)*px*x1816)));
evalcond[5]=(((cj4*sj5*x1813))+(((-1.0)*r12*x1808))+x1820+(((-1.0)*r02*sj4*x1816))+(((-1.0)*x1814*x1821))+((x1810*x1818))+(((-1.0)*x1819))+(((-1.0)*sj0*x1809*x1814)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j2]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}

} else
{
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x1827=(cj1*cj4);
IkReal x1828=(r21*sj5);
IkReal x1829=((1.0)*sj4);
IkReal x1830=(cj5*r20);
IkReal x1831=(cj1*cj3);
IkReal x1832=(cj3*r22);
IkReal x1833=(cj3*sj1);
IkReal x1834=((1.0)*cj4*sj1);
CheckValue<IkReal> x1835 = IKatan2WithCheck(IkReal(((((-1.0)*x1832*x1834))+(((-1.0)*cj1*r22*x1829))+((sj4*x1830*x1833))+(((-1.0)*x1827*x1830))+((x1827*x1828))+(((-1.0)*x1828*x1829*x1833)))),IkReal((((x1827*x1832))+(((-1.0)*r22*sj1*x1829))+((cj4*sj1*x1828))+(((-1.0)*x1829*x1830*x1831))+((sj4*x1828*x1831))+(((-1.0)*x1830*x1834)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1835.valid){
continue;
}
CheckValue<IkReal> x1836=IKPowWithIntegerCheck(IKsign(cj3),-1);
if(!x1836.valid){
continue;
}
j2array[0]=((-1.5707963267949)+(x1835.value)+(((1.5707963267949)*(x1836.value))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[8];
IkReal x1837=IKsin(j2);
IkReal x1838=IKcos(j2);
IkReal x1839=(cj4*cj5);
IkReal x1840=(cj5*sj4);
IkReal x1841=((0.01)*sj0);
IkReal x1842=((0.01)*sj5);
IkReal x1843=(cj0*r01);
IkReal x1844=(r11*sj5);
IkReal x1845=((1.0)*sj3);
IkReal x1846=((1.0)*cj4);
IkReal x1847=((1.0)*sj0);
IkReal x1848=(sj4*sj5);
IkReal x1849=((1.0)*cj0);
IkReal x1850=((0.01)*cj5);
IkReal x1851=(cj4*sj0);
IkReal x1852=(cj1*x1838);
IkReal x1853=(r10*x1847);
IkReal x1854=(sj1*x1837);
IkReal x1855=(r00*x1849);
IkReal x1856=(sj1*x1838);
IkReal x1857=(cj1*x1837);
evalcond[0]=((((-1.0)*x1845*x1856))+(((-1.0)*x1845*x1857))+((cj5*r21))+((r20*sj5)));
evalcond[1]=((((-0.095)*cj1))+(((-0.085)*x1852))+pz+(((-1.0)*r21*x1842))+((r20*x1850))+(((0.085)*x1854)));
evalcond[2]=((((-1.0)*r22*x1846))+(((-1.0)*x1854))+((r20*x1840))+x1852+(((-1.0)*r21*x1848)));
evalcond[3]=(((r22*sj4))+(((-1.0)*r21*sj5*x1846))+((cj3*x1857))+((cj3*x1856))+((r20*x1839)));
evalcond[4]=((((-1.0)*x1845*x1852))+(((-1.0)*sj5*x1853))+(((-1.0)*sj5*x1855))+(((-1.0)*cj5*x1843))+((sj3*x1854))+(((-1.0)*cj5*r11*x1847)));
evalcond[5]=((((-1.0)*x1840*x1853))+(((-1.0)*x1840*x1855))+((sj0*sj4*x1844))+(((-1.0)*x1856))+(((-1.0)*x1857))+((cj0*cj4*r02))+((x1843*x1848))+((r12*x1851)));
evalcond[6]=((((0.095)*sj1))+(((-1.0)*px*x1849))+(((-1.0)*cj0*r00*x1850))+(((-1.0)*cj5*r10*x1841))+((x1842*x1843))+(((-1.0)*py*x1847))+((x1841*x1844))+(((0.085)*x1857))+(((0.085)*x1856)));
evalcond[7]=((((-1.0)*cj3*x1854))+(((-1.0)*r12*sj4*x1847))+((cj4*sj5*x1843))+((x1844*x1851))+((cj3*x1852))+(((-1.0)*r02*sj4*x1849))+(((-1.0)*x1839*x1853))+(((-1.0)*x1839*x1855)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x1858=(r21*sj1);
IkReal x1859=((17.0)*cj5);
IkReal x1860=(cj1*sj3);
IkReal x1861=((200.0)*pz);
IkReal x1862=((2.0)*sj5);
IkReal x1863=(sj1*sj3);
IkReal x1864=((2.0)*cj5*r20);
IkReal x1865=((17.0)*r20*sj5);
CheckValue<IkReal> x1866=IKPowWithIntegerCheck(IKsign(sj3),-1);
if(!x1866.valid){
continue;
}
CheckValue<IkReal> x1867 = IKatan2WithCheck(IkReal((((cj1*x1865))+(((19.0)*sj1*x1860))+((sj3*x1858*x1862))+(((-1.0)*x1863*x1864))+(((-1.0)*x1861*x1863))+((cj1*r21*x1859)))),IkReal((((x1860*x1861))+((x1860*x1864))+(((-19.0)*cj1*x1860))+((sj1*x1865))+((x1858*x1859))+(((-1.0)*r21*x1860*x1862)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1867.valid){
continue;
}
j2array[0]=((-1.5707963267949)+(((1.5707963267949)*(x1866.value)))+(x1867.value));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[8];
IkReal x1868=IKsin(j2);
IkReal x1869=IKcos(j2);
IkReal x1870=(cj4*cj5);
IkReal x1871=(cj5*sj4);
IkReal x1872=((0.01)*sj0);
IkReal x1873=((0.01)*sj5);
IkReal x1874=(cj0*r01);
IkReal x1875=(r11*sj5);
IkReal x1876=((1.0)*sj3);
IkReal x1877=((1.0)*cj4);
IkReal x1878=((1.0)*sj0);
IkReal x1879=(sj4*sj5);
IkReal x1880=((1.0)*cj0);
IkReal x1881=((0.01)*cj5);
IkReal x1882=(cj4*sj0);
IkReal x1883=(cj1*x1869);
IkReal x1884=(r10*x1878);
IkReal x1885=(sj1*x1868);
IkReal x1886=(r00*x1880);
IkReal x1887=(sj1*x1869);
IkReal x1888=(cj1*x1868);
evalcond[0]=(((cj5*r21))+(((-1.0)*x1876*x1888))+(((-1.0)*x1876*x1887))+((r20*sj5)));
evalcond[1]=((((-0.095)*cj1))+((r20*x1881))+(((-0.085)*x1883))+(((0.085)*x1885))+pz+(((-1.0)*r21*x1873)));
evalcond[2]=((((-1.0)*r22*x1877))+((r20*x1871))+x1883+(((-1.0)*x1885))+(((-1.0)*r21*x1879)));
evalcond[3]=(((r22*sj4))+(((-1.0)*r21*sj5*x1877))+((cj3*x1888))+((cj3*x1887))+((r20*x1870)));
evalcond[4]=((((-1.0)*x1876*x1883))+(((-1.0)*sj5*x1886))+(((-1.0)*sj5*x1884))+(((-1.0)*cj5*x1874))+(((-1.0)*cj5*r11*x1878))+((sj3*x1885)));
evalcond[5]=(((sj0*sj4*x1875))+((r12*x1882))+((x1874*x1879))+((cj0*cj4*r02))+(((-1.0)*x1871*x1886))+(((-1.0)*x1871*x1884))+(((-1.0)*x1887))+(((-1.0)*x1888)));
evalcond[6]=((((-1.0)*px*x1880))+(((0.095)*sj1))+(((-1.0)*cj0*r00*x1881))+(((0.085)*x1888))+(((0.085)*x1887))+(((-1.0)*cj5*r10*x1872))+((x1873*x1874))+(((-1.0)*py*x1878))+((x1872*x1875)));
evalcond[7]=((((-1.0)*r12*sj4*x1878))+(((-1.0)*cj3*x1885))+(((-1.0)*x1870*x1884))+(((-1.0)*x1870*x1886))+((cj4*sj5*x1874))+((x1875*x1882))+((cj3*x1883))+(((-1.0)*r02*sj4*x1880)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x1889=(cj5*r20);
IkReal x1890=(r20*sj5);
IkReal x1891=(r21*sj5);
IkReal x1892=(cj5*r21);
IkReal x1893=(cj1*sj3*sj4);
IkReal x1894=(cj4*r22*sj3);
IkReal x1895=(sj1*sj3*sj4);
CheckValue<IkReal> x1896=IKPowWithIntegerCheck(IKsign(sj3),-1);
if(!x1896.valid){
continue;
}
CheckValue<IkReal> x1897 = IKatan2WithCheck(IkReal(((((-1.0)*x1891*x1895))+(((-1.0)*sj1*x1894))+((cj1*x1890))+((cj1*x1892))+((x1889*x1895)))),IkReal(((((-1.0)*x1889*x1893))+((cj1*x1894))+((x1891*x1893))+((sj1*x1892))+((sj1*x1890)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1897.valid){
continue;
}
j2array[0]=((-1.5707963267949)+(((1.5707963267949)*(x1896.value)))+(x1897.value));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[8];
IkReal x1898=IKsin(j2);
IkReal x1899=IKcos(j2);
IkReal x1900=(cj4*cj5);
IkReal x1901=(cj5*sj4);
IkReal x1902=((0.01)*sj0);
IkReal x1903=((0.01)*sj5);
IkReal x1904=(cj0*r01);
IkReal x1905=(r11*sj5);
IkReal x1906=((1.0)*sj3);
IkReal x1907=((1.0)*cj4);
IkReal x1908=((1.0)*sj0);
IkReal x1909=(sj4*sj5);
IkReal x1910=((1.0)*cj0);
IkReal x1911=((0.01)*cj5);
IkReal x1912=(cj4*sj0);
IkReal x1913=(cj1*x1899);
IkReal x1914=(r10*x1908);
IkReal x1915=(sj1*x1898);
IkReal x1916=(r00*x1910);
IkReal x1917=(sj1*x1899);
IkReal x1918=(cj1*x1898);
evalcond[0]=(((cj5*r21))+(((-1.0)*x1906*x1917))+(((-1.0)*x1906*x1918))+((r20*sj5)));
evalcond[1]=((((-0.095)*cj1))+(((-0.085)*x1913))+(((-1.0)*r21*x1903))+pz+(((0.085)*x1915))+((r20*x1911)));
evalcond[2]=((((-1.0)*r21*x1909))+(((-1.0)*r22*x1907))+(((-1.0)*x1915))+x1913+((r20*x1901)));
evalcond[3]=(((r22*sj4))+((cj3*x1917))+((cj3*x1918))+((r20*x1900))+(((-1.0)*r21*sj5*x1907)));
evalcond[4]=((((-1.0)*sj5*x1914))+(((-1.0)*sj5*x1916))+(((-1.0)*cj5*x1904))+(((-1.0)*cj5*r11*x1908))+(((-1.0)*x1906*x1913))+((sj3*x1915)));
evalcond[5]=(((x1904*x1909))+((sj0*sj4*x1905))+(((-1.0)*x1901*x1914))+(((-1.0)*x1901*x1916))+((cj0*cj4*r02))+(((-1.0)*x1918))+(((-1.0)*x1917))+((r12*x1912)));
evalcond[6]=((((0.095)*sj1))+(((-1.0)*py*x1908))+(((-1.0)*cj0*r00*x1911))+(((-1.0)*px*x1910))+((x1903*x1904))+(((-1.0)*cj5*r10*x1902))+(((0.085)*x1918))+(((0.085)*x1917))+((x1902*x1905)));
evalcond[7]=(((cj4*sj5*x1904))+((x1905*x1912))+(((-1.0)*x1900*x1916))+(((-1.0)*x1900*x1914))+((cj3*x1913))+(((-1.0)*cj3*x1915))+(((-1.0)*r02*sj4*x1910))+(((-1.0)*r12*sj4*x1908)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}
}
}

}

}

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x1919=((0.01)*cj3);
IkReal x1920=((1.0)*cj3);
CheckValue<IkReal> x1921=IKPowWithIntegerCheck(IKsign((((cj5*rxp1_2))+(((-0.01)*r22))+((rxp0_2*sj5)))),-1);
if(!x1921.valid){
continue;
}
CheckValue<IkReal> x1922 = IKatan2WithCheck(IkReal(((((-1.0)*cj5*r10*x1919))+(((-1.0)*py*x1920))+((r11*sj5*x1919)))),IkReal((((r01*sj5*x1919))+(((-1.0)*px*x1920))+(((-1.0)*cj5*r00*x1919)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1922.valid){
continue;
}
j0array[0]=((-1.5707963267949)+(((1.5707963267949)*(x1921.value)))+(x1922.value));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[4];
IkReal x1923=IKsin(j0);
IkReal x1924=IKcos(j0);
IkReal x1925=(r11*sj5);
IkReal x1926=((1.0)*r01);
IkReal x1927=((1.0)*r10);
IkReal x1928=(sj4*x1924);
IkReal x1929=(sj5*x1923);
IkReal x1930=(cj5*x1923);
IkReal x1931=(cj4*x1924);
IkReal x1932=(r02*x1923);
IkReal x1933=((0.01)*x1924);
IkReal x1934=((1.0)*x1924);
evalcond[0]=(((r00*x1929))+(((-1.0)*sj5*x1924*x1927))+cj3+((r01*x1930))+(((-1.0)*cj5*r11*x1934)));
evalcond[1]=((((-1.0)*py*x1934))+(((0.01)*r00*x1930))+(((-1.0)*cj5*r10*x1933))+((x1925*x1933))+(((-0.01)*r01*x1929))+((px*x1923)));
evalcond[2]=((((-1.0)*cj4*x1932))+((r12*x1931))+((r00*sj4*x1930))+(((-1.0)*sj4*x1926*x1929))+((x1925*x1928))+(((-1.0)*cj5*x1927*x1928)));
evalcond[3]=(sj3+(((-1.0)*cj4*x1926*x1929))+((cj4*r00*x1930))+((sj4*x1932))+((x1925*x1931))+(((-1.0)*cj5*x1927*x1931))+(((-1.0)*r12*x1928)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
IkReal x1935=((0.894736842105263)*cj4);
IkReal x1936=((0.105263157894737)*cj5);
IkReal x1937=(r01*sj5);
IkReal x1938=(r10*sj0);
IkReal x1939=((0.894736842105263)*sj4);
IkReal x1940=(r21*sj5);
IkReal x1941=(cj0*x1939);
IkReal x1942=(r11*sj0*sj5);
if( IKabs((((cj5*x1938*x1939))+(((-1.0)*x1937*x1941))+((cj0*r00*x1936))+(((-1.0)*r12*sj0*x1935))+(((10.5263157894737)*py*sj0))+((x1936*x1938))+(((-0.105263157894737)*cj0*x1937))+((cj5*r00*x1941))+(((-1.0)*cj0*r02*x1935))+(((-1.0)*x1939*x1942))+(((-0.105263157894737)*x1942))+(((10.5263157894737)*cj0*px)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((10.5263157894737)*pz))+(((-1.0)*r22*x1935))+((cj5*r20*x1939))+(((-1.0)*x1939*x1940))+(((-0.105263157894737)*x1940))+((r20*x1936)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((cj5*x1938*x1939))+(((-1.0)*x1937*x1941))+((cj0*r00*x1936))+(((-1.0)*r12*sj0*x1935))+(((10.5263157894737)*py*sj0))+((x1936*x1938))+(((-0.105263157894737)*cj0*x1937))+((cj5*r00*x1941))+(((-1.0)*cj0*r02*x1935))+(((-1.0)*x1939*x1942))+(((-0.105263157894737)*x1942))+(((10.5263157894737)*cj0*px))))+IKsqr(((((10.5263157894737)*pz))+(((-1.0)*r22*x1935))+((cj5*r20*x1939))+(((-1.0)*x1939*x1940))+(((-0.105263157894737)*x1940))+((r20*x1936))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j1array[0]=IKatan2((((cj5*x1938*x1939))+(((-1.0)*x1937*x1941))+((cj0*r00*x1936))+(((-1.0)*r12*sj0*x1935))+(((10.5263157894737)*py*sj0))+((x1936*x1938))+(((-0.105263157894737)*cj0*x1937))+((cj5*r00*x1941))+(((-1.0)*cj0*r02*x1935))+(((-1.0)*x1939*x1942))+(((-0.105263157894737)*x1942))+(((10.5263157894737)*cj0*px))), ((((10.5263157894737)*pz))+(((-1.0)*r22*x1935))+((cj5*r20*x1939))+(((-1.0)*x1939*x1940))+(((-0.105263157894737)*x1940))+((r20*x1936))));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[6];
IkReal x1943=IKcos(j1);
IkReal x1944=IKsin(j1);
IkReal x1945=(r11*sj0);
IkReal x1946=((0.085)*cj5);
IkReal x1947=((0.01)*cj3);
IkReal x1948=((0.085)*sj4);
IkReal x1949=(cj0*r00);
IkReal x1950=((0.085)*cj4);
IkReal x1951=(r10*sj0);
IkReal x1952=((0.01)*cj5);
IkReal x1953=(cj0*px);
IkReal x1954=((0.01)*sj5);
IkReal x1955=((1.0)*pz);
IkReal x1956=((0.085)*sj5);
IkReal x1957=(r21*sj5);
IkReal x1958=(r12*sj0);
IkReal x1959=(py*sj0);
IkReal x1960=(cj0*r02);
IkReal x1961=((1.0)*sj3);
IkReal x1962=((0.095)*x1943);
IkReal x1963=(cj0*r01*sj5);
IkReal x1964=((0.095)*x1944);
evalcond[0]=((((-1.0)*r20*sj4*x1946))+(((-1.0)*x1955))+((r21*x1954))+((r22*x1950))+x1962+((x1948*x1957))+(((-1.0)*r20*x1952)));
evalcond[1]=((((-1.0)*x1949*x1952))+((sj5*x1945*x1948))+((x1945*x1954))+(((-1.0)*sj4*x1946*x1951))+((cj0*r01*x1954))+(((-1.0)*sj4*x1946*x1949))+((x1950*x1958))+((x1950*x1960))+(((-1.0)*x1951*x1952))+x1964+(((-1.0)*x1953))+(((-1.0)*x1959))+((x1948*x1963)));
evalcond[2]=(((x1945*x1946))+((cj0*r01*x1946))+((r20*sj3*x1952))+(((-1.0)*sj3*x1962))+(((-1.0)*r21*sj3*x1954))+((x1951*x1956))+((pz*sj3))+((x1949*x1956)));
evalcond[3]=((((-1.0)*x1959*x1961))+((r20*x1956))+(((-1.0)*sj3*x1949*x1952))+((sj3*x1964))+((sj3*x1945*x1954))+((r21*x1946))+((cj0*r01*sj3*x1954))+(((-1.0)*sj3*x1951*x1952))+(((-1.0)*x1953*x1961)));
evalcond[4]=(((cj4*r20*x1946))+(((-1.0)*x1950*x1957))+((cj3*x1953))+((cj3*x1959))+((r22*x1948))+(((-1.0)*x1947*x1963))+((cj5*x1947*x1951))+(((-1.0)*cj3*x1964))+((cj5*x1947*x1949))+(((-1.0)*sj5*x1945*x1947)));
evalcond[5]=(((cj3*x1962))+((cj4*x1946*x1951))+(((-1.0)*cj5*r20*x1947))+((cj4*x1946*x1949))+(((-1.0)*x1950*x1963))+(((-1.0)*cj3*x1955))+((x1948*x1958))+(((-1.0)*sj5*x1945*x1950))+((x1947*x1957))+((x1948*x1960)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j2eval[3];
IkReal x1965=(cj5*r20);
IkReal x1966=(r20*sj5);
IkReal x1967=(r21*sj5);
IkReal x1968=(cj5*r21);
IkReal x1969=(cj1*sj3*sj4);
IkReal x1970=(cj4*r22*sj3);
IkReal x1971=(sj1*sj3*sj4);
j2eval[0]=sj3;
j2eval[1]=((IKabs((((cj1*x1968))+((cj1*x1966))+((x1965*x1971))+(((-1.0)*x1967*x1971))+(((-1.0)*sj1*x1970)))))+(IKabs((((cj1*x1970))+((sj1*x1968))+((sj1*x1966))+(((-1.0)*x1965*x1969))+((x1967*x1969))))));
j2eval[2]=IKsign(sj3);
if( IKabs(j2eval[0]) < 0.0000010000000000  || IKabs(j2eval[1]) < 0.0000010000000000  || IKabs(j2eval[2]) < 0.0000010000000000  )
{
{
IkReal j2eval[2];
j2eval[0]=sj3;
j2eval[1]=IKsign(sj3);
if( IKabs(j2eval[0]) < 0.0000010000000000  || IKabs(j2eval[1]) < 0.0000010000000000  )
{
{
IkReal j2eval[2];
j2eval[0]=cj3;
j2eval[1]=IKsign(cj3);
if( IKabs(j2eval[0]) < 0.0000010000000000  || IKabs(j2eval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x1972=(cj4*r22);
IkReal x1973=((1.0)*sj1);
IkReal x1974=(r20*sj1);
IkReal x1975=(cj5*sj4);
IkReal x1976=(cj1*r20);
IkReal x1977=(cj5*r21);
IkReal x1978=(r21*sj4*sj5);
if( IKabs((((sj5*x1976))+((cj1*x1977))+(((-1.0)*x1973*x1978))+(((-1.0)*x1972*x1973))+((x1974*x1975)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((sj5*x1974))+((cj1*x1978))+((cj1*x1972))+((sj1*x1977))+(((-1.0)*x1975*x1976)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((sj5*x1976))+((cj1*x1977))+(((-1.0)*x1973*x1978))+(((-1.0)*x1972*x1973))+((x1974*x1975))))+IKsqr((((sj5*x1974))+((cj1*x1978))+((cj1*x1972))+((sj1*x1977))+(((-1.0)*x1975*x1976))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j2array[0]=IKatan2((((sj5*x1976))+((cj1*x1977))+(((-1.0)*x1973*x1978))+(((-1.0)*x1972*x1973))+((x1974*x1975))), (((sj5*x1974))+((cj1*x1978))+((cj1*x1972))+((sj1*x1977))+(((-1.0)*x1975*x1976))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[6];
IkReal x1979=IKsin(j2);
IkReal x1980=IKcos(j2);
IkReal x1981=(sj0*sj5);
IkReal x1982=((1.0)*r10);
IkReal x1983=(cj0*r01);
IkReal x1984=(cj5*sj4);
IkReal x1985=((1.0)*sj0);
IkReal x1986=(sj4*sj5);
IkReal x1987=((0.01)*cj5);
IkReal x1988=(cj1*x1980);
IkReal x1989=(sj1*x1979);
IkReal x1990=((1.0)*cj0*r00);
IkReal x1991=(sj1*x1980);
IkReal x1992=(cj1*x1979);
IkReal x1993=((1.0)*x1991);
IkReal x1994=((1.0)*x1992);
IkReal x1995=(x1993+x1994);
evalcond[0]=(((cj5*r21))+(((-1.0)*x1995))+((r20*sj5)));
CheckValue<IkReal> x1996=IKPowWithIntegerCheck(cj4,-1);
if(!x1996.valid){
continue;
}
evalcond[1]=((((-0.095)*cj1))+(((-0.085)*x1988))+(((-0.01)*r22*sj4*(x1996.value)))+pz+(((0.085)*x1989)));
evalcond[2]=((((-1.0)*r21*x1986))+x1988+(((-1.0)*x1989))+(((-1.0)*cj4*r22))+((r20*x1984)));
evalcond[3]=((((-1.0)*x1981*x1982))+(((-1.0)*cj5*x1983))+(((-1.0)*cj5*r11*x1985))+x1989+(((-1.0)*sj5*x1990))+(((-1.0)*x1988)));
evalcond[4]=(((r11*sj4*x1981))+((cj0*cj4*r02))+(((-1.0)*x1995))+(((-1.0)*x1984*x1990))+((x1983*x1986))+(((-1.0)*sj0*x1982*x1984))+((cj4*r12*sj0)));
evalcond[5]=((((0.01)*r11*x1981))+(((0.095)*sj1))+(((0.01)*sj5*x1983))+(((-1.0)*r10*sj0*x1987))+(((-1.0)*py*x1985))+(((-1.0)*cj0*px))+(((0.085)*x1991))+(((0.085)*x1992))+(((-1.0)*cj0*r00*x1987)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x1997=((1.0)*sj1);
IkReal x1998=(r20*sj5);
IkReal x1999=(cj5*r21);
IkReal x2000=((1.0)*cj1);
IkReal x2001=(cj4*r22);
IkReal x2002=(r21*sj4*sj5);
IkReal x2003=(cj5*r20*sj4);
if( IKabs(((((-1.0)*x1998*x2000))+((sj1*x2003))+(((-1.0)*x1997*x2001))+(((-1.0)*x1997*x2002))+(((-1.0)*x1999*x2000)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*x1997*x1998))+(((-1.0)*x1997*x1999))+(((-1.0)*x2000*x2003))+((cj1*x2001))+((cj1*x2002)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*x1998*x2000))+((sj1*x2003))+(((-1.0)*x1997*x2001))+(((-1.0)*x1997*x2002))+(((-1.0)*x1999*x2000))))+IKsqr(((((-1.0)*x1997*x1998))+(((-1.0)*x1997*x1999))+(((-1.0)*x2000*x2003))+((cj1*x2001))+((cj1*x2002))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j2array[0]=IKatan2(((((-1.0)*x1998*x2000))+((sj1*x2003))+(((-1.0)*x1997*x2001))+(((-1.0)*x1997*x2002))+(((-1.0)*x1999*x2000))), ((((-1.0)*x1997*x1998))+(((-1.0)*x1997*x1999))+(((-1.0)*x2000*x2003))+((cj1*x2001))+((cj1*x2002))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[6];
IkReal x2004=IKsin(j2);
IkReal x2005=IKcos(j2);
IkReal x2006=(sj0*sj5);
IkReal x2007=((1.0)*r10);
IkReal x2008=(cj5*sj4);
IkReal x2009=((1.0)*cj0);
IkReal x2010=((1.0)*sj0);
IkReal x2011=((0.01)*cj5);
IkReal x2012=(cj1*x2005);
IkReal x2013=(sj1*x2004);
IkReal x2014=(cj1*x2004);
IkReal x2015=(cj0*r01*sj5);
IkReal x2016=(sj1*x2005);
IkReal x2017=((1.0)*x2013);
evalcond[0]=(((cj5*r21))+x2014+x2016+((r20*sj5)));
CheckValue<IkReal> x2018=IKPowWithIntegerCheck(cj4,-1);
if(!x2018.valid){
continue;
}
evalcond[1]=((((-0.095)*cj1))+(((0.085)*x2013))+(((-0.01)*r22*sj4*(x2018.value)))+pz+(((-0.085)*x2012)));
evalcond[2]=((((-1.0)*x2017))+x2012+((r20*x2008))+(((-1.0)*r21*sj4*sj5))+(((-1.0)*cj4*r22)));
evalcond[3]=((((-1.0)*x2006*x2007))+(((-1.0)*cj5*r01*x2009))+(((-1.0)*x2017))+x2012+(((-1.0)*cj5*r11*x2010))+(((-1.0)*r00*sj5*x2009)));
evalcond[4]=(((sj4*x2015))+(((-1.0)*r00*x2008*x2009))+((cj0*cj4*r02))+((r11*sj4*x2006))+(((-1.0)*x2016))+(((-1.0)*x2014))+(((-1.0)*sj0*x2007*x2008))+((cj4*r12*sj0)));
evalcond[5]=((((-1.0)*px*x2009))+(((-1.0)*r10*sj0*x2011))+(((-1.0)*py*x2010))+(((0.01)*r11*x2006))+(((0.095)*sj1))+(((-1.0)*cj0*r00*x2011))+(((0.01)*x2015))+(((0.085)*x2014))+(((0.085)*x2016)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j3))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x2019=(cj1*r22);
IkReal x2020=(sj1*sj4);
IkReal x2021=(cj5*r20);
IkReal x2022=((1.0)*sj4);
IkReal x2023=(r21*sj5);
IkReal x2024=(cj4*sj1);
IkReal x2025=(cj1*x2023);
IkReal x2026=((1.0)*r22*sj1);
if( IKabs((((x2020*x2021))+((cj4*x2025))+(((-1.0)*r22*x2024))+(((-1.0)*x2020*x2023))+(((-1.0)*x2019*x2022))+(((-1.0)*cj1*cj4*x2021)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*x2021*x2024))+(((-1.0)*r22*x2020))+(((-1.0)*cj1*x2021*x2022))+((x2023*x2024))+((cj4*x2019))+((sj4*x2025)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((x2020*x2021))+((cj4*x2025))+(((-1.0)*r22*x2024))+(((-1.0)*x2020*x2023))+(((-1.0)*x2019*x2022))+(((-1.0)*cj1*cj4*x2021))))+IKsqr(((((-1.0)*x2021*x2024))+(((-1.0)*r22*x2020))+(((-1.0)*cj1*x2021*x2022))+((x2023*x2024))+((cj4*x2019))+((sj4*x2025))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j2array[0]=IKatan2((((x2020*x2021))+((cj4*x2025))+(((-1.0)*r22*x2024))+(((-1.0)*x2020*x2023))+(((-1.0)*x2019*x2022))+(((-1.0)*cj1*cj4*x2021))), ((((-1.0)*x2021*x2024))+(((-1.0)*r22*x2020))+(((-1.0)*cj1*x2021*x2022))+((x2023*x2024))+((cj4*x2019))+((sj4*x2025))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[6];
IkReal x2027=IKsin(j2);
IkReal x2028=IKcos(j2);
IkReal x2029=(sj0*sj4);
IkReal x2030=(cj5*r10);
IkReal x2031=(r11*sj5);
IkReal x2032=((0.01)*sj0);
IkReal x2033=((0.01)*sj5);
IkReal x2034=(cj0*r01);
IkReal x2035=((1.0)*cj4);
IkReal x2036=(sj4*sj5);
IkReal x2037=((1.0)*cj0);
IkReal x2038=(cj5*r20);
IkReal x2039=(cj4*sj0);
IkReal x2040=(cj1*x2028);
IkReal x2041=(sj1*x2027);
IkReal x2042=(cj1*x2027);
IkReal x2043=(cj0*cj5*r00);
IkReal x2044=(sj1*x2028);
IkReal x2045=((1.0)*x2041);
evalcond[0]=(((cj4*x2038))+((r22*sj4))+x2044+x2042+(((-1.0)*r21*sj5*x2035)));
evalcond[1]=((((0.01)*x2038))+(((-0.095)*cj1))+(((-0.085)*x2040))+(((0.085)*x2041))+pz+(((-1.0)*r21*x2033)));
evalcond[2]=((((-1.0)*r22*x2035))+(((-1.0)*x2045))+x2040+((sj4*x2038))+(((-1.0)*r21*x2036)));
evalcond[3]=((((-1.0)*cj5*r00*sj4*x2037))+((x2034*x2036))+((r12*x2039))+((cj0*cj4*r02))+(((-1.0)*x2042))+(((-1.0)*x2044))+(((-1.0)*x2029*x2030))+((x2029*x2031)));
evalcond[4]=((((-1.0)*px*x2037))+((x2031*x2032))+(((0.095)*sj1))+(((0.085)*x2044))+(((0.085)*x2042))+((x2033*x2034))+(((-1.0)*x2030*x2032))+(((-1.0)*py*sj0))+(((-0.01)*x2043)));
evalcond[5]=(((x2031*x2039))+(((-1.0)*x2045))+x2040+(((-1.0)*sj0*x2030*x2035))+(((-1.0)*r02*sj4*x2037))+((cj4*sj5*x2034))+(((-1.0)*r12*x2029))+(((-1.0)*x2035*x2043)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x2046=((1.0)*cj4);
IkReal x2047=(r22*sj1);
IkReal x2048=(cj1*r22);
IkReal x2049=(sj1*sj4);
IkReal x2050=(cj5*r20);
IkReal x2051=(r21*sj5);
IkReal x2052=(cj1*x2051);
if( IKabs((((x2049*x2050))+((sj4*x2048))+((cj1*cj4*x2050))+(((-1.0)*x2046*x2052))+(((-1.0)*x2049*x2051))+(((-1.0)*x2046*x2047)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*cj1*sj4*x2050))+((cj4*x2048))+((sj4*x2047))+(((-1.0)*sj1*x2046*x2051))+((sj4*x2052))+((cj4*sj1*x2050)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((x2049*x2050))+((sj4*x2048))+((cj1*cj4*x2050))+(((-1.0)*x2046*x2052))+(((-1.0)*x2049*x2051))+(((-1.0)*x2046*x2047))))+IKsqr(((((-1.0)*cj1*sj4*x2050))+((cj4*x2048))+((sj4*x2047))+(((-1.0)*sj1*x2046*x2051))+((sj4*x2052))+((cj4*sj1*x2050))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j2array[0]=IKatan2((((x2049*x2050))+((sj4*x2048))+((cj1*cj4*x2050))+(((-1.0)*x2046*x2052))+(((-1.0)*x2049*x2051))+(((-1.0)*x2046*x2047))), ((((-1.0)*cj1*sj4*x2050))+((cj4*x2048))+((sj4*x2047))+(((-1.0)*sj1*x2046*x2051))+((sj4*x2052))+((cj4*sj1*x2050))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[6];
IkReal x2053=IKcos(j2);
IkReal x2054=IKsin(j2);
IkReal x2055=(sj0*sj4);
IkReal x2056=(cj5*r10);
IkReal x2057=(r11*sj5);
IkReal x2058=((0.01)*sj0);
IkReal x2059=((0.01)*sj5);
IkReal x2060=(cj0*r01);
IkReal x2061=((1.0)*cj4);
IkReal x2062=(sj4*sj5);
IkReal x2063=((1.0)*cj0);
IkReal x2064=(cj5*r20);
IkReal x2065=(cj4*sj0);
IkReal x2066=(cj1*x2053);
IkReal x2067=(sj1*x2054);
IkReal x2068=(cj0*cj5*r00);
IkReal x2069=(sj1*x2053);
IkReal x2070=(cj1*x2054);
IkReal x2071=((1.0)*x2069);
IkReal x2072=((1.0)*x2070);
IkReal x2073=(x2072+x2071);
evalcond[0]=((((-0.095)*cj1))+(((0.01)*x2064))+(((0.085)*x2067))+(((-0.085)*x2066))+pz+(((-1.0)*r21*x2059)));
evalcond[1]=((((-1.0)*r21*x2062))+x2066+(((-1.0)*r22*x2061))+(((-1.0)*x2067))+((sj4*x2064)));
evalcond[2]=(((r22*sj4))+(((-1.0)*x2073))+((cj4*x2064))+(((-1.0)*r21*sj5*x2061)));
evalcond[3]=((((-1.0)*x2055*x2056))+((x2055*x2057))+((r12*x2065))+(((-1.0)*x2073))+((cj0*cj4*r02))+((x2060*x2062))+(((-1.0)*cj5*r00*sj4*x2063)));
evalcond[4]=((((-0.01)*x2068))+(((-1.0)*px*x2063))+(((0.085)*x2070))+(((0.095)*sj1))+(((0.085)*x2069))+((x2059*x2060))+(((-1.0)*x2056*x2058))+(((-1.0)*py*sj0))+((x2057*x2058)));
evalcond[5]=(x2067+(((-1.0)*x2066))+(((-1.0)*x2061*x2068))+(((-1.0)*sj0*x2056*x2061))+((x2057*x2065))+(((-1.0)*r12*x2055))+(((-1.0)*r02*sj4*x2063))+((cj4*sj5*x2060)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j2]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}

} else
{
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x2074=(cj1*cj4);
IkReal x2075=(r21*sj5);
IkReal x2076=((1.0)*sj4);
IkReal x2077=(cj5*r20);
IkReal x2078=(cj1*cj3);
IkReal x2079=(cj3*r22);
IkReal x2080=(cj3*sj1);
IkReal x2081=((1.0)*cj4*sj1);
CheckValue<IkReal> x2082=IKPowWithIntegerCheck(IKsign(cj3),-1);
if(!x2082.valid){
continue;
}
CheckValue<IkReal> x2083 = IKatan2WithCheck(IkReal((((sj4*x2077*x2080))+(((-1.0)*cj1*r22*x2076))+(((-1.0)*x2075*x2076*x2080))+((x2074*x2075))+(((-1.0)*x2079*x2081))+(((-1.0)*x2074*x2077)))),IkReal(((((-1.0)*r22*sj1*x2076))+(((-1.0)*x2076*x2077*x2078))+(((-1.0)*x2077*x2081))+((sj4*x2075*x2078))+((cj4*sj1*x2075))+((x2074*x2079)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2083.valid){
continue;
}
j2array[0]=((-1.5707963267949)+(((1.5707963267949)*(x2082.value)))+(x2083.value));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[8];
IkReal x2084=IKsin(j2);
IkReal x2085=IKcos(j2);
IkReal x2086=(cj4*cj5);
IkReal x2087=(cj5*sj4);
IkReal x2088=((0.01)*sj0);
IkReal x2089=((0.01)*sj5);
IkReal x2090=(cj0*r01);
IkReal x2091=(r11*sj5);
IkReal x2092=((1.0)*sj3);
IkReal x2093=((1.0)*cj4);
IkReal x2094=((1.0)*sj0);
IkReal x2095=(sj4*sj5);
IkReal x2096=((1.0)*cj0);
IkReal x2097=((0.01)*cj5);
IkReal x2098=(cj4*sj0);
IkReal x2099=(cj1*x2085);
IkReal x2100=(r10*x2094);
IkReal x2101=(sj1*x2084);
IkReal x2102=(r00*x2096);
IkReal x2103=(sj1*x2085);
IkReal x2104=(cj1*x2084);
evalcond[0]=(((cj5*r21))+(((-1.0)*x2092*x2104))+(((-1.0)*x2092*x2103))+((r20*sj5)));
evalcond[1]=(((r20*x2097))+(((-0.095)*cj1))+(((-1.0)*r21*x2089))+(((0.085)*x2101))+pz+(((-0.085)*x2099)));
evalcond[2]=(x2099+((r20*x2087))+(((-1.0)*r21*x2095))+(((-1.0)*x2101))+(((-1.0)*r22*x2093)));
evalcond[3]=(((r22*sj4))+((r20*x2086))+(((-1.0)*r21*sj5*x2093))+((cj3*x2103))+((cj3*x2104)));
evalcond[4]=((((-1.0)*x2092*x2099))+(((-1.0)*cj5*r11*x2094))+((sj3*x2101))+(((-1.0)*cj5*x2090))+(((-1.0)*sj5*x2100))+(((-1.0)*sj5*x2102)));
evalcond[5]=((((-1.0)*x2087*x2100))+(((-1.0)*x2087*x2102))+((cj0*cj4*r02))+((sj0*sj4*x2091))+((x2090*x2095))+((r12*x2098))+(((-1.0)*x2104))+(((-1.0)*x2103)));
evalcond[6]=((((-1.0)*py*x2094))+(((0.085)*x2104))+(((0.085)*x2103))+(((-1.0)*cj5*r10*x2088))+(((0.095)*sj1))+((x2088*x2091))+(((-1.0)*cj0*r00*x2097))+((x2089*x2090))+(((-1.0)*px*x2096)));
evalcond[7]=((((-1.0)*r02*sj4*x2096))+(((-1.0)*cj3*x2101))+((x2091*x2098))+(((-1.0)*r12*sj4*x2094))+((cj4*sj5*x2090))+(((-1.0)*x2086*x2100))+(((-1.0)*x2086*x2102))+((cj3*x2099)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x2105=(r21*sj1);
IkReal x2106=((17.0)*cj5);
IkReal x2107=(cj1*sj3);
IkReal x2108=((200.0)*pz);
IkReal x2109=((2.0)*sj5);
IkReal x2110=(sj1*sj3);
IkReal x2111=((2.0)*cj5*r20);
IkReal x2112=((17.0)*r20*sj5);
CheckValue<IkReal> x2113=IKPowWithIntegerCheck(IKsign(sj3),-1);
if(!x2113.valid){
continue;
}
CheckValue<IkReal> x2114 = IKatan2WithCheck(IkReal(((((-1.0)*x2108*x2110))+((cj1*r21*x2106))+(((19.0)*sj1*x2107))+(((-1.0)*x2110*x2111))+((sj3*x2105*x2109))+((cj1*x2112)))),IkReal((((sj1*x2112))+(((-19.0)*cj1*x2107))+((x2107*x2111))+(((-1.0)*r21*x2107*x2109))+((x2107*x2108))+((x2105*x2106)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2114.valid){
continue;
}
j2array[0]=((-1.5707963267949)+(((1.5707963267949)*(x2113.value)))+(x2114.value));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[8];
IkReal x2115=IKsin(j2);
IkReal x2116=IKcos(j2);
IkReal x2117=(cj4*cj5);
IkReal x2118=(cj5*sj4);
IkReal x2119=((0.01)*sj0);
IkReal x2120=((0.01)*sj5);
IkReal x2121=(cj0*r01);
IkReal x2122=(r11*sj5);
IkReal x2123=((1.0)*sj3);
IkReal x2124=((1.0)*cj4);
IkReal x2125=((1.0)*sj0);
IkReal x2126=(sj4*sj5);
IkReal x2127=((1.0)*cj0);
IkReal x2128=((0.01)*cj5);
IkReal x2129=(cj4*sj0);
IkReal x2130=(cj1*x2116);
IkReal x2131=(r10*x2125);
IkReal x2132=(sj1*x2115);
IkReal x2133=(r00*x2127);
IkReal x2134=(sj1*x2116);
IkReal x2135=(cj1*x2115);
evalcond[0]=(((cj5*r21))+(((-1.0)*x2123*x2135))+(((-1.0)*x2123*x2134))+((r20*sj5)));
evalcond[1]=((((0.085)*x2132))+(((-0.085)*x2130))+(((-0.095)*cj1))+((r20*x2128))+pz+(((-1.0)*r21*x2120)));
evalcond[2]=((((-1.0)*r21*x2126))+(((-1.0)*r22*x2124))+x2130+((r20*x2118))+(((-1.0)*x2132)));
evalcond[3]=(((r22*sj4))+((r20*x2117))+((cj3*x2135))+((cj3*x2134))+(((-1.0)*r21*sj5*x2124)));
evalcond[4]=((((-1.0)*cj5*r11*x2125))+(((-1.0)*x2123*x2130))+((sj3*x2132))+(((-1.0)*sj5*x2131))+(((-1.0)*sj5*x2133))+(((-1.0)*cj5*x2121)));
evalcond[5]=((((-1.0)*x2118*x2133))+(((-1.0)*x2118*x2131))+((r12*x2129))+((sj0*sj4*x2122))+((cj0*cj4*r02))+((x2121*x2126))+(((-1.0)*x2134))+(((-1.0)*x2135)));
evalcond[6]=((((0.085)*x2135))+(((0.085)*x2134))+(((0.095)*sj1))+(((-1.0)*cj5*r10*x2119))+(((-1.0)*cj0*r00*x2128))+(((-1.0)*px*x2127))+((x2120*x2121))+((x2119*x2122))+(((-1.0)*py*x2125)));
evalcond[7]=((((-1.0)*cj3*x2132))+((x2122*x2129))+(((-1.0)*x2117*x2133))+(((-1.0)*x2117*x2131))+(((-1.0)*r12*sj4*x2125))+((cj3*x2130))+(((-1.0)*r02*sj4*x2127))+((cj4*sj5*x2121)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x2136=(cj5*r20);
IkReal x2137=(r20*sj5);
IkReal x2138=(r21*sj5);
IkReal x2139=(cj5*r21);
IkReal x2140=(cj1*sj3*sj4);
IkReal x2141=(cj4*r22*sj3);
IkReal x2142=(sj1*sj3*sj4);
CheckValue<IkReal> x2143=IKPowWithIntegerCheck(IKsign(sj3),-1);
if(!x2143.valid){
continue;
}
CheckValue<IkReal> x2144 = IKatan2WithCheck(IkReal(((((-1.0)*sj1*x2141))+(((-1.0)*x2138*x2142))+((x2136*x2142))+((cj1*x2139))+((cj1*x2137)))),IkReal((((x2138*x2140))+((cj1*x2141))+(((-1.0)*x2136*x2140))+((sj1*x2139))+((sj1*x2137)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2144.valid){
continue;
}
j2array[0]=((-1.5707963267949)+(((1.5707963267949)*(x2143.value)))+(x2144.value));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[8];
IkReal x2145=IKsin(j2);
IkReal x2146=IKcos(j2);
IkReal x2147=(cj4*cj5);
IkReal x2148=(cj5*sj4);
IkReal x2149=((0.01)*sj0);
IkReal x2150=((0.01)*sj5);
IkReal x2151=(cj0*r01);
IkReal x2152=(r11*sj5);
IkReal x2153=((1.0)*sj3);
IkReal x2154=((1.0)*cj4);
IkReal x2155=((1.0)*sj0);
IkReal x2156=(sj4*sj5);
IkReal x2157=((1.0)*cj0);
IkReal x2158=((0.01)*cj5);
IkReal x2159=(cj4*sj0);
IkReal x2160=(cj1*x2146);
IkReal x2161=(r10*x2155);
IkReal x2162=(sj1*x2145);
IkReal x2163=(r00*x2157);
IkReal x2164=(sj1*x2146);
IkReal x2165=(cj1*x2145);
evalcond[0]=(((cj5*r21))+(((-1.0)*x2153*x2165))+(((-1.0)*x2153*x2164))+((r20*sj5)));
evalcond[1]=((((-0.095)*cj1))+(((0.085)*x2162))+((r20*x2158))+pz+(((-1.0)*r21*x2150))+(((-0.085)*x2160)));
evalcond[2]=(((r20*x2148))+x2160+(((-1.0)*r21*x2156))+(((-1.0)*r22*x2154))+(((-1.0)*x2162)));
evalcond[3]=(((r20*x2147))+((r22*sj4))+(((-1.0)*r21*sj5*x2154))+((cj3*x2164))+((cj3*x2165)));
evalcond[4]=((((-1.0)*cj5*r11*x2155))+(((-1.0)*x2153*x2160))+((sj3*x2162))+(((-1.0)*sj5*x2161))+(((-1.0)*sj5*x2163))+(((-1.0)*cj5*x2151)));
evalcond[5]=(((cj0*cj4*r02))+((x2151*x2156))+((sj0*sj4*x2152))+(((-1.0)*x2165))+(((-1.0)*x2164))+(((-1.0)*x2148*x2161))+(((-1.0)*x2148*x2163))+((r12*x2159)));
evalcond[6]=((((-1.0)*px*x2157))+(((0.095)*sj1))+((x2149*x2152))+(((0.085)*x2164))+(((0.085)*x2165))+(((-1.0)*cj0*r00*x2158))+((x2150*x2151))+(((-1.0)*py*x2155))+(((-1.0)*cj5*r10*x2149)));
evalcond[7]=((((-1.0)*cj3*x2162))+(((-1.0)*x2147*x2161))+(((-1.0)*x2147*x2163))+(((-1.0)*r02*sj4*x2157))+((cj4*sj5*x2151))+((x2152*x2159))+(((-1.0)*r12*sj4*x2155))+((cj3*x2160)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}
}
}

}

}
}
}};


/// solves the inverse kinematics equations.
/// \param pfree is an array specifying the free joints of the chain.
IKFAST_API bool ComputeIk(const IkReal* eetrans, const IkReal* eerot, const IkReal* pfree, IkSolutionListBase<IkReal>& solutions) {
IKSolver solver;
return solver.ComputeIk(eetrans,eerot,pfree,solutions);
}

IKFAST_API bool ComputeIk2(const IkReal* eetrans, const IkReal* eerot, const IkReal* pfree, IkSolutionListBase<IkReal>& solutions, void* pOpenRAVEManip) {
IKSolver solver;
return solver.ComputeIk(eetrans,eerot,pfree,solutions);
}

IKFAST_API const char* GetKinematicsHash() { return "<robot:GenericRobot - arm_mesh (46aa98e1c8c6ca32cdccc0592087f3d0)>"; }

IKFAST_API const char* GetIkFastVersion() { return "0x10000049"; }

#ifdef IKFAST_NAMESPACE
} // end namespace
#endif

#ifndef IKFAST_NO_MAIN
#include <stdio.h>
#include <stdlib.h>
#ifdef IKFAST_NAMESPACE
using namespace IKFAST_NAMESPACE;
#endif
int main(int argc, char** argv)
{
    if( argc != 12+GetNumFreeParameters()+1 ) {
        printf("\nUsage: ./ik r00 r01 r02 t0 r10 r11 r12 t1 r20 r21 r22 t2 free0 ...\n\n"
               "Returns the ik solutions given the transformation of the end effector specified by\n"
               "a 3x3 rotation R (rXX), and a 3x1 translation (tX).\n"
               "There are %d free parameters that have to be specified.\n\n",GetNumFreeParameters());
        return 1;
    }

    IkSolutionList<IkReal> solutions;
    std::vector<IkReal> vfree(GetNumFreeParameters());
    IkReal eerot[9],eetrans[3];
    eerot[0] = atof(argv[1]); eerot[1] = atof(argv[2]); eerot[2] = atof(argv[3]); eetrans[0] = atof(argv[4]);
    eerot[3] = atof(argv[5]); eerot[4] = atof(argv[6]); eerot[5] = atof(argv[7]); eetrans[1] = atof(argv[8]);
    eerot[6] = atof(argv[9]); eerot[7] = atof(argv[10]); eerot[8] = atof(argv[11]); eetrans[2] = atof(argv[12]);
    for(std::size_t i = 0; i < vfree.size(); ++i)
        vfree[i] = atof(argv[13+i]);
    bool bSuccess = ComputeIk(eetrans, eerot, vfree.size() > 0 ? &vfree[0] : NULL, solutions);

    if( !bSuccess ) {
        fprintf(stderr,"Failed to get ik solution\n");
        return -1;
    }

    printf("Found %d ik solutions:\n", (int)solutions.GetNumSolutions());
    std::vector<IkReal> solvalues(GetNumJoints());
    for(std::size_t i = 0; i < solutions.GetNumSolutions(); ++i) {
        const IkSolutionBase<IkReal>& sol = solutions.GetSolution(i);
        printf("sol%d (free=%d): ", (int)i, (int)sol.GetFree().size());
        std::vector<IkReal> vsolfree(sol.GetFree().size());
        sol.GetSolution(&solvalues[0],vsolfree.size()>0?&vsolfree[0]:NULL);
        for( std::size_t j = 0; j < solvalues.size(); ++j)
            printf("%.15f, ", solvalues[j]);
        printf("\n");
    }
    return 0;
}

#endif
